
communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002fac  08002fac  00003fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800301c  0800301c  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003024  08003024  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003028  08003028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800302c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000980  20000060  0800308c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800308c  000059e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005546  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b7  00000000  00000000  0000a5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddb5  00000000  00000000  0000c5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061b4  00000000  00000000  0002a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4858  00000000  00000000  00030556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  000d4df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d720c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f94 	.word	0x08002f94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08002f94 	.word	0x08002f94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e8:	4907      	ldr	r1, [pc, #28]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ffe3 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000616:	2004      	movs	r0, #4
 8000618:	f7ff ffe0 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800061c:	2002      	movs	r0, #2
 800061e:	f7ff ffdd 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000622:	2008      	movs	r0, #8
 8000624:	f7ff ffda 	bl	80005dc <LL_AHB1_GRP1_EnableClock>

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	@ (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	@ (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LL_RCC_HSI_Enable+0x1c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <LL_RCC_HSI_Enable+0x1c>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <LL_RCC_HSI_IsReady+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40023800 	.word	0x40023800

080007cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4904      	ldr	r1, [pc, #16]	@ (80007f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007e2:	4313      	orrs	r3, r2
 80007e4:	600b      	str	r3, [r1, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <LL_RCC_SetSysClkSource+0x24>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f023 0203 	bic.w	r2, r3, #3
 8000808:	4904      	ldr	r1, [pc, #16]	@ (800081c <LL_RCC_SetSysClkSource+0x24>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	608b      	str	r3, [r1, #8]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023800 	.word	0x40023800

08000820 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <LL_RCC_GetSysClkSource+0x18>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f003 030c 	and.w	r3, r3, #12
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <LL_RCC_SetAHBPrescaler+0x24>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800084c:	4904      	ldr	r1, [pc, #16]	@ (8000860 <LL_RCC_SetAHBPrescaler+0x24>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <LL_RCC_SetAPB1Prescaler+0x24>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000874:	4904      	ldr	r1, [pc, #16]	@ (8000888 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4313      	orrs	r3, r2
 800087a:	608b      	str	r3, [r1, #8]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800089c:	4904      	ldr	r1, [pc, #16]	@ (80008b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	608b      	str	r3, [r1, #8]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_RCC_SetTIMPrescaler+0x28>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80008c6:	4905      	ldr	r1, [pc, #20]	@ (80008dc <LL_RCC_SetTIMPrescaler+0x28>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800

080008e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ec:	4907      	ldr	r1, [pc, #28]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4013      	ands	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40023800 	.word	0x40023800

08000910 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 800091a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800091c:	4907      	ldr	r1, [pc, #28]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	40023800 	.word	0x40023800

08000940 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <LL_FLASH_SetLatency+0x24>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 020f 	bic.w	r2, r3, #15
 8000950:	4904      	ldr	r1, [pc, #16]	@ (8000964 <LL_FLASH_SetLatency+0x24>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40023c00 	.word	0x40023c00

08000968 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <LL_FLASH_GetLatency+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 030f 	and.w	r3, r3, #15
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023c00 	.word	0x40023c00

08000984 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <LL_PWR_DisableOverDriveMode+0x1c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <LL_PWR_DisableOverDriveMode+0x1c>)
 800098e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40007000 	.word	0x40007000

080009a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80009b4:	4904      	ldr	r1, [pc, #16]	@ (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40007000 	.word	0x40007000

080009cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b089      	sub	sp, #36	@ 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	330c      	adds	r3, #12
 80009f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	e853 3f00 	ldrex	r3, [r3]
 8000a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	330c      	adds	r3, #12
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	61ba      	str	r2, [r7, #24]
 8000a12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a14:	6979      	ldr	r1, [r7, #20]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	e841 2300 	strex	r3, r2, [r1]
 8000a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1e7      	bne.n	80009f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000a38:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000a3c:	f7ff ff50 	bl	80008e0 <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a44:	f7ff ff64 	bl	8000910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a48:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a4c:	f7ff ff48 	bl	80008e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a54:	f7ff ff5c 	bl	8000910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a58:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a5c:	f7ff ff40 	bl	80008e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fde3 	bl	800062c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000a66:	f7ff fe05 	bl	8000674 <__NVIC_GetPriorityGrouping>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	210f      	movs	r1, #15
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe55 	bl	8000720 <NVIC_EncodePriority>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f7ff fe25 	bl	80006cc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f83f 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f7ff fdc1 	bl	800060c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a8a:	f000 fbd9 	bl	8001240 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000a8e:	f000 fb0f 	bl	80010b0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000a92:	f000 fb85 	bl	80011a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART3);
 8000a96:	4815      	ldr	r0, [pc, #84]	@ (8000aec <main+0xb8>)
 8000a98:	f7ff ffa8 	bl	80009ec <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART3);
 8000a9c:	4813      	ldr	r0, [pc, #76]	@ (8000aec <main+0xb8>)
 8000a9e:	f7ff ff95 	bl	80009cc <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(UART5);
 8000aa2:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <main+0xbc>)
 8000aa4:	f7ff ffa2 	bl	80009ec <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(UART5);
 8000aa8:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <main+0xbc>)
 8000aaa:	f7ff ff8f 	bl	80009cc <LL_USART_Enable>
  NVIC_SetPriority(USART3_IRQn, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2027      	movs	r0, #39	@ 0x27
 8000ab2:	f7ff fe0b 	bl	80006cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000ab6:	2027      	movs	r0, #39	@ 0x27
 8000ab8:	f7ff fdea 	bl	8000690 <__NVIC_EnableIRQ>
  NVIC_SetPriority(UART5_IRQn, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2035      	movs	r0, #53	@ 0x35
 8000ac0:	f7ff fe04 	bl	80006cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8000ac4:	2035      	movs	r0, #53	@ 0x35
 8000ac6:	f7ff fde3 	bl	8000690 <__NVIC_EnableIRQ>
  printf ("start\r\n");
 8000aca:	480a      	ldr	r0, [pc, #40]	@ (8000af4 <main+0xc0>)
 8000acc:	f001 fc00 	bl	80022d0 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
	 if (data_ready)
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <main+0xc4>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0fa      	beq.n	8000ad0 <main+0x9c>
	  {
	    data_ready = 0;
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <main+0xc4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	    printf("Received JSON: %s\n", rx_buffer);
 8000ae0:	4906      	ldr	r1, [pc, #24]	@ (8000afc <main+0xc8>)
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <main+0xcc>)
 8000ae4:	f001 fb8c 	bl	8002200 <iprintf>
	 if (data_ready)
 8000ae8:	e7f2      	b.n	8000ad0 <main+0x9c>
 8000aea:	bf00      	nop
 8000aec:	40004800 	.word	0x40004800
 8000af0:	40005000 	.word	0x40005000
 8000af4:	08002fb4 	.word	0x08002fb4
 8000af8:	20000880 	.word	0x20000880
 8000afc:	20000080 	.word	0x20000080
 8000b00:	08002fbc 	.word	0x08002fbc

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff19 	bl	8000940 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ff2a 	bl	8000968 <LL_FLASH_GetLatency>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1fa      	bne.n	8000b10 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000b1a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b1e:	f7ff ff41 	bl	80009a4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000b22:	f7ff ff2f 	bl	8000984 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b26:	2010      	movs	r0, #16
 8000b28:	f7ff fe50 	bl	80007cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000b2c:	f7ff fe2c 	bl	8000788 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b30:	bf00      	nop
 8000b32:	f7ff fe39 	bl	80007a8 <LL_RCC_HSI_IsReady>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d1fa      	bne.n	8000b32 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe7d 	bl	800083c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fe8e 	bl	8000864 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fe9f 	bl	800088c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fe52 	bl	80007f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000b54:	bf00      	nop
 8000b56:	f7ff fe63 	bl	8000820 <LL_RCC_GetSysClkSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1fa      	bne.n	8000b56 <SystemClock_Config+0x52>
  {

  }
  LL_Init1msTick(16000000);
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <SystemClock_Config+0x74>)
 8000b62:	f001 fa6d 	bl	8002040 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000b66:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <SystemClock_Config+0x74>)
 8000b68:	f001 fa78 	bl	800205c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fea1 	bl	80008b4 <LL_RCC_SetTIMPrescaler>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	00f42400 	.word	0x00f42400

08000b7c <LL_USART_IsActiveFlag_RXNE>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	2b20      	cmp	r3, #32
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	2b20      	cmp	r3, #32
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	b2db      	uxtb	r3, r3
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be6:	bf00      	nop
 8000be8:	e7fd      	b.n	8000be6 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	bf00      	nop
 8000bf0:	e7fd      	b.n	8000bee <HardFault_Handler+0x4>

08000bf2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	bf00      	nop
 8000c00:	e7fd      	b.n	8000bfe <BusFault_Handler+0x4>

08000c02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8000c48:	481d      	ldr	r0, [pc, #116]	@ (8000cc0 <USART3_IRQHandler+0x7c>)
 8000c4a:	f7ff ff97 	bl	8000b7c <LL_USART_IsActiveFlag_RXNE>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <USART3_IRQHandler+0x78>
 8000c54:	481a      	ldr	r0, [pc, #104]	@ (8000cc0 <USART3_IRQHandler+0x7c>)
 8000c56:	f7ff ffa4 	bl	8000ba2 <LL_USART_IsEnabledIT_RXNE>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d02d      	beq.n	8000cbc <USART3_IRQHandler+0x78>
	  {
	    rx_data = LL_USART_ReceiveData8(USART3);
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <USART3_IRQHandler+0x7c>)
 8000c62:	f7ff ffb1 	bl	8000bc8 <LL_USART_ReceiveData8>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <USART3_IRQHandler+0x80>)
 8000c6c:	701a      	strb	r2, [r3, #0]

	    // 檢查是否資料結束（這裡用 \n 當作結尾）
	    if (rx_data == '\n' || rx_index >= RX_BUFFER_SIZE - 1)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <USART3_IRQHandler+0x80>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	d006      	beq.n	8000c86 <USART3_IRQHandler+0x42>
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <USART3_IRQHandler+0x84>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d90d      	bls.n	8000ca2 <USART3_IRQHandler+0x5e>
	    {
	      rx_buffer[rx_index] = '\0';  // 加上結尾字元
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <USART3_IRQHandler+0x84>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <USART3_IRQHandler+0x88>)
 8000c90:	2100      	movs	r1, #0
 8000c92:	5499      	strb	r1, [r3, r2]
	      rx_index = 0;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <USART3_IRQHandler+0x84>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
	      data_ready = 1;  // 設定資料完成旗標
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <USART3_IRQHandler+0x8c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
	    {
	      rx_buffer[rx_index++] = rx_data;
	    }
	  }
  /* USER CODE END USART3_IRQn 1 */
}
 8000ca0:	e00c      	b.n	8000cbc <USART3_IRQHandler+0x78>
	      rx_buffer[rx_index++] = rx_data;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <USART3_IRQHandler+0x84>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	b291      	uxth	r1, r2
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <USART3_IRQHandler+0x84>)
 8000cae:	8011      	strh	r1, [r2, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <USART3_IRQHandler+0x80>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <USART3_IRQHandler+0x88>)
 8000cba:	5499      	strb	r1, [r3, r2]
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	2000007c 	.word	0x2000007c
 8000cc8:	2000007e 	.word	0x2000007e
 8000ccc:	20000080 	.word	0x20000080
 8000cd0:	20000880 	.word	0x20000880

08000cd4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 8000cda:	4815      	ldr	r0, [pc, #84]	@ (8000d30 <UART5_IRQHandler+0x5c>)
 8000cdc:	f7ff ff4e 	bl	8000b7c <LL_USART_IsActiveFlag_RXNE>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d015      	beq.n	8000d12 <UART5_IRQHandler+0x3e>
 8000ce6:	4812      	ldr	r0, [pc, #72]	@ (8000d30 <UART5_IRQHandler+0x5c>)
 8000ce8:	f7ff ff5b 	bl	8000ba2 <LL_USART_IsEnabledIT_RXNE>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00f      	beq.n	8000d12 <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 8000cf2:	480f      	ldr	r0, [pc, #60]	@ (8000d30 <UART5_IRQHandler+0x5c>)
 8000cf4:	f7ff ff68 	bl	8000bc8 <LL_USART_ReceiveData8>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <UART5_IRQHandler+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	b2d1      	uxtb	r1, r2
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <UART5_IRQHandler+0x60>)
 8000d08:	7011      	strb	r1, [r2, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <UART5_IRQHandler+0x64>)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <UART5_IRQHandler+0x60>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d905      	bls.n	8000d28 <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <UART5_IRQHandler+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <UART5_IRQHandler+0x68>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005000 	.word	0x40005000
 8000d34:	2000088d 	.word	0x2000088d
 8000d38:	20000884 	.word	0x20000884
 8000d3c:	2000088e 	.word	0x2000088e

08000d40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
  }

  return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 facb 	bl	8001330 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
  }
  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f001 fb6e 	bl	800252c <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20020000 	.word	0x20020000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000890 	.word	0x20000890
 8000e84:	200009e0 	.word	0x200009e0

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <LL_AHB1_GRP1_EnableClock>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40023800 	.word	0x40023800

08000ff0 <LL_APB1_GRP1_EnableClock>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ffc:	4907      	ldr	r1, [pc, #28]	@ (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800

08001020 <LL_USART_Enable>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	60da      	str	r2, [r3, #12]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_USART_ConfigAsyncMode>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	615a      	str	r2, [r3, #20]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_USART_IsActiveFlag_TC>:
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800107c:	2b40      	cmp	r3, #64	@ 0x40
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800109e:	78fa      	ldrb	r2, [r7, #3]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	605a      	str	r2, [r3, #4]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	@ 0x38
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80010da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80010de:	f7ff ff87 	bl	8000ff0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010e2:	2004      	movs	r0, #4
 80010e4:	f7ff ff6c 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80010e8:	2008      	movs	r0, #8
 80010ea:	f7ff ff69 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80010ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001104:	2308      	movs	r3, #8
 8001106:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <MX_UART5_Init+0xe4>)
 800110e:	f000 fa9b 	bl	8001648 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001112:	2304      	movs	r3, #4
 8001114:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001126:	2308      	movs	r3, #8
 8001128:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	481a      	ldr	r0, [pc, #104]	@ (8001198 <MX_UART5_Init+0xe8>)
 8001130:	f000 fa8a 	bl	8001648 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001134:	f7ff feba 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001138:	4603      	mov	r3, r0
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff0a 	bl	8000f58 <NVIC_EncodePriority>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	2035      	movs	r0, #53	@ 0x35
 800114a:	f7ff fedb 	bl	8000f04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800114e:	2035      	movs	r0, #53	@ 0x35
 8001150:	f7ff feba 	bl	8000ec8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001154:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001158:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001166:	230c      	movs	r3, #12
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <MX_UART5_Init+0xec>)
 800117a:	f000 fec7 	bl	8001f0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <MX_UART5_Init+0xec>)
 8001180:	f7ff ff5e 	bl	8001040 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_UART5_Init+0xec>)
 8001186:	f7ff ff4b 	bl	8001020 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	@ 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40005000 	.word	0x40005000

080011a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80011ca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80011ce:	f7ff ff0f 	bl	8000ff0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fef4 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80011d8:	230c      	movs	r3, #12
 80011da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <MX_USART2_UART_Init+0x98>)
 80011f6:	f000 fa27 	bl	8001648 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011fa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80011fe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800120c:	230c      	movs	r3, #12
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_USART2_UART_Init+0x9c>)
 8001220:	f000 fe74 	bl	8001f0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART2_UART_Init+0x9c>)
 8001226:	f7ff ff0b 	bl	8001040 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_USART2_UART_Init+0x9c>)
 800122c:	f7ff fef8 	bl	8001020 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	@ 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020000 	.word	0x40020000
 800123c:	40004400 	.word	0x40004400

08001240 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	@ 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800126a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800126e:	f7ff febf 	bl	8000ff0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001272:	2004      	movs	r0, #4
 8001274:	f7ff fea4 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff fea1 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800127e:	2320      	movs	r3, #32
 8001280:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001282:	2302      	movs	r3, #2
 8001284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001292:	2307      	movs	r3, #7
 8001294:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4822      	ldr	r0, [pc, #136]	@ (8001324 <MX_USART3_UART_Init+0xe4>)
 800129c:	f000 f9d4 	bl	8001648 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80012a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012a6:	2302      	movs	r3, #2
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	481a      	ldr	r0, [pc, #104]	@ (8001328 <MX_USART3_UART_Init+0xe8>)
 80012c0:	f000 f9c2 	bl	8001648 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012c4:	f7ff fdf2 	bl	8000eac <__NVIC_GetPriorityGrouping>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe42 	bl	8000f58 <NVIC_EncodePriority>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	2027      	movs	r0, #39	@ 0x27
 80012da:	f7ff fe13 	bl	8000f04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80012de:	2027      	movs	r0, #39	@ 0x27
 80012e0:	f7ff fdf2 	bl	8000ec8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012e4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012e8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012f6:	230c      	movs	r3, #12
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <MX_USART3_UART_Init+0xec>)
 800130a:	f000 fdff 	bl	8001f0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800130e:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_USART3_UART_Init+0xec>)
 8001310:	f7ff fe96 	bl	8001040 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_USART3_UART_Init+0xec>)
 8001316:	f7ff fe83 	bl	8001020 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020800 	.word	0x40020800
 8001328:	40020400 	.word	0x40020400
 800132c:	40004800 	.word	0x40004800

08001330 <__io_putchar>:

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    LL_USART_TransmitData8(USART2, ch);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <__io_putchar+0x2c>)
 8001340:	f7ff fea7 	bl	8001092 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(USART2));
 8001344:	bf00      	nop
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <__io_putchar+0x2c>)
 8001348:	f7ff fe90 	bl	800106c <LL_USART_IsActiveFlag_TC>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f9      	beq.n	8001346 <__io_putchar+0x16>
    return ch;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001364:	f7ff fd90 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800138e:	f001 f8d3 	bl	8002538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fb4f 	bl	8000a34 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013a4:	0800302c 	.word	0x0800302c
  ldr r2, =_sbss
 80013a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013ac:	200009e0 	.word	0x200009e0

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>

080013b2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b08b      	sub	sp, #44	@ 0x2c
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	613b      	str	r3, [r7, #16]
  return result;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80013d8:	2320      	movs	r3, #32
 80013da:	e003      	b.n	80013e4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2103      	movs	r1, #3
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	61fb      	str	r3, [r7, #28]
  return result;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001406:	2320      	movs	r3, #32
 8001408:	e003      	b.n	8001412 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	431a      	orrs	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	372c      	adds	r7, #44	@ 0x2c
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	fb01 f303 	mul.w	r3, r1, r3
 800144a:	431a      	orrs	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800145c:	b480      	push	{r7}
 800145e:	b08b      	sub	sp, #44	@ 0x2c
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	613b      	str	r3, [r7, #16]
  return result;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001482:	2320      	movs	r3, #32
 8001484:	e003      	b.n	800148e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2103      	movs	r1, #3
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	401a      	ands	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	61fb      	str	r3, [r7, #28]
  return result;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80014b0:	2320      	movs	r3, #32
 80014b2:	e003      	b.n	80014bc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80014ca:	bf00      	nop
 80014cc:	372c      	adds	r7, #44	@ 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b08b      	sub	sp, #44	@ 0x2c
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	613b      	str	r3, [r7, #16]
  return result;
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80014fc:	2320      	movs	r3, #32
 80014fe:	e003      	b.n	8001508 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2103      	movs	r1, #3
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	61fb      	str	r3, [r7, #28]
  return result;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800152a:	2320      	movs	r3, #32
 800152c:	e003      	b.n	8001536 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	60da      	str	r2, [r3, #12]
}
 8001544:	bf00      	nop
 8001546:	372c      	adds	r7, #44	@ 0x2c
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	@ 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	613b      	str	r3, [r7, #16]
  return result;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001576:	2320      	movs	r3, #32
 8001578:	e003      	b.n	8001582 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	210f      	movs	r1, #15
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	401a      	ands	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	61fb      	str	r3, [r7, #28]
  return result;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80015a4:	2320      	movs	r3, #32
 80015a6:	e003      	b.n	80015b0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80015be:	bf00      	nop
 80015c0:	372c      	adds	r7, #44	@ 0x2c
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b08b      	sub	sp, #44	@ 0x2c
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	613b      	str	r3, [r7, #16]
  return result;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80015f2:	2320      	movs	r3, #32
 80015f4:	e003      	b.n	80015fe <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	210f      	movs	r1, #15
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	61fb      	str	r3, [r7, #28]
  return result;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001622:	2320      	movs	r3, #32
 8001624:	e003      	b.n	800162e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800163c:	bf00      	nop
 800163e:	372c      	adds	r7, #44	@ 0x2c
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	617b      	str	r3, [r7, #20]
  return result;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <LL_GPIO_Init+0x2e>
    return 32U;
 8001672:	2320      	movs	r3, #32
 8001674:	e003      	b.n	800167e <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001680:	e057      	b.n	8001732 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	4013      	ands	r3, r2
 8001690:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d049      	beq.n	800172c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d003      	beq.n	80016a8 <LL_GPIO_Init+0x60>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d10d      	bne.n	80016c4 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	461a      	mov	r2, r3
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fed3 	bl	800145c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	461a      	mov	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff feb4 	bl	800142c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	461a      	mov	r2, r3
 80016ca:	6a39      	ldr	r1, [r7, #32]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff02 	bl	80014d6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d121      	bne.n	800171e <LL_GPIO_Init+0xd6>
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	60bb      	str	r3, [r7, #8]
  return result;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <LL_GPIO_Init+0xac>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e003      	b.n	80016fc <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d807      	bhi.n	8001710 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	461a      	mov	r2, r3
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff21 	bl	8001550 <LL_GPIO_SetAFPin_0_7>
 800170e:	e006      	b.n	800171e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	461a      	mov	r2, r3
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff56 	bl	80015ca <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe43 	bl	80013b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	3301      	adds	r3, #1
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1a0      	bne.n	8001682 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <LL_RCC_GetSysClkSource>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <LL_RCC_GetSysClkSource+0x18>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <LL_RCC_GetAHBPrescaler>:
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <LL_RCC_GetAHBPrescaler+0x18>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <LL_RCC_GetAPB1Prescaler>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <LL_RCC_GetAPB1Prescaler+0x18>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <LL_RCC_GetAPB2Prescaler>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <LL_RCC_PLL_GetMainSource+0x18>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <LL_RCC_PLL_GetN+0x18>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800

080017f4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <LL_RCC_PLL_GetP+0x18>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <LL_RCC_PLL_GetR+0x18>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <LL_RCC_PLL_GetDivider+0x18>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001850:	f000 f820 	bl	8001894 <RCC_GetSystemClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f85c 	bl	800191c <RCC_GetHCLKClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f86a 	bl	8001948 <RCC_GetPCLK1ClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f876 	bl	8001970 <RCC_GetPCLK2ClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800189e:	f7ff ff55 	bl	800174c <LL_RCC_GetSysClkSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d82d      	bhi.n	8001904 <RCC_GetSystemClockFreq+0x70>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <RCC_GetSystemClockFreq+0x1c>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018e5 	.word	0x080018e5
 80018b4:	08001905 	.word	0x08001905
 80018b8:	08001905 	.word	0x08001905
 80018bc:	08001905 	.word	0x08001905
 80018c0:	080018eb 	.word	0x080018eb
 80018c4:	08001905 	.word	0x08001905
 80018c8:	08001905 	.word	0x08001905
 80018cc:	08001905 	.word	0x08001905
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	08001905 	.word	0x08001905
 80018d8:	08001905 	.word	0x08001905
 80018dc:	08001905 	.word	0x08001905
 80018e0:	080018fb 	.word	0x080018fb
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <RCC_GetSystemClockFreq+0x80>)
 80018e6:	607b      	str	r3, [r7, #4]
      break;
 80018e8:	e00f      	b.n	800190a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <RCC_GetSystemClockFreq+0x84>)
 80018ec:	607b      	str	r3, [r7, #4]
      break;
 80018ee:	e00c      	b.n	800190a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80018f0:	2008      	movs	r0, #8
 80018f2:	f000 f851 	bl	8001998 <RCC_PLL_GetFreqDomain_SYS>
 80018f6:	6078      	str	r0, [r7, #4]
      break;
 80018f8:	e007      	b.n	800190a <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80018fa:	200c      	movs	r0, #12
 80018fc:	f000 f84c 	bl	8001998 <RCC_PLL_GetFreqDomain_SYS>
 8001900:	6078      	str	r0, [r7, #4]
      break;
 8001902:	e002      	b.n	800190a <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <RCC_GetSystemClockFreq+0x80>)
 8001906:	607b      	str	r3, [r7, #4]
      break;
 8001908:	bf00      	nop
  }

  return frequency;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	00f42400 	.word	0x00f42400
 8001918:	017d7840 	.word	0x017d7840

0800191c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001924:	f7ff ff20 	bl	8001768 <LL_RCC_GetAHBPrescaler>
 8001928:	4603      	mov	r3, r0
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <RCC_GetHCLKClockFreq+0x28>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	40d3      	lsrs	r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	08002fd0 	.word	0x08002fd0

08001948 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001950:	f7ff ff18 	bl	8001784 <LL_RCC_GetAPB1Prescaler>
 8001954:	4603      	mov	r3, r0
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <RCC_GetPCLK1ClockFreq+0x24>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	40d3      	lsrs	r3, r2
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08002fe0 	.word	0x08002fe0

08001970 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001978:	f7ff ff12 	bl	80017a0 <LL_RCC_GetAPB2Prescaler>
 800197c:	4603      	mov	r3, r0
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <RCC_GetPCLK2ClockFreq+0x24>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	40d3      	lsrs	r3, r2
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08002fe0 	.word	0x08002fe0

08001998 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80019ac:	f7ff ff06 	bl	80017bc <LL_RCC_PLL_GetMainSource>
 80019b0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019be:	d003      	beq.n	80019c8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80019c0:	e005      	b.n	80019ce <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80019c4:	617b      	str	r3, [r7, #20]
      break;
 80019c6:	e005      	b.n	80019d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80019ca:	617b      	str	r3, [r7, #20]
      break;
 80019cc:	e002      	b.n	80019d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80019d0:	617b      	str	r3, [r7, #20]
      break;
 80019d2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d114      	bne.n	8001a04 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80019da:	f7ff ff27 	bl	800182c <LL_RCC_PLL_GetDivider>
 80019de:	4602      	mov	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fbb3 f4f2 	udiv	r4, r3, r2
 80019e6:	f7ff fef7 	bl	80017d8 <LL_RCC_PLL_GetN>
 80019ea:	4603      	mov	r3, r0
 80019ec:	fb03 f404 	mul.w	r4, r3, r4
 80019f0:	f7ff ff00 	bl	80017f4 <LL_RCC_PLL_GetP>
 80019f4:	4603      	mov	r3, r0
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	3301      	adds	r3, #1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e011      	b.n	8001a28 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001a04:	f7ff ff12 	bl	800182c <LL_RCC_PLL_GetDivider>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fbb3 f4f2 	udiv	r4, r3, r2
 8001a10:	f7ff fee2 	bl	80017d8 <LL_RCC_PLL_GetN>
 8001a14:	4603      	mov	r3, r0
 8001a16:	fb03 f404 	mul.w	r4, r3, r4
 8001a1a:	f7ff fef9 	bl	8001810 <LL_RCC_PLL_GetR>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	0f1b      	lsrs	r3, r3, #28
 8001a22:	fbb4 f3f3 	udiv	r3, r4, r3
 8001a26:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001a28:	693b      	ldr	r3, [r7, #16]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	017d7840 	.word	0x017d7840

08001a3c <LL_USART_IsEnabled>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_USART_SetStopBitsLength>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_USART_SetHWFlowCtrl>:
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_USART_SetBaudRate>:
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b0c0      	sub	sp, #256	@ 0x100
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001abc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001ac0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ad0:	f040 810c 	bne.w	8001cec <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	462b      	mov	r3, r5
 8001aea:	1891      	adds	r1, r2, r2
 8001aec:	6639      	str	r1, [r7, #96]	@ 0x60
 8001aee:	415b      	adcs	r3, r3
 8001af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001af2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001af6:	4621      	mov	r1, r4
 8001af8:	eb12 0801 	adds.w	r8, r2, r1
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb43 0901 	adc.w	r9, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb18 0303 	adds.w	r3, r8, r3
 8001b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001b24:	462b      	mov	r3, r5
 8001b26:	eb49 0303 	adc.w	r3, r9, r3
 8001b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b32:	2200      	movs	r2, #0
 8001b34:	469a      	mov	sl, r3
 8001b36:	4693      	mov	fp, r2
 8001b38:	eb1a 030a 	adds.w	r3, sl, sl
 8001b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b3e:	eb4b 030b 	adc.w	r3, fp, fp
 8001b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001b4c:	f7fe fbb0 	bl	80002b0 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4b64      	ldr	r3, [pc, #400]	@ (8001ce8 <LL_USART_SetBaudRate+0x238>)
 8001b56:	fba3 2302 	umull	r2, r3, r3, r2
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	b29c      	uxth	r4, r3
 8001b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001b6c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001b70:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	1891      	adds	r1, r2, r2
 8001b7a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b7c:	415b      	adcs	r3, r3
 8001b7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b84:	4641      	mov	r1, r8
 8001b86:	1851      	adds	r1, r2, r1
 8001b88:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	414b      	adcs	r3, r1
 8001b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	00cb      	lsls	r3, r1, #3
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	00ca      	lsls	r2, r1, #3
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001bb8:	464b      	mov	r3, r9
 8001bba:	460a      	mov	r2, r1
 8001bbc:	eb42 0303 	adc.w	r3, r2, r3
 8001bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001bc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001bce:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001bd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	18db      	adds	r3, r3, r3
 8001bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bdc:	4613      	mov	r3, r2
 8001bde:	eb42 0303 	adc.w	r3, r2, r3
 8001be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001be4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001be8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001bec:	f7fe fb60 	bl	80002b0 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <LL_USART_SetBaudRate+0x238>)
 8001bf8:	fba3 2301 	umull	r2, r3, r3, r1
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	2264      	movs	r2, #100	@ 0x64
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	1acb      	subs	r3, r1, r3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <LL_USART_SetBaudRate+0x238>)
 8001c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4423      	add	r3, r4
 8001c22:	b29c      	uxth	r4, r3
 8001c24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c2e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001c32:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001c36:	4642      	mov	r2, r8
 8001c38:	464b      	mov	r3, r9
 8001c3a:	1891      	adds	r1, r2, r2
 8001c3c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c3e:	415b      	adcs	r3, r3
 8001c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c46:	4641      	mov	r1, r8
 8001c48:	1851      	adds	r1, r2, r1
 8001c4a:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	414b      	adcs	r3, r1
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001c5e:	4659      	mov	r1, fp
 8001c60:	00cb      	lsls	r3, r1, #3
 8001c62:	4651      	mov	r1, sl
 8001c64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c68:	4651      	mov	r1, sl
 8001c6a:	00ca      	lsls	r2, r1, #3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	4642      	mov	r2, r8
 8001c74:	189b      	adds	r3, r3, r2
 8001c76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	eb42 0303 	adc.w	r3, r2, r3
 8001c82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c90:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001c94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	18db      	adds	r3, r3, r3
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	eb42 0303 	adc.w	r3, r2, r3
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001caa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001cae:	f7fe faff 	bl	80002b0 <__aeabi_uldivmod>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <LL_USART_SetBaudRate+0x238>)
 8001cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	2164      	movs	r1, #100	@ 0x64
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	3332      	adds	r3, #50	@ 0x32
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <LL_USART_SetBaudRate+0x238>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4423      	add	r3, r4
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ce4:	609a      	str	r2, [r3, #8]
}
 8001ce6:	e108      	b.n	8001efa <LL_USART_SetBaudRate+0x44a>
 8001ce8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001cf6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001cfa:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	1891      	adds	r1, r2, r2
 8001d04:	6239      	str	r1, [r7, #32]
 8001d06:	415b      	adcs	r3, r3
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	4641      	mov	r1, r8
 8001d10:	1854      	adds	r4, r2, r1
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb43 0501 	adc.w	r5, r3, r1
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	00eb      	lsls	r3, r5, #3
 8001d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d26:	00e2      	lsls	r2, r4, #3
 8001d28:	4614      	mov	r4, r2
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	18e3      	adds	r3, r4, r3
 8001d30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d34:	464b      	mov	r3, r9
 8001d36:	eb45 0303 	adc.w	r3, r5, r3
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001d3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001d58:	4629      	mov	r1, r5
 8001d5a:	008b      	lsls	r3, r1, #2
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d62:	4621      	mov	r1, r4
 8001d64:	008a      	lsls	r2, r1, #2
 8001d66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001d6a:	f7fe faa1 	bl	80002b0 <__aeabi_uldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <LL_USART_SetBaudRate+0x458>)
 8001d74:	fba3 2302 	umull	r2, r3, r3, r2
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	b29c      	uxth	r4, r3
 8001d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001d8e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001d92:	4642      	mov	r2, r8
 8001d94:	464b      	mov	r3, r9
 8001d96:	1891      	adds	r1, r2, r2
 8001d98:	61b9      	str	r1, [r7, #24]
 8001d9a:	415b      	adcs	r3, r3
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da2:	4641      	mov	r1, r8
 8001da4:	1851      	adds	r1, r2, r1
 8001da6:	6139      	str	r1, [r7, #16]
 8001da8:	4649      	mov	r1, r9
 8001daa:	414b      	adcs	r3, r1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dba:	4659      	mov	r1, fp
 8001dbc:	00cb      	lsls	r3, r1, #3
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	00ca      	lsls	r2, r1, #3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4642      	mov	r2, r8
 8001dd0:	189b      	adds	r3, r3, r2
 8001dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	460a      	mov	r2, r1
 8001dda:	eb42 0303 	adc.w	r3, r2, r3
 8001dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001de2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001de6:	2200      	movs	r2, #0
 8001de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	008b      	lsls	r3, r1, #2
 8001e00:	4641      	mov	r1, r8
 8001e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e06:	4641      	mov	r1, r8
 8001e08:	008a      	lsls	r2, r1, #2
 8001e0a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001e0e:	f7fe fa4f 	bl	80002b0 <__aeabi_uldivmod>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <LL_USART_SetBaudRate+0x458>)
 8001e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2264      	movs	r2, #100	@ 0x64
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	1acb      	subs	r3, r1, r3
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	3332      	adds	r3, #50	@ 0x32
 8001e2c:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <LL_USART_SetBaudRate+0x458>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4423      	add	r3, r4
 8001e3e:	b29c      	uxth	r4, r3
 8001e40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e44:	2200      	movs	r2, #0
 8001e46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e48:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e4a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001e4e:	4642      	mov	r2, r8
 8001e50:	464b      	mov	r3, r9
 8001e52:	1891      	adds	r1, r2, r2
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	415b      	adcs	r3, r3
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1851      	adds	r1, r2, r1
 8001e62:	6039      	str	r1, [r7, #0]
 8001e64:	4649      	mov	r1, r9
 8001e66:	414b      	adcs	r3, r1
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e76:	4659      	mov	r1, fp
 8001e78:	00cb      	lsls	r3, r1, #3
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e80:	4651      	mov	r1, sl
 8001e82:	00ca      	lsls	r2, r1, #3
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	189b      	adds	r3, r3, r2
 8001e8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e90:	464b      	mov	r3, r9
 8001e92:	460a      	mov	r2, r1
 8001e94:	eb42 0303 	adc.w	r3, r2, r3
 8001e98:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	008b      	lsls	r3, r1, #2
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eba:	4641      	mov	r1, r8
 8001ebc:	008a      	lsls	r2, r1, #2
 8001ebe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ec2:	f7fe f9f5 	bl	80002b0 <__aeabi_uldivmod>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <LL_USART_SetBaudRate+0x458>)
 8001ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	2164      	movs	r1, #100	@ 0x64
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	3332      	adds	r3, #50	@ 0x32
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <LL_USART_SetBaudRate+0x458>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4423      	add	r3, r4
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ef8:	609a      	str	r2, [r3, #8]
}
 8001efa:	bf00      	nop
 8001efc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001f00:	46bd      	mov	sp, r7
 8001f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f06:	bf00      	nop
 8001f08:	51eb851f 	.word	0x51eb851f

08001f0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fd8c 	bl	8001a3c <LL_USART_IsEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d15e      	bne.n	8001fe8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001f32:	f023 030c 	bic.w	r3, r3, #12
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6851      	ldr	r1, [r2, #4]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	6912      	ldr	r2, [r2, #16]
 8001f44:	4311      	orrs	r1, r2
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6992      	ldr	r2, [r2, #24]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fd83 	bl	8001a64 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fd90 	bl	8001a8a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fc6a 	bl	8001848 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <LL_USART_Init+0xe8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e021      	b.n	8001fc6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <LL_USART_Init+0xec>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	e01a      	b.n	8001fc6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <LL_USART_Init+0xf0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d102      	bne.n	8001f9e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e013      	b.n	8001fc6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <LL_USART_Init+0xf4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d102      	bne.n	8001fac <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	e00c      	b.n	8001fc6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <LL_USART_Init+0xf8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	e005      	b.n	8001fc6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <LL_USART_Init+0xfc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00d      	beq.n	8001fe8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd64 	bl	8001ab0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40004800 	.word	0x40004800
 8002000:	40011400 	.word	0x40011400
 8002004:	40004c00 	.word	0x40004c00
 8002008:	40005000 	.word	0x40005000

0800200c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <LL_InitTick+0x30>)
 8002020:	3b01      	subs	r3, #1
 8002022:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <LL_InitTick+0x30>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <LL_InitTick+0x30>)
 800202c:	2205      	movs	r2, #5
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e010 	.word	0xe000e010

08002040 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002048:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffdd 	bl	800200c <LL_InitTick>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002064:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <LL_SetSystemCoreClock+0x1c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <std>:
 800207c:	2300      	movs	r3, #0
 800207e:	b510      	push	{r4, lr}
 8002080:	4604      	mov	r4, r0
 8002082:	e9c0 3300 	strd	r3, r3, [r0]
 8002086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800208a:	6083      	str	r3, [r0, #8]
 800208c:	8181      	strh	r1, [r0, #12]
 800208e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002090:	81c2      	strh	r2, [r0, #14]
 8002092:	6183      	str	r3, [r0, #24]
 8002094:	4619      	mov	r1, r3
 8002096:	2208      	movs	r2, #8
 8002098:	305c      	adds	r0, #92	@ 0x5c
 800209a:	f000 f9f9 	bl	8002490 <memset>
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <std+0x58>)
 80020a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <std+0x5c>)
 80020a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <std+0x60>)
 80020a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <std+0x64>)
 80020ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <std+0x68>)
 80020b0:	6224      	str	r4, [r4, #32]
 80020b2:	429c      	cmp	r4, r3
 80020b4:	d006      	beq.n	80020c4 <std+0x48>
 80020b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80020ba:	4294      	cmp	r4, r2
 80020bc:	d002      	beq.n	80020c4 <std+0x48>
 80020be:	33d0      	adds	r3, #208	@ 0xd0
 80020c0:	429c      	cmp	r4, r3
 80020c2:	d105      	bne.n	80020d0 <std+0x54>
 80020c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80020c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020cc:	f000 ba58 	b.w	8002580 <__retarget_lock_init_recursive>
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	080022e1 	.word	0x080022e1
 80020d8:	08002303 	.word	0x08002303
 80020dc:	0800233b 	.word	0x0800233b
 80020e0:	0800235f 	.word	0x0800235f
 80020e4:	20000894 	.word	0x20000894

080020e8 <stdio_exit_handler>:
 80020e8:	4a02      	ldr	r2, [pc, #8]	@ (80020f4 <stdio_exit_handler+0xc>)
 80020ea:	4903      	ldr	r1, [pc, #12]	@ (80020f8 <stdio_exit_handler+0x10>)
 80020ec:	4803      	ldr	r0, [pc, #12]	@ (80020fc <stdio_exit_handler+0x14>)
 80020ee:	f000 b869 	b.w	80021c4 <_fwalk_sglue>
 80020f2:	bf00      	nop
 80020f4:	20000004 	.word	0x20000004
 80020f8:	08002e1d 	.word	0x08002e1d
 80020fc:	20000014 	.word	0x20000014

08002100 <cleanup_stdio>:
 8002100:	6841      	ldr	r1, [r0, #4]
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <cleanup_stdio+0x34>)
 8002104:	4299      	cmp	r1, r3
 8002106:	b510      	push	{r4, lr}
 8002108:	4604      	mov	r4, r0
 800210a:	d001      	beq.n	8002110 <cleanup_stdio+0x10>
 800210c:	f000 fe86 	bl	8002e1c <_fflush_r>
 8002110:	68a1      	ldr	r1, [r4, #8]
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <cleanup_stdio+0x38>)
 8002114:	4299      	cmp	r1, r3
 8002116:	d002      	beq.n	800211e <cleanup_stdio+0x1e>
 8002118:	4620      	mov	r0, r4
 800211a:	f000 fe7f 	bl	8002e1c <_fflush_r>
 800211e:	68e1      	ldr	r1, [r4, #12]
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <cleanup_stdio+0x3c>)
 8002122:	4299      	cmp	r1, r3
 8002124:	d004      	beq.n	8002130 <cleanup_stdio+0x30>
 8002126:	4620      	mov	r0, r4
 8002128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800212c:	f000 be76 	b.w	8002e1c <_fflush_r>
 8002130:	bd10      	pop	{r4, pc}
 8002132:	bf00      	nop
 8002134:	20000894 	.word	0x20000894
 8002138:	200008fc 	.word	0x200008fc
 800213c:	20000964 	.word	0x20000964

08002140 <global_stdio_init.part.0>:
 8002140:	b510      	push	{r4, lr}
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <global_stdio_init.part.0+0x30>)
 8002144:	4c0b      	ldr	r4, [pc, #44]	@ (8002174 <global_stdio_init.part.0+0x34>)
 8002146:	4a0c      	ldr	r2, [pc, #48]	@ (8002178 <global_stdio_init.part.0+0x38>)
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	4620      	mov	r0, r4
 800214c:	2200      	movs	r2, #0
 800214e:	2104      	movs	r1, #4
 8002150:	f7ff ff94 	bl	800207c <std>
 8002154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002158:	2201      	movs	r2, #1
 800215a:	2109      	movs	r1, #9
 800215c:	f7ff ff8e 	bl	800207c <std>
 8002160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002164:	2202      	movs	r2, #2
 8002166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800216a:	2112      	movs	r1, #18
 800216c:	f7ff bf86 	b.w	800207c <std>
 8002170:	200009cc 	.word	0x200009cc
 8002174:	20000894 	.word	0x20000894
 8002178:	080020e9 	.word	0x080020e9

0800217c <__sfp_lock_acquire>:
 800217c:	4801      	ldr	r0, [pc, #4]	@ (8002184 <__sfp_lock_acquire+0x8>)
 800217e:	f000 ba00 	b.w	8002582 <__retarget_lock_acquire_recursive>
 8002182:	bf00      	nop
 8002184:	200009d5 	.word	0x200009d5

08002188 <__sfp_lock_release>:
 8002188:	4801      	ldr	r0, [pc, #4]	@ (8002190 <__sfp_lock_release+0x8>)
 800218a:	f000 b9fb 	b.w	8002584 <__retarget_lock_release_recursive>
 800218e:	bf00      	nop
 8002190:	200009d5 	.word	0x200009d5

08002194 <__sinit>:
 8002194:	b510      	push	{r4, lr}
 8002196:	4604      	mov	r4, r0
 8002198:	f7ff fff0 	bl	800217c <__sfp_lock_acquire>
 800219c:	6a23      	ldr	r3, [r4, #32]
 800219e:	b11b      	cbz	r3, 80021a8 <__sinit+0x14>
 80021a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a4:	f7ff bff0 	b.w	8002188 <__sfp_lock_release>
 80021a8:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <__sinit+0x28>)
 80021aa:	6223      	str	r3, [r4, #32]
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <__sinit+0x2c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f5      	bne.n	80021a0 <__sinit+0xc>
 80021b4:	f7ff ffc4 	bl	8002140 <global_stdio_init.part.0>
 80021b8:	e7f2      	b.n	80021a0 <__sinit+0xc>
 80021ba:	bf00      	nop
 80021bc:	08002101 	.word	0x08002101
 80021c0:	200009cc 	.word	0x200009cc

080021c4 <_fwalk_sglue>:
 80021c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c8:	4607      	mov	r7, r0
 80021ca:	4688      	mov	r8, r1
 80021cc:	4614      	mov	r4, r2
 80021ce:	2600      	movs	r6, #0
 80021d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021d4:	f1b9 0901 	subs.w	r9, r9, #1
 80021d8:	d505      	bpl.n	80021e6 <_fwalk_sglue+0x22>
 80021da:	6824      	ldr	r4, [r4, #0]
 80021dc:	2c00      	cmp	r4, #0
 80021de:	d1f7      	bne.n	80021d0 <_fwalk_sglue+0xc>
 80021e0:	4630      	mov	r0, r6
 80021e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e6:	89ab      	ldrh	r3, [r5, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d907      	bls.n	80021fc <_fwalk_sglue+0x38>
 80021ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021f0:	3301      	adds	r3, #1
 80021f2:	d003      	beq.n	80021fc <_fwalk_sglue+0x38>
 80021f4:	4629      	mov	r1, r5
 80021f6:	4638      	mov	r0, r7
 80021f8:	47c0      	blx	r8
 80021fa:	4306      	orrs	r6, r0
 80021fc:	3568      	adds	r5, #104	@ 0x68
 80021fe:	e7e9      	b.n	80021d4 <_fwalk_sglue+0x10>

08002200 <iprintf>:
 8002200:	b40f      	push	{r0, r1, r2, r3}
 8002202:	b507      	push	{r0, r1, r2, lr}
 8002204:	4906      	ldr	r1, [pc, #24]	@ (8002220 <iprintf+0x20>)
 8002206:	ab04      	add	r3, sp, #16
 8002208:	6808      	ldr	r0, [r1, #0]
 800220a:	f853 2b04 	ldr.w	r2, [r3], #4
 800220e:	6881      	ldr	r1, [r0, #8]
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	f000 fadb 	bl	80027cc <_vfiprintf_r>
 8002216:	b003      	add	sp, #12
 8002218:	f85d eb04 	ldr.w	lr, [sp], #4
 800221c:	b004      	add	sp, #16
 800221e:	4770      	bx	lr
 8002220:	20000010 	.word	0x20000010

08002224 <_puts_r>:
 8002224:	6a03      	ldr	r3, [r0, #32]
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	6884      	ldr	r4, [r0, #8]
 800222a:	4605      	mov	r5, r0
 800222c:	460e      	mov	r6, r1
 800222e:	b90b      	cbnz	r3, 8002234 <_puts_r+0x10>
 8002230:	f7ff ffb0 	bl	8002194 <__sinit>
 8002234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002236:	07db      	lsls	r3, r3, #31
 8002238:	d405      	bmi.n	8002246 <_puts_r+0x22>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	0598      	lsls	r0, r3, #22
 800223e:	d402      	bmi.n	8002246 <_puts_r+0x22>
 8002240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002242:	f000 f99e 	bl	8002582 <__retarget_lock_acquire_recursive>
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	0719      	lsls	r1, r3, #28
 800224a:	d502      	bpl.n	8002252 <_puts_r+0x2e>
 800224c:	6923      	ldr	r3, [r4, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d135      	bne.n	80022be <_puts_r+0x9a>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f8c5 	bl	80023e4 <__swsetup_r>
 800225a:	b380      	cbz	r0, 80022be <_puts_r+0x9a>
 800225c:	f04f 35ff 	mov.w	r5, #4294967295
 8002260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002262:	07da      	lsls	r2, r3, #31
 8002264:	d405      	bmi.n	8002272 <_puts_r+0x4e>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	059b      	lsls	r3, r3, #22
 800226a:	d402      	bmi.n	8002272 <_puts_r+0x4e>
 800226c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800226e:	f000 f989 	bl	8002584 <__retarget_lock_release_recursive>
 8002272:	4628      	mov	r0, r5
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	2b00      	cmp	r3, #0
 8002278:	da04      	bge.n	8002284 <_puts_r+0x60>
 800227a:	69a2      	ldr	r2, [r4, #24]
 800227c:	429a      	cmp	r2, r3
 800227e:	dc17      	bgt.n	80022b0 <_puts_r+0x8c>
 8002280:	290a      	cmp	r1, #10
 8002282:	d015      	beq.n	80022b0 <_puts_r+0x8c>
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	6022      	str	r2, [r4, #0]
 800228a:	7019      	strb	r1, [r3, #0]
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002292:	3b01      	subs	r3, #1
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	2900      	cmp	r1, #0
 8002298:	d1ed      	bne.n	8002276 <_puts_r+0x52>
 800229a:	2b00      	cmp	r3, #0
 800229c:	da11      	bge.n	80022c2 <_puts_r+0x9e>
 800229e:	4622      	mov	r2, r4
 80022a0:	210a      	movs	r1, #10
 80022a2:	4628      	mov	r0, r5
 80022a4:	f000 f85f 	bl	8002366 <__swbuf_r>
 80022a8:	3001      	adds	r0, #1
 80022aa:	d0d7      	beq.n	800225c <_puts_r+0x38>
 80022ac:	250a      	movs	r5, #10
 80022ae:	e7d7      	b.n	8002260 <_puts_r+0x3c>
 80022b0:	4622      	mov	r2, r4
 80022b2:	4628      	mov	r0, r5
 80022b4:	f000 f857 	bl	8002366 <__swbuf_r>
 80022b8:	3001      	adds	r0, #1
 80022ba:	d1e7      	bne.n	800228c <_puts_r+0x68>
 80022bc:	e7ce      	b.n	800225c <_puts_r+0x38>
 80022be:	3e01      	subs	r6, #1
 80022c0:	e7e4      	b.n	800228c <_puts_r+0x68>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	6022      	str	r2, [r4, #0]
 80022c8:	220a      	movs	r2, #10
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e7ee      	b.n	80022ac <_puts_r+0x88>
	...

080022d0 <puts>:
 80022d0:	4b02      	ldr	r3, [pc, #8]	@ (80022dc <puts+0xc>)
 80022d2:	4601      	mov	r1, r0
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	f7ff bfa5 	b.w	8002224 <_puts_r>
 80022da:	bf00      	nop
 80022dc:	20000010 	.word	0x20000010

080022e0 <__sread>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	460c      	mov	r4, r1
 80022e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e8:	f000 f8fc 	bl	80024e4 <_read_r>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	bfab      	itete	ge
 80022f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022f2:	89a3      	ldrhlt	r3, [r4, #12]
 80022f4:	181b      	addge	r3, r3, r0
 80022f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022fa:	bfac      	ite	ge
 80022fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022fe:	81a3      	strhlt	r3, [r4, #12]
 8002300:	bd10      	pop	{r4, pc}

08002302 <__swrite>:
 8002302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002306:	461f      	mov	r7, r3
 8002308:	898b      	ldrh	r3, [r1, #12]
 800230a:	05db      	lsls	r3, r3, #23
 800230c:	4605      	mov	r5, r0
 800230e:	460c      	mov	r4, r1
 8002310:	4616      	mov	r6, r2
 8002312:	d505      	bpl.n	8002320 <__swrite+0x1e>
 8002314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002318:	2302      	movs	r3, #2
 800231a:	2200      	movs	r2, #0
 800231c:	f000 f8d0 	bl	80024c0 <_lseek_r>
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800232a:	81a3      	strh	r3, [r4, #12]
 800232c:	4632      	mov	r2, r6
 800232e:	463b      	mov	r3, r7
 8002330:	4628      	mov	r0, r5
 8002332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002336:	f000 b8e7 	b.w	8002508 <_write_r>

0800233a <__sseek>:
 800233a:	b510      	push	{r4, lr}
 800233c:	460c      	mov	r4, r1
 800233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002342:	f000 f8bd 	bl	80024c0 <_lseek_r>
 8002346:	1c43      	adds	r3, r0, #1
 8002348:	89a3      	ldrh	r3, [r4, #12]
 800234a:	bf15      	itete	ne
 800234c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800234e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002356:	81a3      	strheq	r3, [r4, #12]
 8002358:	bf18      	it	ne
 800235a:	81a3      	strhne	r3, [r4, #12]
 800235c:	bd10      	pop	{r4, pc}

0800235e <__sclose>:
 800235e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002362:	f000 b89d 	b.w	80024a0 <_close_r>

08002366 <__swbuf_r>:
 8002366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002368:	460e      	mov	r6, r1
 800236a:	4614      	mov	r4, r2
 800236c:	4605      	mov	r5, r0
 800236e:	b118      	cbz	r0, 8002378 <__swbuf_r+0x12>
 8002370:	6a03      	ldr	r3, [r0, #32]
 8002372:	b90b      	cbnz	r3, 8002378 <__swbuf_r+0x12>
 8002374:	f7ff ff0e 	bl	8002194 <__sinit>
 8002378:	69a3      	ldr	r3, [r4, #24]
 800237a:	60a3      	str	r3, [r4, #8]
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	071a      	lsls	r2, r3, #28
 8002380:	d501      	bpl.n	8002386 <__swbuf_r+0x20>
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	b943      	cbnz	r3, 8002398 <__swbuf_r+0x32>
 8002386:	4621      	mov	r1, r4
 8002388:	4628      	mov	r0, r5
 800238a:	f000 f82b 	bl	80023e4 <__swsetup_r>
 800238e:	b118      	cbz	r0, 8002398 <__swbuf_r+0x32>
 8002390:	f04f 37ff 	mov.w	r7, #4294967295
 8002394:	4638      	mov	r0, r7
 8002396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	6922      	ldr	r2, [r4, #16]
 800239c:	1a98      	subs	r0, r3, r2
 800239e:	6963      	ldr	r3, [r4, #20]
 80023a0:	b2f6      	uxtb	r6, r6
 80023a2:	4283      	cmp	r3, r0
 80023a4:	4637      	mov	r7, r6
 80023a6:	dc05      	bgt.n	80023b4 <__swbuf_r+0x4e>
 80023a8:	4621      	mov	r1, r4
 80023aa:	4628      	mov	r0, r5
 80023ac:	f000 fd36 	bl	8002e1c <_fflush_r>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d1ed      	bne.n	8002390 <__swbuf_r+0x2a>
 80023b4:	68a3      	ldr	r3, [r4, #8]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	60a3      	str	r3, [r4, #8]
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	6022      	str	r2, [r4, #0]
 80023c0:	701e      	strb	r6, [r3, #0]
 80023c2:	6962      	ldr	r2, [r4, #20]
 80023c4:	1c43      	adds	r3, r0, #1
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d004      	beq.n	80023d4 <__swbuf_r+0x6e>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	07db      	lsls	r3, r3, #31
 80023ce:	d5e1      	bpl.n	8002394 <__swbuf_r+0x2e>
 80023d0:	2e0a      	cmp	r6, #10
 80023d2:	d1df      	bne.n	8002394 <__swbuf_r+0x2e>
 80023d4:	4621      	mov	r1, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	f000 fd20 	bl	8002e1c <_fflush_r>
 80023dc:	2800      	cmp	r0, #0
 80023de:	d0d9      	beq.n	8002394 <__swbuf_r+0x2e>
 80023e0:	e7d6      	b.n	8002390 <__swbuf_r+0x2a>
	...

080023e4 <__swsetup_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <__swsetup_r+0xa8>)
 80023e8:	4605      	mov	r5, r0
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	460c      	mov	r4, r1
 80023ee:	b118      	cbz	r0, 80023f8 <__swsetup_r+0x14>
 80023f0:	6a03      	ldr	r3, [r0, #32]
 80023f2:	b90b      	cbnz	r3, 80023f8 <__swsetup_r+0x14>
 80023f4:	f7ff fece 	bl	8002194 <__sinit>
 80023f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fc:	0719      	lsls	r1, r3, #28
 80023fe:	d422      	bmi.n	8002446 <__swsetup_r+0x62>
 8002400:	06da      	lsls	r2, r3, #27
 8002402:	d407      	bmi.n	8002414 <__swsetup_r+0x30>
 8002404:	2209      	movs	r2, #9
 8002406:	602a      	str	r2, [r5, #0]
 8002408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240c:	81a3      	strh	r3, [r4, #12]
 800240e:	f04f 30ff 	mov.w	r0, #4294967295
 8002412:	e033      	b.n	800247c <__swsetup_r+0x98>
 8002414:	0758      	lsls	r0, r3, #29
 8002416:	d512      	bpl.n	800243e <__swsetup_r+0x5a>
 8002418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800241a:	b141      	cbz	r1, 800242e <__swsetup_r+0x4a>
 800241c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002420:	4299      	cmp	r1, r3
 8002422:	d002      	beq.n	800242a <__swsetup_r+0x46>
 8002424:	4628      	mov	r0, r5
 8002426:	f000 f8af 	bl	8002588 <_free_r>
 800242a:	2300      	movs	r3, #0
 800242c:	6363      	str	r3, [r4, #52]	@ 0x34
 800242e:	89a3      	ldrh	r3, [r4, #12]
 8002430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002434:	81a3      	strh	r3, [r4, #12]
 8002436:	2300      	movs	r3, #0
 8002438:	6063      	str	r3, [r4, #4]
 800243a:	6923      	ldr	r3, [r4, #16]
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	89a3      	ldrh	r3, [r4, #12]
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	6923      	ldr	r3, [r4, #16]
 8002448:	b94b      	cbnz	r3, 800245e <__swsetup_r+0x7a>
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002454:	d003      	beq.n	800245e <__swsetup_r+0x7a>
 8002456:	4621      	mov	r1, r4
 8002458:	4628      	mov	r0, r5
 800245a:	f000 fd2d 	bl	8002eb8 <__smakebuf_r>
 800245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002462:	f013 0201 	ands.w	r2, r3, #1
 8002466:	d00a      	beq.n	800247e <__swsetup_r+0x9a>
 8002468:	2200      	movs	r2, #0
 800246a:	60a2      	str	r2, [r4, #8]
 800246c:	6962      	ldr	r2, [r4, #20]
 800246e:	4252      	negs	r2, r2
 8002470:	61a2      	str	r2, [r4, #24]
 8002472:	6922      	ldr	r2, [r4, #16]
 8002474:	b942      	cbnz	r2, 8002488 <__swsetup_r+0xa4>
 8002476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800247a:	d1c5      	bne.n	8002408 <__swsetup_r+0x24>
 800247c:	bd38      	pop	{r3, r4, r5, pc}
 800247e:	0799      	lsls	r1, r3, #30
 8002480:	bf58      	it	pl
 8002482:	6962      	ldrpl	r2, [r4, #20]
 8002484:	60a2      	str	r2, [r4, #8]
 8002486:	e7f4      	b.n	8002472 <__swsetup_r+0x8e>
 8002488:	2000      	movs	r0, #0
 800248a:	e7f7      	b.n	800247c <__swsetup_r+0x98>
 800248c:	20000010 	.word	0x20000010

08002490 <memset>:
 8002490:	4402      	add	r2, r0
 8002492:	4603      	mov	r3, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <_close_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4d06      	ldr	r5, [pc, #24]	@ (80024bc <_close_r+0x1c>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	602b      	str	r3, [r5, #0]
 80024ac:	f7fe fc81 	bl	8000db2 <_close>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_close_r+0x1a>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_close_r+0x1a>
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	200009d0 	.word	0x200009d0

080024c0 <_lseek_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4d07      	ldr	r5, [pc, #28]	@ (80024e0 <_lseek_r+0x20>)
 80024c4:	4604      	mov	r4, r0
 80024c6:	4608      	mov	r0, r1
 80024c8:	4611      	mov	r1, r2
 80024ca:	2200      	movs	r2, #0
 80024cc:	602a      	str	r2, [r5, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7fe fc96 	bl	8000e00 <_lseek>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_lseek_r+0x1e>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_lseek_r+0x1e>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	200009d0 	.word	0x200009d0

080024e4 <_read_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4d07      	ldr	r5, [pc, #28]	@ (8002504 <_read_r+0x20>)
 80024e8:	4604      	mov	r4, r0
 80024ea:	4608      	mov	r0, r1
 80024ec:	4611      	mov	r1, r2
 80024ee:	2200      	movs	r2, #0
 80024f0:	602a      	str	r2, [r5, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f7fe fc24 	bl	8000d40 <_read>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d102      	bne.n	8002502 <_read_r+0x1e>
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	b103      	cbz	r3, 8002502 <_read_r+0x1e>
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	200009d0 	.word	0x200009d0

08002508 <_write_r>:
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	4d07      	ldr	r5, [pc, #28]	@ (8002528 <_write_r+0x20>)
 800250c:	4604      	mov	r4, r0
 800250e:	4608      	mov	r0, r1
 8002510:	4611      	mov	r1, r2
 8002512:	2200      	movs	r2, #0
 8002514:	602a      	str	r2, [r5, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	f7fe fc2f 	bl	8000d7a <_write>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d102      	bne.n	8002526 <_write_r+0x1e>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	b103      	cbz	r3, 8002526 <_write_r+0x1e>
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	200009d0 	.word	0x200009d0

0800252c <__errno>:
 800252c:	4b01      	ldr	r3, [pc, #4]	@ (8002534 <__errno+0x8>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000010 	.word	0x20000010

08002538 <__libc_init_array>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4d0d      	ldr	r5, [pc, #52]	@ (8002570 <__libc_init_array+0x38>)
 800253c:	4c0d      	ldr	r4, [pc, #52]	@ (8002574 <__libc_init_array+0x3c>)
 800253e:	1b64      	subs	r4, r4, r5
 8002540:	10a4      	asrs	r4, r4, #2
 8002542:	2600      	movs	r6, #0
 8002544:	42a6      	cmp	r6, r4
 8002546:	d109      	bne.n	800255c <__libc_init_array+0x24>
 8002548:	4d0b      	ldr	r5, [pc, #44]	@ (8002578 <__libc_init_array+0x40>)
 800254a:	4c0c      	ldr	r4, [pc, #48]	@ (800257c <__libc_init_array+0x44>)
 800254c:	f000 fd22 	bl	8002f94 <_init>
 8002550:	1b64      	subs	r4, r4, r5
 8002552:	10a4      	asrs	r4, r4, #2
 8002554:	2600      	movs	r6, #0
 8002556:	42a6      	cmp	r6, r4
 8002558:	d105      	bne.n	8002566 <__libc_init_array+0x2e>
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002560:	4798      	blx	r3
 8002562:	3601      	adds	r6, #1
 8002564:	e7ee      	b.n	8002544 <__libc_init_array+0xc>
 8002566:	f855 3b04 	ldr.w	r3, [r5], #4
 800256a:	4798      	blx	r3
 800256c:	3601      	adds	r6, #1
 800256e:	e7f2      	b.n	8002556 <__libc_init_array+0x1e>
 8002570:	08003024 	.word	0x08003024
 8002574:	08003024 	.word	0x08003024
 8002578:	08003024 	.word	0x08003024
 800257c:	08003028 	.word	0x08003028

08002580 <__retarget_lock_init_recursive>:
 8002580:	4770      	bx	lr

08002582 <__retarget_lock_acquire_recursive>:
 8002582:	4770      	bx	lr

08002584 <__retarget_lock_release_recursive>:
 8002584:	4770      	bx	lr
	...

08002588 <_free_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4605      	mov	r5, r0
 800258c:	2900      	cmp	r1, #0
 800258e:	d041      	beq.n	8002614 <_free_r+0x8c>
 8002590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002594:	1f0c      	subs	r4, r1, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	bfb8      	it	lt
 800259a:	18e4      	addlt	r4, r4, r3
 800259c:	f000 f8e0 	bl	8002760 <__malloc_lock>
 80025a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002618 <_free_r+0x90>)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	b933      	cbnz	r3, 80025b4 <_free_r+0x2c>
 80025a6:	6063      	str	r3, [r4, #4]
 80025a8:	6014      	str	r4, [r2, #0]
 80025aa:	4628      	mov	r0, r5
 80025ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025b0:	f000 b8dc 	b.w	800276c <__malloc_unlock>
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d908      	bls.n	80025ca <_free_r+0x42>
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	1821      	adds	r1, r4, r0
 80025bc:	428b      	cmp	r3, r1
 80025be:	bf01      	itttt	eq
 80025c0:	6819      	ldreq	r1, [r3, #0]
 80025c2:	685b      	ldreq	r3, [r3, #4]
 80025c4:	1809      	addeq	r1, r1, r0
 80025c6:	6021      	streq	r1, [r4, #0]
 80025c8:	e7ed      	b.n	80025a6 <_free_r+0x1e>
 80025ca:	461a      	mov	r2, r3
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b10b      	cbz	r3, 80025d4 <_free_r+0x4c>
 80025d0:	42a3      	cmp	r3, r4
 80025d2:	d9fa      	bls.n	80025ca <_free_r+0x42>
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	1850      	adds	r0, r2, r1
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d10b      	bne.n	80025f4 <_free_r+0x6c>
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	4401      	add	r1, r0
 80025e0:	1850      	adds	r0, r2, r1
 80025e2:	4283      	cmp	r3, r0
 80025e4:	6011      	str	r1, [r2, #0]
 80025e6:	d1e0      	bne.n	80025aa <_free_r+0x22>
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	6053      	str	r3, [r2, #4]
 80025ee:	4408      	add	r0, r1
 80025f0:	6010      	str	r0, [r2, #0]
 80025f2:	e7da      	b.n	80025aa <_free_r+0x22>
 80025f4:	d902      	bls.n	80025fc <_free_r+0x74>
 80025f6:	230c      	movs	r3, #12
 80025f8:	602b      	str	r3, [r5, #0]
 80025fa:	e7d6      	b.n	80025aa <_free_r+0x22>
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	1821      	adds	r1, r4, r0
 8002600:	428b      	cmp	r3, r1
 8002602:	bf04      	itt	eq
 8002604:	6819      	ldreq	r1, [r3, #0]
 8002606:	685b      	ldreq	r3, [r3, #4]
 8002608:	6063      	str	r3, [r4, #4]
 800260a:	bf04      	itt	eq
 800260c:	1809      	addeq	r1, r1, r0
 800260e:	6021      	streq	r1, [r4, #0]
 8002610:	6054      	str	r4, [r2, #4]
 8002612:	e7ca      	b.n	80025aa <_free_r+0x22>
 8002614:	bd38      	pop	{r3, r4, r5, pc}
 8002616:	bf00      	nop
 8002618:	200009dc 	.word	0x200009dc

0800261c <sbrk_aligned>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4e0f      	ldr	r6, [pc, #60]	@ (800265c <sbrk_aligned+0x40>)
 8002620:	460c      	mov	r4, r1
 8002622:	6831      	ldr	r1, [r6, #0]
 8002624:	4605      	mov	r5, r0
 8002626:	b911      	cbnz	r1, 800262e <sbrk_aligned+0x12>
 8002628:	f000 fca4 	bl	8002f74 <_sbrk_r>
 800262c:	6030      	str	r0, [r6, #0]
 800262e:	4621      	mov	r1, r4
 8002630:	4628      	mov	r0, r5
 8002632:	f000 fc9f 	bl	8002f74 <_sbrk_r>
 8002636:	1c43      	adds	r3, r0, #1
 8002638:	d103      	bne.n	8002642 <sbrk_aligned+0x26>
 800263a:	f04f 34ff 	mov.w	r4, #4294967295
 800263e:	4620      	mov	r0, r4
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	1cc4      	adds	r4, r0, #3
 8002644:	f024 0403 	bic.w	r4, r4, #3
 8002648:	42a0      	cmp	r0, r4
 800264a:	d0f8      	beq.n	800263e <sbrk_aligned+0x22>
 800264c:	1a21      	subs	r1, r4, r0
 800264e:	4628      	mov	r0, r5
 8002650:	f000 fc90 	bl	8002f74 <_sbrk_r>
 8002654:	3001      	adds	r0, #1
 8002656:	d1f2      	bne.n	800263e <sbrk_aligned+0x22>
 8002658:	e7ef      	b.n	800263a <sbrk_aligned+0x1e>
 800265a:	bf00      	nop
 800265c:	200009d8 	.word	0x200009d8

08002660 <_malloc_r>:
 8002660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002664:	1ccd      	adds	r5, r1, #3
 8002666:	f025 0503 	bic.w	r5, r5, #3
 800266a:	3508      	adds	r5, #8
 800266c:	2d0c      	cmp	r5, #12
 800266e:	bf38      	it	cc
 8002670:	250c      	movcc	r5, #12
 8002672:	2d00      	cmp	r5, #0
 8002674:	4606      	mov	r6, r0
 8002676:	db01      	blt.n	800267c <_malloc_r+0x1c>
 8002678:	42a9      	cmp	r1, r5
 800267a:	d904      	bls.n	8002686 <_malloc_r+0x26>
 800267c:	230c      	movs	r3, #12
 800267e:	6033      	str	r3, [r6, #0]
 8002680:	2000      	movs	r0, #0
 8002682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800275c <_malloc_r+0xfc>
 800268a:	f000 f869 	bl	8002760 <__malloc_lock>
 800268e:	f8d8 3000 	ldr.w	r3, [r8]
 8002692:	461c      	mov	r4, r3
 8002694:	bb44      	cbnz	r4, 80026e8 <_malloc_r+0x88>
 8002696:	4629      	mov	r1, r5
 8002698:	4630      	mov	r0, r6
 800269a:	f7ff ffbf 	bl	800261c <sbrk_aligned>
 800269e:	1c43      	adds	r3, r0, #1
 80026a0:	4604      	mov	r4, r0
 80026a2:	d158      	bne.n	8002756 <_malloc_r+0xf6>
 80026a4:	f8d8 4000 	ldr.w	r4, [r8]
 80026a8:	4627      	mov	r7, r4
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	d143      	bne.n	8002736 <_malloc_r+0xd6>
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d04b      	beq.n	800274a <_malloc_r+0xea>
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	4639      	mov	r1, r7
 80026b6:	4630      	mov	r0, r6
 80026b8:	eb04 0903 	add.w	r9, r4, r3
 80026bc:	f000 fc5a 	bl	8002f74 <_sbrk_r>
 80026c0:	4581      	cmp	r9, r0
 80026c2:	d142      	bne.n	800274a <_malloc_r+0xea>
 80026c4:	6821      	ldr	r1, [r4, #0]
 80026c6:	1a6d      	subs	r5, r5, r1
 80026c8:	4629      	mov	r1, r5
 80026ca:	4630      	mov	r0, r6
 80026cc:	f7ff ffa6 	bl	800261c <sbrk_aligned>
 80026d0:	3001      	adds	r0, #1
 80026d2:	d03a      	beq.n	800274a <_malloc_r+0xea>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	442b      	add	r3, r5
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	f8d8 3000 	ldr.w	r3, [r8]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	bb62      	cbnz	r2, 800273c <_malloc_r+0xdc>
 80026e2:	f8c8 7000 	str.w	r7, [r8]
 80026e6:	e00f      	b.n	8002708 <_malloc_r+0xa8>
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	1b52      	subs	r2, r2, r5
 80026ec:	d420      	bmi.n	8002730 <_malloc_r+0xd0>
 80026ee:	2a0b      	cmp	r2, #11
 80026f0:	d917      	bls.n	8002722 <_malloc_r+0xc2>
 80026f2:	1961      	adds	r1, r4, r5
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	6025      	str	r5, [r4, #0]
 80026f8:	bf18      	it	ne
 80026fa:	6059      	strne	r1, [r3, #4]
 80026fc:	6863      	ldr	r3, [r4, #4]
 80026fe:	bf08      	it	eq
 8002700:	f8c8 1000 	streq.w	r1, [r8]
 8002704:	5162      	str	r2, [r4, r5]
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	4630      	mov	r0, r6
 800270a:	f000 f82f 	bl	800276c <__malloc_unlock>
 800270e:	f104 000b 	add.w	r0, r4, #11
 8002712:	1d23      	adds	r3, r4, #4
 8002714:	f020 0007 	bic.w	r0, r0, #7
 8002718:	1ac2      	subs	r2, r0, r3
 800271a:	bf1c      	itt	ne
 800271c:	1a1b      	subne	r3, r3, r0
 800271e:	50a3      	strne	r3, [r4, r2]
 8002720:	e7af      	b.n	8002682 <_malloc_r+0x22>
 8002722:	6862      	ldr	r2, [r4, #4]
 8002724:	42a3      	cmp	r3, r4
 8002726:	bf0c      	ite	eq
 8002728:	f8c8 2000 	streq.w	r2, [r8]
 800272c:	605a      	strne	r2, [r3, #4]
 800272e:	e7eb      	b.n	8002708 <_malloc_r+0xa8>
 8002730:	4623      	mov	r3, r4
 8002732:	6864      	ldr	r4, [r4, #4]
 8002734:	e7ae      	b.n	8002694 <_malloc_r+0x34>
 8002736:	463c      	mov	r4, r7
 8002738:	687f      	ldr	r7, [r7, #4]
 800273a:	e7b6      	b.n	80026aa <_malloc_r+0x4a>
 800273c:	461a      	mov	r2, r3
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	42a3      	cmp	r3, r4
 8002742:	d1fb      	bne.n	800273c <_malloc_r+0xdc>
 8002744:	2300      	movs	r3, #0
 8002746:	6053      	str	r3, [r2, #4]
 8002748:	e7de      	b.n	8002708 <_malloc_r+0xa8>
 800274a:	230c      	movs	r3, #12
 800274c:	6033      	str	r3, [r6, #0]
 800274e:	4630      	mov	r0, r6
 8002750:	f000 f80c 	bl	800276c <__malloc_unlock>
 8002754:	e794      	b.n	8002680 <_malloc_r+0x20>
 8002756:	6005      	str	r5, [r0, #0]
 8002758:	e7d6      	b.n	8002708 <_malloc_r+0xa8>
 800275a:	bf00      	nop
 800275c:	200009dc 	.word	0x200009dc

08002760 <__malloc_lock>:
 8002760:	4801      	ldr	r0, [pc, #4]	@ (8002768 <__malloc_lock+0x8>)
 8002762:	f7ff bf0e 	b.w	8002582 <__retarget_lock_acquire_recursive>
 8002766:	bf00      	nop
 8002768:	200009d4 	.word	0x200009d4

0800276c <__malloc_unlock>:
 800276c:	4801      	ldr	r0, [pc, #4]	@ (8002774 <__malloc_unlock+0x8>)
 800276e:	f7ff bf09 	b.w	8002584 <__retarget_lock_release_recursive>
 8002772:	bf00      	nop
 8002774:	200009d4 	.word	0x200009d4

08002778 <__sfputc_r>:
 8002778:	6893      	ldr	r3, [r2, #8]
 800277a:	3b01      	subs	r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	b410      	push	{r4}
 8002780:	6093      	str	r3, [r2, #8]
 8002782:	da08      	bge.n	8002796 <__sfputc_r+0x1e>
 8002784:	6994      	ldr	r4, [r2, #24]
 8002786:	42a3      	cmp	r3, r4
 8002788:	db01      	blt.n	800278e <__sfputc_r+0x16>
 800278a:	290a      	cmp	r1, #10
 800278c:	d103      	bne.n	8002796 <__sfputc_r+0x1e>
 800278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002792:	f7ff bde8 	b.w	8002366 <__swbuf_r>
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	1c58      	adds	r0, r3, #1
 800279a:	6010      	str	r0, [r2, #0]
 800279c:	7019      	strb	r1, [r3, #0]
 800279e:	4608      	mov	r0, r1
 80027a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <__sfputs_r>:
 80027a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a8:	4606      	mov	r6, r0
 80027aa:	460f      	mov	r7, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	18d5      	adds	r5, r2, r3
 80027b0:	42ac      	cmp	r4, r5
 80027b2:	d101      	bne.n	80027b8 <__sfputs_r+0x12>
 80027b4:	2000      	movs	r0, #0
 80027b6:	e007      	b.n	80027c8 <__sfputs_r+0x22>
 80027b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027bc:	463a      	mov	r2, r7
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff ffda 	bl	8002778 <__sfputc_r>
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d1f3      	bne.n	80027b0 <__sfputs_r+0xa>
 80027c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027cc <_vfiprintf_r>:
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	460d      	mov	r5, r1
 80027d2:	b09d      	sub	sp, #116	@ 0x74
 80027d4:	4614      	mov	r4, r2
 80027d6:	4698      	mov	r8, r3
 80027d8:	4606      	mov	r6, r0
 80027da:	b118      	cbz	r0, 80027e4 <_vfiprintf_r+0x18>
 80027dc:	6a03      	ldr	r3, [r0, #32]
 80027de:	b90b      	cbnz	r3, 80027e4 <_vfiprintf_r+0x18>
 80027e0:	f7ff fcd8 	bl	8002194 <__sinit>
 80027e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027e6:	07d9      	lsls	r1, r3, #31
 80027e8:	d405      	bmi.n	80027f6 <_vfiprintf_r+0x2a>
 80027ea:	89ab      	ldrh	r3, [r5, #12]
 80027ec:	059a      	lsls	r2, r3, #22
 80027ee:	d402      	bmi.n	80027f6 <_vfiprintf_r+0x2a>
 80027f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027f2:	f7ff fec6 	bl	8002582 <__retarget_lock_acquire_recursive>
 80027f6:	89ab      	ldrh	r3, [r5, #12]
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	d501      	bpl.n	8002800 <_vfiprintf_r+0x34>
 80027fc:	692b      	ldr	r3, [r5, #16]
 80027fe:	b99b      	cbnz	r3, 8002828 <_vfiprintf_r+0x5c>
 8002800:	4629      	mov	r1, r5
 8002802:	4630      	mov	r0, r6
 8002804:	f7ff fdee 	bl	80023e4 <__swsetup_r>
 8002808:	b170      	cbz	r0, 8002828 <_vfiprintf_r+0x5c>
 800280a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800280c:	07dc      	lsls	r4, r3, #31
 800280e:	d504      	bpl.n	800281a <_vfiprintf_r+0x4e>
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	b01d      	add	sp, #116	@ 0x74
 8002816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281a:	89ab      	ldrh	r3, [r5, #12]
 800281c:	0598      	lsls	r0, r3, #22
 800281e:	d4f7      	bmi.n	8002810 <_vfiprintf_r+0x44>
 8002820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002822:	f7ff feaf 	bl	8002584 <__retarget_lock_release_recursive>
 8002826:	e7f3      	b.n	8002810 <_vfiprintf_r+0x44>
 8002828:	2300      	movs	r3, #0
 800282a:	9309      	str	r3, [sp, #36]	@ 0x24
 800282c:	2320      	movs	r3, #32
 800282e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002832:	f8cd 800c 	str.w	r8, [sp, #12]
 8002836:	2330      	movs	r3, #48	@ 0x30
 8002838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80029e8 <_vfiprintf_r+0x21c>
 800283c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002840:	f04f 0901 	mov.w	r9, #1
 8002844:	4623      	mov	r3, r4
 8002846:	469a      	mov	sl, r3
 8002848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800284c:	b10a      	cbz	r2, 8002852 <_vfiprintf_r+0x86>
 800284e:	2a25      	cmp	r2, #37	@ 0x25
 8002850:	d1f9      	bne.n	8002846 <_vfiprintf_r+0x7a>
 8002852:	ebba 0b04 	subs.w	fp, sl, r4
 8002856:	d00b      	beq.n	8002870 <_vfiprintf_r+0xa4>
 8002858:	465b      	mov	r3, fp
 800285a:	4622      	mov	r2, r4
 800285c:	4629      	mov	r1, r5
 800285e:	4630      	mov	r0, r6
 8002860:	f7ff ffa1 	bl	80027a6 <__sfputs_r>
 8002864:	3001      	adds	r0, #1
 8002866:	f000 80a7 	beq.w	80029b8 <_vfiprintf_r+0x1ec>
 800286a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800286c:	445a      	add	r2, fp
 800286e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002870:	f89a 3000 	ldrb.w	r3, [sl]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 809f 	beq.w	80029b8 <_vfiprintf_r+0x1ec>
 800287a:	2300      	movs	r3, #0
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002884:	f10a 0a01 	add.w	sl, sl, #1
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	9307      	str	r3, [sp, #28]
 800288c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002890:	931a      	str	r3, [sp, #104]	@ 0x68
 8002892:	4654      	mov	r4, sl
 8002894:	2205      	movs	r2, #5
 8002896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800289a:	4853      	ldr	r0, [pc, #332]	@ (80029e8 <_vfiprintf_r+0x21c>)
 800289c:	f7fd fcb8 	bl	8000210 <memchr>
 80028a0:	9a04      	ldr	r2, [sp, #16]
 80028a2:	b9d8      	cbnz	r0, 80028dc <_vfiprintf_r+0x110>
 80028a4:	06d1      	lsls	r1, r2, #27
 80028a6:	bf44      	itt	mi
 80028a8:	2320      	movmi	r3, #32
 80028aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028ae:	0713      	lsls	r3, r2, #28
 80028b0:	bf44      	itt	mi
 80028b2:	232b      	movmi	r3, #43	@ 0x2b
 80028b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028b8:	f89a 3000 	ldrb.w	r3, [sl]
 80028bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80028be:	d015      	beq.n	80028ec <_vfiprintf_r+0x120>
 80028c0:	9a07      	ldr	r2, [sp, #28]
 80028c2:	4654      	mov	r4, sl
 80028c4:	2000      	movs	r0, #0
 80028c6:	f04f 0c0a 	mov.w	ip, #10
 80028ca:	4621      	mov	r1, r4
 80028cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028d0:	3b30      	subs	r3, #48	@ 0x30
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d94b      	bls.n	800296e <_vfiprintf_r+0x1a2>
 80028d6:	b1b0      	cbz	r0, 8002906 <_vfiprintf_r+0x13a>
 80028d8:	9207      	str	r2, [sp, #28]
 80028da:	e014      	b.n	8002906 <_vfiprintf_r+0x13a>
 80028dc:	eba0 0308 	sub.w	r3, r0, r8
 80028e0:	fa09 f303 	lsl.w	r3, r9, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	46a2      	mov	sl, r4
 80028ea:	e7d2      	b.n	8002892 <_vfiprintf_r+0xc6>
 80028ec:	9b03      	ldr	r3, [sp, #12]
 80028ee:	1d19      	adds	r1, r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	9103      	str	r1, [sp, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bfbb      	ittet	lt
 80028f8:	425b      	neglt	r3, r3
 80028fa:	f042 0202 	orrlt.w	r2, r2, #2
 80028fe:	9307      	strge	r3, [sp, #28]
 8002900:	9307      	strlt	r3, [sp, #28]
 8002902:	bfb8      	it	lt
 8002904:	9204      	strlt	r2, [sp, #16]
 8002906:	7823      	ldrb	r3, [r4, #0]
 8002908:	2b2e      	cmp	r3, #46	@ 0x2e
 800290a:	d10a      	bne.n	8002922 <_vfiprintf_r+0x156>
 800290c:	7863      	ldrb	r3, [r4, #1]
 800290e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002910:	d132      	bne.n	8002978 <_vfiprintf_r+0x1ac>
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	1d1a      	adds	r2, r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	9203      	str	r2, [sp, #12]
 800291a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800291e:	3402      	adds	r4, #2
 8002920:	9305      	str	r3, [sp, #20]
 8002922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80029f8 <_vfiprintf_r+0x22c>
 8002926:	7821      	ldrb	r1, [r4, #0]
 8002928:	2203      	movs	r2, #3
 800292a:	4650      	mov	r0, sl
 800292c:	f7fd fc70 	bl	8000210 <memchr>
 8002930:	b138      	cbz	r0, 8002942 <_vfiprintf_r+0x176>
 8002932:	9b04      	ldr	r3, [sp, #16]
 8002934:	eba0 000a 	sub.w	r0, r0, sl
 8002938:	2240      	movs	r2, #64	@ 0x40
 800293a:	4082      	lsls	r2, r0
 800293c:	4313      	orrs	r3, r2
 800293e:	3401      	adds	r4, #1
 8002940:	9304      	str	r3, [sp, #16]
 8002942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002946:	4829      	ldr	r0, [pc, #164]	@ (80029ec <_vfiprintf_r+0x220>)
 8002948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800294c:	2206      	movs	r2, #6
 800294e:	f7fd fc5f 	bl	8000210 <memchr>
 8002952:	2800      	cmp	r0, #0
 8002954:	d03f      	beq.n	80029d6 <_vfiprintf_r+0x20a>
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <_vfiprintf_r+0x224>)
 8002958:	bb1b      	cbnz	r3, 80029a2 <_vfiprintf_r+0x1d6>
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	3307      	adds	r3, #7
 800295e:	f023 0307 	bic.w	r3, r3, #7
 8002962:	3308      	adds	r3, #8
 8002964:	9303      	str	r3, [sp, #12]
 8002966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002968:	443b      	add	r3, r7
 800296a:	9309      	str	r3, [sp, #36]	@ 0x24
 800296c:	e76a      	b.n	8002844 <_vfiprintf_r+0x78>
 800296e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002972:	460c      	mov	r4, r1
 8002974:	2001      	movs	r0, #1
 8002976:	e7a8      	b.n	80028ca <_vfiprintf_r+0xfe>
 8002978:	2300      	movs	r3, #0
 800297a:	3401      	adds	r4, #1
 800297c:	9305      	str	r3, [sp, #20]
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 0c0a 	mov.w	ip, #10
 8002984:	4620      	mov	r0, r4
 8002986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800298a:	3a30      	subs	r2, #48	@ 0x30
 800298c:	2a09      	cmp	r2, #9
 800298e:	d903      	bls.n	8002998 <_vfiprintf_r+0x1cc>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0c6      	beq.n	8002922 <_vfiprintf_r+0x156>
 8002994:	9105      	str	r1, [sp, #20]
 8002996:	e7c4      	b.n	8002922 <_vfiprintf_r+0x156>
 8002998:	fb0c 2101 	mla	r1, ip, r1, r2
 800299c:	4604      	mov	r4, r0
 800299e:	2301      	movs	r3, #1
 80029a0:	e7f0      	b.n	8002984 <_vfiprintf_r+0x1b8>
 80029a2:	ab03      	add	r3, sp, #12
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	462a      	mov	r2, r5
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <_vfiprintf_r+0x228>)
 80029aa:	a904      	add	r1, sp, #16
 80029ac:	4630      	mov	r0, r6
 80029ae:	f3af 8000 	nop.w
 80029b2:	4607      	mov	r7, r0
 80029b4:	1c78      	adds	r0, r7, #1
 80029b6:	d1d6      	bne.n	8002966 <_vfiprintf_r+0x19a>
 80029b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029ba:	07d9      	lsls	r1, r3, #31
 80029bc:	d405      	bmi.n	80029ca <_vfiprintf_r+0x1fe>
 80029be:	89ab      	ldrh	r3, [r5, #12]
 80029c0:	059a      	lsls	r2, r3, #22
 80029c2:	d402      	bmi.n	80029ca <_vfiprintf_r+0x1fe>
 80029c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029c6:	f7ff fddd 	bl	8002584 <__retarget_lock_release_recursive>
 80029ca:	89ab      	ldrh	r3, [r5, #12]
 80029cc:	065b      	lsls	r3, r3, #25
 80029ce:	f53f af1f 	bmi.w	8002810 <_vfiprintf_r+0x44>
 80029d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029d4:	e71e      	b.n	8002814 <_vfiprintf_r+0x48>
 80029d6:	ab03      	add	r3, sp, #12
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	462a      	mov	r2, r5
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <_vfiprintf_r+0x228>)
 80029de:	a904      	add	r1, sp, #16
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 f879 	bl	8002ad8 <_printf_i>
 80029e6:	e7e4      	b.n	80029b2 <_vfiprintf_r+0x1e6>
 80029e8:	08002fe8 	.word	0x08002fe8
 80029ec:	08002ff2 	.word	0x08002ff2
 80029f0:	00000000 	.word	0x00000000
 80029f4:	080027a7 	.word	0x080027a7
 80029f8:	08002fee 	.word	0x08002fee

080029fc <_printf_common>:
 80029fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a00:	4616      	mov	r6, r2
 8002a02:	4698      	mov	r8, r3
 8002a04:	688a      	ldr	r2, [r1, #8]
 8002a06:	690b      	ldr	r3, [r1, #16]
 8002a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bfb8      	it	lt
 8002a10:	4613      	movlt	r3, r2
 8002a12:	6033      	str	r3, [r6, #0]
 8002a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a18:	4607      	mov	r7, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	b10a      	cbz	r2, 8002a22 <_printf_common+0x26>
 8002a1e:	3301      	adds	r3, #1
 8002a20:	6033      	str	r3, [r6, #0]
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	0699      	lsls	r1, r3, #26
 8002a26:	bf42      	ittt	mi
 8002a28:	6833      	ldrmi	r3, [r6, #0]
 8002a2a:	3302      	addmi	r3, #2
 8002a2c:	6033      	strmi	r3, [r6, #0]
 8002a2e:	6825      	ldr	r5, [r4, #0]
 8002a30:	f015 0506 	ands.w	r5, r5, #6
 8002a34:	d106      	bne.n	8002a44 <_printf_common+0x48>
 8002a36:	f104 0a19 	add.w	sl, r4, #25
 8002a3a:	68e3      	ldr	r3, [r4, #12]
 8002a3c:	6832      	ldr	r2, [r6, #0]
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	42ab      	cmp	r3, r5
 8002a42:	dc26      	bgt.n	8002a92 <_printf_common+0x96>
 8002a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	3b00      	subs	r3, #0
 8002a4c:	bf18      	it	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	0692      	lsls	r2, r2, #26
 8002a52:	d42b      	bmi.n	8002aac <_printf_common+0xb0>
 8002a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a58:	4641      	mov	r1, r8
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	47c8      	blx	r9
 8002a5e:	3001      	adds	r0, #1
 8002a60:	d01e      	beq.n	8002aa0 <_printf_common+0xa4>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	f003 0306 	and.w	r3, r3, #6
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf02      	ittt	eq
 8002a6e:	68e5      	ldreq	r5, [r4, #12]
 8002a70:	6833      	ldreq	r3, [r6, #0]
 8002a72:	1aed      	subeq	r5, r5, r3
 8002a74:	68a3      	ldr	r3, [r4, #8]
 8002a76:	bf0c      	ite	eq
 8002a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a7c:	2500      	movne	r5, #0
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	bfc4      	itt	gt
 8002a82:	1a9b      	subgt	r3, r3, r2
 8002a84:	18ed      	addgt	r5, r5, r3
 8002a86:	2600      	movs	r6, #0
 8002a88:	341a      	adds	r4, #26
 8002a8a:	42b5      	cmp	r5, r6
 8002a8c:	d11a      	bne.n	8002ac4 <_printf_common+0xc8>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e008      	b.n	8002aa4 <_printf_common+0xa8>
 8002a92:	2301      	movs	r3, #1
 8002a94:	4652      	mov	r2, sl
 8002a96:	4641      	mov	r1, r8
 8002a98:	4638      	mov	r0, r7
 8002a9a:	47c8      	blx	r9
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	d103      	bne.n	8002aa8 <_printf_common+0xac>
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa8:	3501      	adds	r5, #1
 8002aaa:	e7c6      	b.n	8002a3a <_printf_common+0x3e>
 8002aac:	18e1      	adds	r1, r4, r3
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	2030      	movs	r0, #48	@ 0x30
 8002ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ab6:	4422      	add	r2, r4
 8002ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	e7c7      	b.n	8002a54 <_printf_common+0x58>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4638      	mov	r0, r7
 8002acc:	47c8      	blx	r9
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d0e6      	beq.n	8002aa0 <_printf_common+0xa4>
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7d9      	b.n	8002a8a <_printf_common+0x8e>
	...

08002ad8 <_printf_i>:
 8002ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002adc:	7e0f      	ldrb	r7, [r1, #24]
 8002ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ae0:	2f78      	cmp	r7, #120	@ 0x78
 8002ae2:	4691      	mov	r9, r2
 8002ae4:	4680      	mov	r8, r0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	469a      	mov	sl, r3
 8002aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002aee:	d807      	bhi.n	8002b00 <_printf_i+0x28>
 8002af0:	2f62      	cmp	r7, #98	@ 0x62
 8002af2:	d80a      	bhi.n	8002b0a <_printf_i+0x32>
 8002af4:	2f00      	cmp	r7, #0
 8002af6:	f000 80d1 	beq.w	8002c9c <_printf_i+0x1c4>
 8002afa:	2f58      	cmp	r7, #88	@ 0x58
 8002afc:	f000 80b8 	beq.w	8002c70 <_printf_i+0x198>
 8002b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b08:	e03a      	b.n	8002b80 <_printf_i+0xa8>
 8002b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b0e:	2b15      	cmp	r3, #21
 8002b10:	d8f6      	bhi.n	8002b00 <_printf_i+0x28>
 8002b12:	a101      	add	r1, pc, #4	@ (adr r1, 8002b18 <_printf_i+0x40>)
 8002b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b18:	08002b71 	.word	0x08002b71
 8002b1c:	08002b85 	.word	0x08002b85
 8002b20:	08002b01 	.word	0x08002b01
 8002b24:	08002b01 	.word	0x08002b01
 8002b28:	08002b01 	.word	0x08002b01
 8002b2c:	08002b01 	.word	0x08002b01
 8002b30:	08002b85 	.word	0x08002b85
 8002b34:	08002b01 	.word	0x08002b01
 8002b38:	08002b01 	.word	0x08002b01
 8002b3c:	08002b01 	.word	0x08002b01
 8002b40:	08002b01 	.word	0x08002b01
 8002b44:	08002c83 	.word	0x08002c83
 8002b48:	08002baf 	.word	0x08002baf
 8002b4c:	08002c3d 	.word	0x08002c3d
 8002b50:	08002b01 	.word	0x08002b01
 8002b54:	08002b01 	.word	0x08002b01
 8002b58:	08002ca5 	.word	0x08002ca5
 8002b5c:	08002b01 	.word	0x08002b01
 8002b60:	08002baf 	.word	0x08002baf
 8002b64:	08002b01 	.word	0x08002b01
 8002b68:	08002b01 	.word	0x08002b01
 8002b6c:	08002c45 	.word	0x08002c45
 8002b70:	6833      	ldr	r3, [r6, #0]
 8002b72:	1d1a      	adds	r2, r3, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6032      	str	r2, [r6, #0]
 8002b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b80:	2301      	movs	r3, #1
 8002b82:	e09c      	b.n	8002cbe <_printf_i+0x1e6>
 8002b84:	6833      	ldr	r3, [r6, #0]
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	1d19      	adds	r1, r3, #4
 8002b8a:	6031      	str	r1, [r6, #0]
 8002b8c:	0606      	lsls	r6, r0, #24
 8002b8e:	d501      	bpl.n	8002b94 <_printf_i+0xbc>
 8002b90:	681d      	ldr	r5, [r3, #0]
 8002b92:	e003      	b.n	8002b9c <_printf_i+0xc4>
 8002b94:	0645      	lsls	r5, r0, #25
 8002b96:	d5fb      	bpl.n	8002b90 <_printf_i+0xb8>
 8002b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b9c:	2d00      	cmp	r5, #0
 8002b9e:	da03      	bge.n	8002ba8 <_printf_i+0xd0>
 8002ba0:	232d      	movs	r3, #45	@ 0x2d
 8002ba2:	426d      	negs	r5, r5
 8002ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ba8:	4858      	ldr	r0, [pc, #352]	@ (8002d0c <_printf_i+0x234>)
 8002baa:	230a      	movs	r3, #10
 8002bac:	e011      	b.n	8002bd2 <_printf_i+0xfa>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	6833      	ldr	r3, [r6, #0]
 8002bb2:	0608      	lsls	r0, r1, #24
 8002bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bb8:	d402      	bmi.n	8002bc0 <_printf_i+0xe8>
 8002bba:	0649      	lsls	r1, r1, #25
 8002bbc:	bf48      	it	mi
 8002bbe:	b2ad      	uxthmi	r5, r5
 8002bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bc2:	4852      	ldr	r0, [pc, #328]	@ (8002d0c <_printf_i+0x234>)
 8002bc4:	6033      	str	r3, [r6, #0]
 8002bc6:	bf14      	ite	ne
 8002bc8:	230a      	movne	r3, #10
 8002bca:	2308      	moveq	r3, #8
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bd2:	6866      	ldr	r6, [r4, #4]
 8002bd4:	60a6      	str	r6, [r4, #8]
 8002bd6:	2e00      	cmp	r6, #0
 8002bd8:	db05      	blt.n	8002be6 <_printf_i+0x10e>
 8002bda:	6821      	ldr	r1, [r4, #0]
 8002bdc:	432e      	orrs	r6, r5
 8002bde:	f021 0104 	bic.w	r1, r1, #4
 8002be2:	6021      	str	r1, [r4, #0]
 8002be4:	d04b      	beq.n	8002c7e <_printf_i+0x1a6>
 8002be6:	4616      	mov	r6, r2
 8002be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bec:	fb03 5711 	mls	r7, r3, r1, r5
 8002bf0:	5dc7      	ldrb	r7, [r0, r7]
 8002bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bf6:	462f      	mov	r7, r5
 8002bf8:	42bb      	cmp	r3, r7
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	d9f4      	bls.n	8002be8 <_printf_i+0x110>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d10b      	bne.n	8002c1a <_printf_i+0x142>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	07df      	lsls	r7, r3, #31
 8002c06:	d508      	bpl.n	8002c1a <_printf_i+0x142>
 8002c08:	6923      	ldr	r3, [r4, #16]
 8002c0a:	6861      	ldr	r1, [r4, #4]
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	bfde      	ittt	le
 8002c10:	2330      	movle	r3, #48	@ 0x30
 8002c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c1a:	1b92      	subs	r2, r2, r6
 8002c1c:	6122      	str	r2, [r4, #16]
 8002c1e:	f8cd a000 	str.w	sl, [sp]
 8002c22:	464b      	mov	r3, r9
 8002c24:	aa03      	add	r2, sp, #12
 8002c26:	4621      	mov	r1, r4
 8002c28:	4640      	mov	r0, r8
 8002c2a:	f7ff fee7 	bl	80029fc <_printf_common>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d14a      	bne.n	8002cc8 <_printf_i+0x1f0>
 8002c32:	f04f 30ff 	mov.w	r0, #4294967295
 8002c36:	b004      	add	sp, #16
 8002c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	4832      	ldr	r0, [pc, #200]	@ (8002d10 <_printf_i+0x238>)
 8002c46:	2778      	movs	r7, #120	@ 0x78
 8002c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	6831      	ldr	r1, [r6, #0]
 8002c50:	061f      	lsls	r7, r3, #24
 8002c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c56:	d402      	bmi.n	8002c5e <_printf_i+0x186>
 8002c58:	065f      	lsls	r7, r3, #25
 8002c5a:	bf48      	it	mi
 8002c5c:	b2ad      	uxthmi	r5, r5
 8002c5e:	6031      	str	r1, [r6, #0]
 8002c60:	07d9      	lsls	r1, r3, #31
 8002c62:	bf44      	itt	mi
 8002c64:	f043 0320 	orrmi.w	r3, r3, #32
 8002c68:	6023      	strmi	r3, [r4, #0]
 8002c6a:	b11d      	cbz	r5, 8002c74 <_printf_i+0x19c>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	e7ad      	b.n	8002bcc <_printf_i+0xf4>
 8002c70:	4826      	ldr	r0, [pc, #152]	@ (8002d0c <_printf_i+0x234>)
 8002c72:	e7e9      	b.n	8002c48 <_printf_i+0x170>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	f023 0320 	bic.w	r3, r3, #32
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	e7f6      	b.n	8002c6c <_printf_i+0x194>
 8002c7e:	4616      	mov	r6, r2
 8002c80:	e7bd      	b.n	8002bfe <_printf_i+0x126>
 8002c82:	6833      	ldr	r3, [r6, #0]
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	6961      	ldr	r1, [r4, #20]
 8002c88:	1d18      	adds	r0, r3, #4
 8002c8a:	6030      	str	r0, [r6, #0]
 8002c8c:	062e      	lsls	r6, r5, #24
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	d501      	bpl.n	8002c96 <_printf_i+0x1be>
 8002c92:	6019      	str	r1, [r3, #0]
 8002c94:	e002      	b.n	8002c9c <_printf_i+0x1c4>
 8002c96:	0668      	lsls	r0, r5, #25
 8002c98:	d5fb      	bpl.n	8002c92 <_printf_i+0x1ba>
 8002c9a:	8019      	strh	r1, [r3, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	e7bc      	b.n	8002c1e <_printf_i+0x146>
 8002ca4:	6833      	ldr	r3, [r6, #0]
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	6032      	str	r2, [r6, #0]
 8002caa:	681e      	ldr	r6, [r3, #0]
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f7fd faad 	bl	8000210 <memchr>
 8002cb6:	b108      	cbz	r0, 8002cbc <_printf_i+0x1e4>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	6060      	str	r0, [r4, #4]
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	6123      	str	r3, [r4, #16]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cc6:	e7aa      	b.n	8002c1e <_printf_i+0x146>
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	4632      	mov	r2, r6
 8002ccc:	4649      	mov	r1, r9
 8002cce:	4640      	mov	r0, r8
 8002cd0:	47d0      	blx	sl
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d0ad      	beq.n	8002c32 <_printf_i+0x15a>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	079b      	lsls	r3, r3, #30
 8002cda:	d413      	bmi.n	8002d04 <_printf_i+0x22c>
 8002cdc:	68e0      	ldr	r0, [r4, #12]
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	bfb8      	it	lt
 8002ce4:	4618      	movlt	r0, r3
 8002ce6:	e7a6      	b.n	8002c36 <_printf_i+0x15e>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4632      	mov	r2, r6
 8002cec:	4649      	mov	r1, r9
 8002cee:	4640      	mov	r0, r8
 8002cf0:	47d0      	blx	sl
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d09d      	beq.n	8002c32 <_printf_i+0x15a>
 8002cf6:	3501      	adds	r5, #1
 8002cf8:	68e3      	ldr	r3, [r4, #12]
 8002cfa:	9903      	ldr	r1, [sp, #12]
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	42ab      	cmp	r3, r5
 8002d00:	dcf2      	bgt.n	8002ce8 <_printf_i+0x210>
 8002d02:	e7eb      	b.n	8002cdc <_printf_i+0x204>
 8002d04:	2500      	movs	r5, #0
 8002d06:	f104 0619 	add.w	r6, r4, #25
 8002d0a:	e7f5      	b.n	8002cf8 <_printf_i+0x220>
 8002d0c:	08002ff9 	.word	0x08002ff9
 8002d10:	0800300a 	.word	0x0800300a

08002d14 <__sflush_r>:
 8002d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1c:	0716      	lsls	r6, r2, #28
 8002d1e:	4605      	mov	r5, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	d454      	bmi.n	8002dce <__sflush_r+0xba>
 8002d24:	684b      	ldr	r3, [r1, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	dc02      	bgt.n	8002d30 <__sflush_r+0x1c>
 8002d2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dd48      	ble.n	8002dc2 <__sflush_r+0xae>
 8002d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	d045      	beq.n	8002dc2 <__sflush_r+0xae>
 8002d36:	2300      	movs	r3, #0
 8002d38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d3c:	682f      	ldr	r7, [r5, #0]
 8002d3e:	6a21      	ldr	r1, [r4, #32]
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	d030      	beq.n	8002da6 <__sflush_r+0x92>
 8002d44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	0759      	lsls	r1, r3, #29
 8002d4a:	d505      	bpl.n	8002d58 <__sflush_r+0x44>
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d52:	b10b      	cbz	r3, 8002d58 <__sflush_r+0x44>
 8002d54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d5c:	6a21      	ldr	r1, [r4, #32]
 8002d5e:	4628      	mov	r0, r5
 8002d60:	47b0      	blx	r6
 8002d62:	1c43      	adds	r3, r0, #1
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	d106      	bne.n	8002d76 <__sflush_r+0x62>
 8002d68:	6829      	ldr	r1, [r5, #0]
 8002d6a:	291d      	cmp	r1, #29
 8002d6c:	d82b      	bhi.n	8002dc6 <__sflush_r+0xb2>
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e18 <__sflush_r+0x104>)
 8002d70:	40ca      	lsrs	r2, r1
 8002d72:	07d6      	lsls	r6, r2, #31
 8002d74:	d527      	bpl.n	8002dc6 <__sflush_r+0xb2>
 8002d76:	2200      	movs	r2, #0
 8002d78:	6062      	str	r2, [r4, #4]
 8002d7a:	04d9      	lsls	r1, r3, #19
 8002d7c:	6922      	ldr	r2, [r4, #16]
 8002d7e:	6022      	str	r2, [r4, #0]
 8002d80:	d504      	bpl.n	8002d8c <__sflush_r+0x78>
 8002d82:	1c42      	adds	r2, r0, #1
 8002d84:	d101      	bne.n	8002d8a <__sflush_r+0x76>
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	b903      	cbnz	r3, 8002d8c <__sflush_r+0x78>
 8002d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d8e:	602f      	str	r7, [r5, #0]
 8002d90:	b1b9      	cbz	r1, 8002dc2 <__sflush_r+0xae>
 8002d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d002      	beq.n	8002da0 <__sflush_r+0x8c>
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f7ff fbf4 	bl	8002588 <_free_r>
 8002da0:	2300      	movs	r3, #0
 8002da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002da4:	e00d      	b.n	8002dc2 <__sflush_r+0xae>
 8002da6:	2301      	movs	r3, #1
 8002da8:	4628      	mov	r0, r5
 8002daa:	47b0      	blx	r6
 8002dac:	4602      	mov	r2, r0
 8002dae:	1c50      	adds	r0, r2, #1
 8002db0:	d1c9      	bne.n	8002d46 <__sflush_r+0x32>
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0c6      	beq.n	8002d46 <__sflush_r+0x32>
 8002db8:	2b1d      	cmp	r3, #29
 8002dba:	d001      	beq.n	8002dc0 <__sflush_r+0xac>
 8002dbc:	2b16      	cmp	r3, #22
 8002dbe:	d11e      	bne.n	8002dfe <__sflush_r+0xea>
 8002dc0:	602f      	str	r7, [r5, #0]
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	e022      	b.n	8002e0c <__sflush_r+0xf8>
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dca:	b21b      	sxth	r3, r3
 8002dcc:	e01b      	b.n	8002e06 <__sflush_r+0xf2>
 8002dce:	690f      	ldr	r7, [r1, #16]
 8002dd0:	2f00      	cmp	r7, #0
 8002dd2:	d0f6      	beq.n	8002dc2 <__sflush_r+0xae>
 8002dd4:	0793      	lsls	r3, r2, #30
 8002dd6:	680e      	ldr	r6, [r1, #0]
 8002dd8:	bf08      	it	eq
 8002dda:	694b      	ldreq	r3, [r1, #20]
 8002ddc:	600f      	str	r7, [r1, #0]
 8002dde:	bf18      	it	ne
 8002de0:	2300      	movne	r3, #0
 8002de2:	eba6 0807 	sub.w	r8, r6, r7
 8002de6:	608b      	str	r3, [r1, #8]
 8002de8:	f1b8 0f00 	cmp.w	r8, #0
 8002dec:	dde9      	ble.n	8002dc2 <__sflush_r+0xae>
 8002dee:	6a21      	ldr	r1, [r4, #32]
 8002df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002df2:	4643      	mov	r3, r8
 8002df4:	463a      	mov	r2, r7
 8002df6:	4628      	mov	r0, r5
 8002df8:	47b0      	blx	r6
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	dc08      	bgt.n	8002e10 <__sflush_r+0xfc>
 8002dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e10:	4407      	add	r7, r0
 8002e12:	eba8 0800 	sub.w	r8, r8, r0
 8002e16:	e7e7      	b.n	8002de8 <__sflush_r+0xd4>
 8002e18:	20400001 	.word	0x20400001

08002e1c <_fflush_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	690b      	ldr	r3, [r1, #16]
 8002e20:	4605      	mov	r5, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	b913      	cbnz	r3, 8002e2c <_fflush_r+0x10>
 8002e26:	2500      	movs	r5, #0
 8002e28:	4628      	mov	r0, r5
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
 8002e2c:	b118      	cbz	r0, 8002e36 <_fflush_r+0x1a>
 8002e2e:	6a03      	ldr	r3, [r0, #32]
 8002e30:	b90b      	cbnz	r3, 8002e36 <_fflush_r+0x1a>
 8002e32:	f7ff f9af 	bl	8002194 <__sinit>
 8002e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f3      	beq.n	8002e26 <_fflush_r+0xa>
 8002e3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e40:	07d0      	lsls	r0, r2, #31
 8002e42:	d404      	bmi.n	8002e4e <_fflush_r+0x32>
 8002e44:	0599      	lsls	r1, r3, #22
 8002e46:	d402      	bmi.n	8002e4e <_fflush_r+0x32>
 8002e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e4a:	f7ff fb9a 	bl	8002582 <__retarget_lock_acquire_recursive>
 8002e4e:	4628      	mov	r0, r5
 8002e50:	4621      	mov	r1, r4
 8002e52:	f7ff ff5f 	bl	8002d14 <__sflush_r>
 8002e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e58:	07da      	lsls	r2, r3, #31
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	d4e4      	bmi.n	8002e28 <_fflush_r+0xc>
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	059b      	lsls	r3, r3, #22
 8002e62:	d4e1      	bmi.n	8002e28 <_fflush_r+0xc>
 8002e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e66:	f7ff fb8d 	bl	8002584 <__retarget_lock_release_recursive>
 8002e6a:	e7dd      	b.n	8002e28 <_fflush_r+0xc>

08002e6c <__swhatbuf_r>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	460c      	mov	r4, r1
 8002e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e74:	2900      	cmp	r1, #0
 8002e76:	b096      	sub	sp, #88	@ 0x58
 8002e78:	4615      	mov	r5, r2
 8002e7a:	461e      	mov	r6, r3
 8002e7c:	da0d      	bge.n	8002e9a <__swhatbuf_r+0x2e>
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2340      	movne	r3, #64	@ 0x40
 8002e8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e90:	2000      	movs	r0, #0
 8002e92:	6031      	str	r1, [r6, #0]
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	b016      	add	sp, #88	@ 0x58
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
 8002e9a:	466a      	mov	r2, sp
 8002e9c:	f000 f848 	bl	8002f30 <_fstat_r>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	dbec      	blt.n	8002e7e <__swhatbuf_r+0x12>
 8002ea4:	9901      	ldr	r1, [sp, #4]
 8002ea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002eaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002eae:	4259      	negs	r1, r3
 8002eb0:	4159      	adcs	r1, r3
 8002eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eb6:	e7eb      	b.n	8002e90 <__swhatbuf_r+0x24>

08002eb8 <__smakebuf_r>:
 8002eb8:	898b      	ldrh	r3, [r1, #12]
 8002eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ebc:	079d      	lsls	r5, r3, #30
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	d507      	bpl.n	8002ed4 <__smakebuf_r+0x1c>
 8002ec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	6123      	str	r3, [r4, #16]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6163      	str	r3, [r4, #20]
 8002ed0:	b003      	add	sp, #12
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	ab01      	add	r3, sp, #4
 8002ed6:	466a      	mov	r2, sp
 8002ed8:	f7ff ffc8 	bl	8002e6c <__swhatbuf_r>
 8002edc:	9f00      	ldr	r7, [sp, #0]
 8002ede:	4605      	mov	r5, r0
 8002ee0:	4639      	mov	r1, r7
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff fbbc 	bl	8002660 <_malloc_r>
 8002ee8:	b948      	cbnz	r0, 8002efe <__smakebuf_r+0x46>
 8002eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eee:	059a      	lsls	r2, r3, #22
 8002ef0:	d4ee      	bmi.n	8002ed0 <__smakebuf_r+0x18>
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	81a3      	strh	r3, [r4, #12]
 8002efc:	e7e2      	b.n	8002ec4 <__smakebuf_r+0xc>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	6020      	str	r0, [r4, #0]
 8002f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f06:	81a3      	strh	r3, [r4, #12]
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f0e:	b15b      	cbz	r3, 8002f28 <__smakebuf_r+0x70>
 8002f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 f81d 	bl	8002f54 <_isatty_r>
 8002f1a:	b128      	cbz	r0, 8002f28 <__smakebuf_r+0x70>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	431d      	orrs	r5, r3
 8002f2c:	81a5      	strh	r5, [r4, #12]
 8002f2e:	e7cf      	b.n	8002ed0 <__smakebuf_r+0x18>

08002f30 <_fstat_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4d07      	ldr	r5, [pc, #28]	@ (8002f50 <_fstat_r+0x20>)
 8002f34:	2300      	movs	r3, #0
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	f7fd ff44 	bl	8000dca <_fstat>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	d102      	bne.n	8002f4c <_fstat_r+0x1c>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	b103      	cbz	r3, 8002f4c <_fstat_r+0x1c>
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
 8002f4e:	bf00      	nop
 8002f50:	200009d0 	.word	0x200009d0

08002f54 <_isatty_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d06      	ldr	r5, [pc, #24]	@ (8002f70 <_isatty_r+0x1c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fd ff43 	bl	8000dea <_isatty>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_isatty_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_isatty_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	200009d0 	.word	0x200009d0

08002f74 <_sbrk_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4d06      	ldr	r5, [pc, #24]	@ (8002f90 <_sbrk_r+0x1c>)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	f7fd ff4c 	bl	8000e1c <_sbrk>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d102      	bne.n	8002f8e <_sbrk_r+0x1a>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	b103      	cbz	r3, 8002f8e <_sbrk_r+0x1a>
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
 8002f90:	200009d0 	.word	0x200009d0

08002f94 <_init>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr

08002fa0 <_fini>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr
