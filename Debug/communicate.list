
communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08006150  08006150  00007150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800665c  0800665c  000081cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006664  08006664  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006668  08006668  00007668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800666c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200001cc  08006838  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08006838  00008734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062d3  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175e  00000000  00000000  0000e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000057b  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d77  00000000  00000000  0001092b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075fa  00000000  00000000  000316a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6e48  00000000  00000000  00038c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfae4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  000dfb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e2cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006138 	.word	0x08006138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08006138 	.word	0x08006138

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9be 	b.w	8001020 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <parse_and_control>:
#include "stm32f4xx_it.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void parse_and_control(char *input) {
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	f2ad 5d44 	subw	sp, sp, #1348	@ 0x544
 800102e:	af0a      	add	r7, sp, #40	@ 0x28
 8001030:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001034:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8001038:	6018      	str	r0, [r3, #0]
    char temp_buffer[RX_BUFFER_SIZE];
    strcpy(temp_buffer, input);
 800103a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800103e:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8001042:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	4610      	mov	r0, r2
 800104a:	f003 f90c 	bl	8004266 <strcpy>

    char *segments[50];
    int count = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514

    char *start = strchr(temp_buffer, '[');
 8001054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001058:	215b      	movs	r1, #91	@ 0x5b
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f814 	bl	8004088 <strchr>
 8001060:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510
    while (start && count < 50) {
 8001064:	e025      	b.n	80010b2 <parse_and_control+0x8a>
        char *end = strchr(start, ']');
 8001066:	215d      	movs	r1, #93	@ 0x5d
 8001068:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 800106c:	f003 f80c 	bl	8004088 <strchr>
 8001070:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
        if (!end) break;
 8001074:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <parse_and_control+0x9c>

        *end = '\0';
 800107c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
        segments[count++] = start + 1;
 8001084:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	f8c7 2514 	str.w	r2, [r7, #1300]	@ 0x514
 800108e:	f8d7 2510 	ldr.w	r2, [r7, #1296]	@ 0x510
 8001092:	1c51      	adds	r1, r2, #1
 8001094:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8001098:	f5a2 629b 	sub.w	r2, r2, #1240	@ 0x4d8
 800109c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        start = strchr(end + 1, '[');
 80010a0:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80010a4:	3301      	adds	r3, #1
 80010a6:	215b      	movs	r1, #91	@ 0x5b
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 ffed 	bl	8004088 <strchr>
 80010ae:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510
    while (start && count < 50) {
 80010b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <parse_and_control+0x9e>
 80010ba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80010be:	2b31      	cmp	r3, #49	@ 0x31
 80010c0:	ddd1      	ble.n	8001066 <parse_and_control+0x3e>
 80010c2:	e000      	b.n	80010c6 <parse_and_control+0x9e>
        if (!end) break;
 80010c4:	bf00      	nop
    }

    printf("Parsed %d segments\n", count);
 80010c6:	f8d7 1514 	ldr.w	r1, [r7, #1300]	@ 0x514
 80010ca:	488f      	ldr	r0, [pc, #572]	@ (8001308 <parse_and_control+0x2e0>)
 80010cc:	f002 fe6a 	bl	8003da4 <iprintf>

    for (int i = 0; i < count; i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 80010d6:	e107      	b.n	80012e8 <parse_and_control+0x2c0>
        printf("Segment[%d]: %s\n", i, segments[i]);
 80010d8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80010dc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80010e0:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 80010ee:	4887      	ldr	r0, [pc, #540]	@ (800130c <parse_and_control+0x2e4>)
 80010f0:	f002 fe58 	bl	8003da4 <iprintf>

        char *token;
        char *rest = segments[i];
 80010f4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80010f8:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80010fc:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8

        token = strtok(rest, ",");
 8001108:	4981      	ldr	r1, [pc, #516]	@ (8001310 <parse_and_control+0x2e8>)
 800110a:	f8d7 04f8 	ldr.w	r0, [r7, #1272]	@ 0x4f8
 800110e:	f002 ffdb 	bl	80040c8 <strtok>
 8001112:	f8c7 04f4 	str.w	r0, [r7, #1268]	@ 0x4f4
        if (!token) {
 8001116:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <parse_and_control+0xfe>
            printf("First token missing\n");
 800111e:	487d      	ldr	r0, [pc, #500]	@ (8001314 <parse_and_control+0x2ec>)
 8001120:	f002 fea8 	bl	8003e74 <puts>
 8001124:	e0db      	b.n	80012de <parse_and_control+0x2b6>
            continue;
        }

        char hand = token[0];
 8001126:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f887 34f3 	strb.w	r3, [r7, #1267]	@ 0x4f3
        float angle[5];

        for (int j = 0; j < 5; j++) {
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8001136:	e02c      	b.n	8001192 <parse_and_control+0x16a>
            token = strtok(NULL, ",");
 8001138:	4975      	ldr	r1, [pc, #468]	@ (8001310 <parse_and_control+0x2e8>)
 800113a:	2000      	movs	r0, #0
 800113c:	f002 ffc4 	bl	80040c8 <strtok>
 8001140:	f8c7 04f4 	str.w	r0, [r7, #1268]	@ 0x4f4
            if (!token) {
 8001144:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <parse_and_control+0x138>
                printf("Angle %d missing in segment %d\n", j + 1, i);
 800114c:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8001150:	3301      	adds	r3, #1
 8001152:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8001156:	4619      	mov	r1, r3
 8001158:	486f      	ldr	r0, [pc, #444]	@ (8001318 <parse_and_control+0x2f0>)
 800115a:	f002 fe23 	bl	8003da4 <iprintf>
 800115e:	e0ca      	b.n	80012f6 <parse_and_control+0x2ce>
                return;
            }
            angle[j] = atof(token);
 8001160:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	@ 0x4f4
 8001164:	f001 ff48 	bl	8002ff8 <atof>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd3c 	bl	8000bec <__aeabi_d2f>
 8001174:	4601      	mov	r1, r0
 8001176:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800117a:	f2a3 42ec 	subw	r2, r3, #1260	@ 0x4ec
 800117e:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 5; j++) {
 8001188:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 800118c:	3301      	adds	r3, #1
 800118e:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8001192:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8001196:	2b04      	cmp	r3, #4
 8001198:	ddce      	ble.n	8001138 <parse_and_control+0x110>
        }

        int32_t cmd[5];
        for (int j = 0; j < 5; j++) {
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 80011a0:	e024      	b.n	80011ec <parse_and_control+0x1c4>
            cmd[j] = (int32_t)(angle[j] / 0.088);
 80011a2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80011a6:	f2a3 42ec 	subw	r2, r3, #1260	@ 0x4ec
 80011aa:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9df 	bl	8000578 <__aeabi_f2d>
 80011ba:	a351      	add	r3, pc, #324	@ (adr r3, 8001300 <parse_and_control+0x2d8>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fb5c 	bl	800087c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fcc6 	bl	8000b5c <__aeabi_d2iz>
 80011d0:	4601      	mov	r1, r0
 80011d2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80011d6:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 80011da:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 80011de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 5; j++) {
 80011e2:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80011e6:	3301      	adds	r3, #1
 80011e8:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 80011ec:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	ddd6      	ble.n	80011a2 <parse_and_control+0x17a>
        }

        uint8_t ID_list[5];
        for (int j = 0; j < 6; j++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 80011fa:	e01b      	b.n	8001234 <parse_and_control+0x20c>
            ID_list[j] = (hand == 'R') ? j + 1 : j + 7;
 80011fc:	f897 34f3 	ldrb.w	r3, [r7, #1267]	@ 0x4f3
 8001200:	2b52      	cmp	r3, #82	@ 0x52
 8001202:	d105      	bne.n	8001210 <parse_and_control+0x1e8>
 8001204:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	e004      	b.n	800121a <parse_and_control+0x1f2>
 8001210:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3307      	adds	r3, #7
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 800121e:	f5a2 61a1 	sub.w	r1, r2, #1288	@ 0x508
 8001222:	f8d7 2500 	ldr.w	r2, [r7, #1280]	@ 0x500
 8001226:	440a      	add	r2, r1
 8001228:	7013      	strb	r3, [r2, #0]
        for (int j = 0; j < 6; j++) {
 800122a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 800122e:	3301      	adds	r3, #1
 8001230:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8001234:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8001238:	2b05      	cmp	r3, #5
 800123a:	dddf      	ble.n	80011fc <parse_and_control+0x1d4>
        }

        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 800123c:	f897 54f3 	ldrb.w	r5, [r7, #1267]	@ 0x4f3
               hand,
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 8001240:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001244:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8001248:	781b      	ldrb	r3, [r3, #0]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 800124a:	469c      	mov	ip, r3
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 800124c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001250:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8001254:	785b      	ldrb	r3, [r3, #1]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 8001256:	469e      	mov	lr, r3
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 8001258:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800125c:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8001260:	789b      	ldrb	r3, [r3, #2]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 8001262:	461e      	mov	r6, r3
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 8001264:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001268:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 800126c:	78db      	ldrb	r3, [r3, #3]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 800126e:	60bb      	str	r3, [r7, #8]
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 8001270:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001274:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8001278:	791b      	ldrb	r3, [r3, #4]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 800127a:	607b      	str	r3, [r7, #4]
               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
 800127c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001280:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8001284:	795b      	ldrb	r3, [r3, #5]
        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800128c:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8001296:	f5a2 62a0 	sub.w	r2, r2, #1280	@ 0x500
 800129a:	6852      	ldr	r2, [r2, #4]
 800129c:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 80012a0:	f5a1 61a0 	sub.w	r1, r1, #1280	@ 0x500
 80012a4:	6889      	ldr	r1, [r1, #8]
 80012a6:	f507 60a3 	add.w	r0, r7, #1304	@ 0x518
 80012aa:	f5a0 60a0 	sub.w	r0, r0, #1280	@ 0x500
 80012ae:	68c0      	ldr	r0, [r0, #12]
 80012b0:	f507 64a3 	add.w	r4, r7, #1304	@ 0x518
 80012b4:	f5a4 64a0 	sub.w	r4, r4, #1280	@ 0x500
 80012b8:	6924      	ldr	r4, [r4, #16]
 80012ba:	9408      	str	r4, [sp, #32]
 80012bc:	9007      	str	r0, [sp, #28]
 80012be:	9106      	str	r1, [sp, #24]
 80012c0:	9205      	str	r2, [sp, #20]
 80012c2:	9304      	str	r3, [sp, #16]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	9203      	str	r2, [sp, #12]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	9600      	str	r6, [sp, #0]
 80012d2:	4673      	mov	r3, lr
 80012d4:	4662      	mov	r2, ip
 80012d6:	4629      	mov	r1, r5
 80012d8:	4810      	ldr	r0, [pc, #64]	@ (800131c <parse_and_control+0x2f4>)
 80012da:	f002 fd63 	bl	8003da4 <iprintf>
    for (int i = 0; i < count; i++) {
 80012de:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 80012e8:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 80012ec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f6ff aef1 	blt.w	80010d8 <parse_and_control+0xb0>
               cmd[0], cmd[1], cmd[2], cmd[3], cmd[4]);
        //        int32_t vel = 100;
        //        SyncWrite_PositionWithVelocityProfile(6, ID_list, cmd, vel);
    }
}
 80012f6:	f207 571c 	addw	r7, r7, #1308	@ 0x51c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	020c49ba 	.word	0x020c49ba
 8001304:	3fb6872b 	.word	0x3fb6872b
 8001308:	08006150 	.word	0x08006150
 800130c:	08006164 	.word	0x08006164
 8001310:	08006178 	.word	0x08006178
 8001314:	0800617c 	.word	0x0800617c
 8001318:	08006190 	.word	0x08006190
 800131c:	080061b0 	.word	0x080061b0

08001320 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800132a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800132c:	4907      	ldr	r1, [pc, #28]	@ (800134c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800

08001350 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ffe3 	bl	8001320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ffe0 	bl	8001320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001360:	2002      	movs	r0, #2
 8001362:	f7ff ffdd 	bl	8001320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001366:	2008      	movs	r0, #8
 8001368:	f7ff ffda 	bl	8001320 <LL_AHB1_GRP1_EnableClock>

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <LL_RCC_HSI_Enable+0x1c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <LL_RCC_HSI_Enable+0x1c>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <LL_RCC_HSI_IsReady+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800

08001510 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4904      	ldr	r1, [pc, #16]	@ (8001538 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <LL_RCC_SetSysClkSource+0x24>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 0203 	bic.w	r2, r3, #3
 800154c:	4904      	ldr	r1, [pc, #16]	@ (8001560 <LL_RCC_SetSysClkSource+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800

08001564 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <LL_RCC_GetSysClkSource+0x18>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001590:	4904      	ldr	r1, [pc, #16]	@ (80015a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40023800 	.word	0x40023800

080015a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015b8:	4904      	ldr	r1, [pc, #16]	@ (80015cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40023800 	.word	0x40023800

080015d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015e0:	4904      	ldr	r1, [pc, #16]	@ (80015f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40023800 	.word	0x40023800

080015f8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <LL_RCC_SetTIMPrescaler+0x28>)
 8001602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001606:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800160a:	4905      	ldr	r1, [pc, #20]	@ (8001620 <LL_RCC_SetTIMPrescaler+0x28>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800

08001624 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 800162e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <LL_APB1_GRP1_EnableClock+0x2c>)
 800163a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800

08001654 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800165e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800166a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800

08001684 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <LL_FLASH_SetLatency+0x24>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 020f 	bic.w	r2, r3, #15
 8001694:	4904      	ldr	r1, [pc, #16]	@ (80016a8 <LL_FLASH_SetLatency+0x24>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023c00 	.word	0x40023c00

080016ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <LL_FLASH_GetLatency+0x18>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <LL_PWR_DisableOverDriveMode+0x1c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <LL_PWR_DisableOverDriveMode+0x1c>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000

080016e8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80016f8:	4904      	ldr	r1, [pc, #16]	@ (800170c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40007000 	.word	0x40007000

08001710 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	330c      	adds	r3, #12
 800173c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	e853 3f00 	ldrex	r3, [r3]
 8001744:	60bb      	str	r3, [r7, #8]
   return(result);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	330c      	adds	r3, #12
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	61ba      	str	r2, [r7, #24]
 8001756:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001758:	6979      	ldr	r1, [r7, #20]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	e841 2300 	strex	r3, r2, [r1]
 8001760:	613b      	str	r3, [r7, #16]
   return(result);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e7      	bne.n	8001738 <LL_USART_EnableIT_RXNE+0x8>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	@ 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800177c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001780:	f7ff ff50 	bl	8001624 <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001784:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001788:	f7ff ff64 	bl	8001654 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800178c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001790:	f7ff ff48 	bl	8001624 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001794:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001798:	f7ff ff5c 	bl	8001654 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800179c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80017a0:	f7ff ff40 	bl	8001624 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f7ff fde3 	bl	8001370 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80017aa:	f7ff fe05 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2200      	movs	r2, #0
 80017b2:	210f      	movs	r1, #15
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fe55 	bl	8001464 <NVIC_EncodePriority>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	f7ff fe25 	bl	8001410 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f84d 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f7ff fdc1 	bl	8001350 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80017ce:	f000 fccf 	bl	8002170 <MX_USART3_UART_Init>
  MX_UART5_Init();
 80017d2:	f000 fc05 	bl	8001fe0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80017d6:	f000 fc7b 	bl	80020d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART3);
 80017da:	481a      	ldr	r0, [pc, #104]	@ (8001844 <main+0xcc>)
 80017dc:	f7ff ffa8 	bl	8001730 <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART3);
 80017e0:	4818      	ldr	r0, [pc, #96]	@ (8001844 <main+0xcc>)
 80017e2:	f7ff ff95 	bl	8001710 <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(UART5);
 80017e6:	4818      	ldr	r0, [pc, #96]	@ (8001848 <main+0xd0>)
 80017e8:	f7ff ffa2 	bl	8001730 <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(UART5);
 80017ec:	4816      	ldr	r0, [pc, #88]	@ (8001848 <main+0xd0>)
 80017ee:	f7ff ff8f 	bl	8001710 <LL_USART_Enable>
  NVIC_SetPriority(USART3_IRQn, 0);
 80017f2:	2100      	movs	r1, #0
 80017f4:	2027      	movs	r0, #39	@ 0x27
 80017f6:	f7ff fe0b 	bl	8001410 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80017fa:	2027      	movs	r0, #39	@ 0x27
 80017fc:	f7ff fdea 	bl	80013d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(UART5_IRQn, 0);
 8001800:	2100      	movs	r1, #0
 8001802:	2035      	movs	r0, #53	@ 0x35
 8001804:	f7ff fe04 	bl	8001410 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8001808:	2035      	movs	r0, #53	@ 0x35
 800180a:	f7ff fde3 	bl	80013d4 <__NVIC_EnableIRQ>
  printf ("start\r\n");
 800180e:	480f      	ldr	r0, [pc, #60]	@ (800184c <main+0xd4>)
 8001810:	f002 fb30 	bl	8003e74 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8001814:	490e      	ldr	r1, [pc, #56]	@ (8001850 <main+0xd8>)
 8001816:	480f      	ldr	r0, [pc, #60]	@ (8001854 <main+0xdc>)
 8001818:	f000 f90e 	bl	8001a38 <loop_check_uart5>
	 if (data_ready)
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <main+0xe0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f6      	beq.n	8001814 <main+0x9c>
	  {
		LL_mDelay(5000);
 8001826:	f241 3088 	movw	r0, #5000	@ 0x1388
 800182a:	f001 fbaf 	bl	8002f8c <LL_mDelay>
		data_ready = 0;
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <main+0xe0>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
		printf("interrupt\r\n");
 8001834:	4809      	ldr	r0, [pc, #36]	@ (800185c <main+0xe4>)
 8001836:	f002 fb1d 	bl	8003e74 <puts>
	    parse_and_control((char *)rx_buffer);  // 呼叫解析與控制函數
 800183a:	4809      	ldr	r0, [pc, #36]	@ (8001860 <main+0xe8>)
 800183c:	f7ff fbf4 	bl	8001028 <parse_and_control>
	loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8001840:	e7e8      	b.n	8001814 <main+0x9c>
 8001842:	bf00      	nop
 8001844:	40004800 	.word	0x40004800
 8001848:	40005000 	.word	0x40005000
 800184c:	080061f0 	.word	0x080061f0
 8001850:	200005e2 	.word	0x200005e2
 8001854:	200005d8 	.word	0x200005d8
 8001858:	200005d4 	.word	0x200005d4
 800185c:	080061f8 	.word	0x080061f8
 8001860:	200001ec 	.word	0x200001ec

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ff0b 	bl	8001684 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800186e:	bf00      	nop
 8001870:	f7ff ff1c 	bl	80016ac <LL_FLASH_GetLatency>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1fa      	bne.n	8001870 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 800187a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800187e:	f7ff ff33 	bl	80016e8 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8001882:	f7ff ff21 	bl	80016c8 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001886:	2010      	movs	r0, #16
 8001888:	f7ff fe42 	bl	8001510 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800188c:	f7ff fe1e 	bl	80014cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001890:	bf00      	nop
 8001892:	f7ff fe2b 	bl	80014ec <LL_RCC_HSI_IsReady>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d1fa      	bne.n	8001892 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fe6f 	bl	8001580 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fe80 	bl	80015a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fe91 	bl	80015d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fe44 	bl	800153c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80018b4:	bf00      	nop
 80018b6:	f7ff fe55 	bl	8001564 <LL_RCC_GetSysClkSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1fa      	bne.n	80018b6 <SystemClock_Config+0x52>
  {

  }
  LL_Init1msTick(16000000);
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <SystemClock_Config+0x74>)
 80018c2:	f001 fb55 	bl	8002f70 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 80018c6:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <SystemClock_Config+0x74>)
 80018c8:	f001 fb86 	bl	8002fd8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fe93 	bl	80015f8 <LL_RCC_SetTIMPrescaler>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	00f42400 	.word	0x00f42400

080018dc <LL_USART_IsActiveFlag_TXE>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ec:	2b80      	cmp	r3, #128	@ 0x80
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <process_ps4_packet>:

#include "main.h"
#include "ps4_parser.h"
#include <stdio.h>

void process_ps4_packet(uint8_t *packet) {
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b09a      	sub	sp, #104	@ 0x68
 8001924:	af04      	add	r7, sp, #16
 8001926:	6078      	str	r0, [r7, #4]
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2baa      	cmp	r3, #170	@ 0xaa
 800192e:	d178      	bne.n	8001a22 <process_ps4_packet+0x102>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3308      	adds	r3, #8
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b55      	cmp	r3, #85	@ 0x55
 8001938:	d173      	bne.n	8001a22 <process_ps4_packet+0x102>

    int8_t lx = (int8_t)packet[1];
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3301      	adds	r3, #1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    int8_t ly = (int8_t)packet[2];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3302      	adds	r3, #2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    int8_t rx = (int8_t)packet[3];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3303      	adds	r3, #3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    int8_t ry = (int8_t)packet[4];
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3304      	adds	r3, #4
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint16_t buttons = packet[5] | (packet[6] << 8);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3305      	adds	r3, #5
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b21a      	sxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3306      	adds	r3, #6
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b21b      	sxth	r3, r3
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b21b      	sxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b21b      	sxth	r3, r3
 800197a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t checksum = (lx + ly + rx + ry + packet[5] + packet[6]) & 0xFF;
 800197e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8001982:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001986:	4413      	add	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800198e:	4413      	add	r3, r2
 8001990:	b2da      	uxtb	r2, r3
 8001992:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001996:	4413      	add	r3, r2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3305      	adds	r3, #5
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3306      	adds	r3, #6
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (checksum != packet[7]) return;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3307      	adds	r3, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d133      	bne.n	8001a26 <process_ps4_packet+0x106>
    char debug_msg[64];
    sprintf(debug_msg, "LX=%d LY=%d RX=%d RY=%d BTN=0x%04X\r\n", lx, ly, rx, ry, buttons);
 80019be:	f997 4053 	ldrsb.w	r4, [r7, #83]	@ 0x53
 80019c2:	f997 5052 	ldrsb.w	r5, [r7, #82]	@ 0x52
 80019c6:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 80019ca:	f997 2050 	ldrsb.w	r2, [r7, #80]	@ 0x50
 80019ce:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80019d2:	f107 000c 	add.w	r0, r7, #12
 80019d6:	9102      	str	r1, [sp, #8]
 80019d8:	9201      	str	r2, [sp, #4]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	462b      	mov	r3, r5
 80019de:	4622      	mov	r2, r4
 80019e0:	4913      	ldr	r1, [pc, #76]	@ (8001a30 <process_ps4_packet+0x110>)
 80019e2:	f002 fa4f 	bl	8003e84 <siprintf>
    for (char *p = debug_msg; *p; p++) {
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80019ec:	e014      	b.n	8001a18 <process_ps4_packet+0xf8>
        while (!LL_USART_IsActiveFlag_TXE(USART2));
 80019ee:	bf00      	nop
 80019f0:	4810      	ldr	r0, [pc, #64]	@ (8001a34 <process_ps4_packet+0x114>)
 80019f2:	f7ff ff73 	bl	80018dc <LL_USART_IsActiveFlag_TXE>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f4      	bne.n	80019f0 <process_ps4_packet+0xd0>
        LL_USART_TransmitData8(USART2, *p);
 8001a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <process_ps4_packet+0x114>)
 8001a0e:	f7ff ff78 	bl	8001902 <LL_USART_TransmitData8>
    for (char *p = debug_msg; *p; p++) {
 8001a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a14:	3301      	adds	r3, #1
 8001a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e6      	bne.n	80019ee <process_ps4_packet+0xce>
 8001a20:	e002      	b.n	8001a28 <process_ps4_packet+0x108>
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <process_ps4_packet+0x108>
    if (checksum != packet[7]) return;
 8001a26:	bf00      	nop
    }
}
 8001a28:	3758      	adds	r7, #88	@ 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08006204 	.word	0x08006204
 8001a34:	40004400 	.word	0x40004400

08001a38 <loop_check_uart5>:

void loop_check_uart5(uint8_t *rx_buffer, volatile uint8_t *packet_ready) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    if (*packet_ready) {
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <loop_check_uart5+0x2a>
        *packet_ready = 0;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
        process_ps4_packet(rx_buffer);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff5f 	bl	8001920 <process_ps4_packet>
    }
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <LL_USART_IsActiveFlag_RXNE>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_USART_IsEnabledIT_RXNE>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_USART_ReceiveData8>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	b2db      	uxtb	r3, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8001b34:	481d      	ldr	r0, [pc, #116]	@ (8001bac <USART3_IRQHandler+0x7c>)
 8001b36:	f7ff ff98 	bl	8001a6a <LL_USART_IsActiveFlag_RXNE>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d033      	beq.n	8001ba8 <USART3_IRQHandler+0x78>
 8001b40:	481a      	ldr	r0, [pc, #104]	@ (8001bac <USART3_IRQHandler+0x7c>)
 8001b42:	f7ff ffa5 	bl	8001a90 <LL_USART_IsEnabledIT_RXNE>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02d      	beq.n	8001ba8 <USART3_IRQHandler+0x78>
	  {
	    rx_data = LL_USART_ReceiveData8(USART3);
 8001b4c:	4817      	ldr	r0, [pc, #92]	@ (8001bac <USART3_IRQHandler+0x7c>)
 8001b4e:	f7ff ffb2 	bl	8001ab6 <LL_USART_ReceiveData8>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <USART3_IRQHandler+0x80>)
 8001b58:	701a      	strb	r2, [r3, #0]

	    // 檢查是否資料結束（這裡用 ! 當作結尾）
	    if (rx_data == '!' || rx_index >= RX_BUFFER_SIZE - 1)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <USART3_IRQHandler+0x80>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b21      	cmp	r3, #33	@ 0x21
 8001b62:	d006      	beq.n	8001b72 <USART3_IRQHandler+0x42>
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <USART3_IRQHandler+0x84>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d90d      	bls.n	8001b8e <USART3_IRQHandler+0x5e>
	    {
	      rx_buffer[rx_index] = '\0';  // 加上結尾字元
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <USART3_IRQHandler+0x84>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <USART3_IRQHandler+0x88>)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]
	      rx_index = 0;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <USART3_IRQHandler+0x84>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]
	      data_ready = 1;  // 設定資料完成旗標
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <USART3_IRQHandler+0x8c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
	    {
	      rx_buffer[rx_index++] = rx_data;
	    }
	  }
  /* USER CODE END USART3_IRQn 1 */
}
 8001b8c:	e00c      	b.n	8001ba8 <USART3_IRQHandler+0x78>
	      rx_buffer[rx_index++] = rx_data;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <USART3_IRQHandler+0x84>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	b291      	uxth	r1, r2
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <USART3_IRQHandler+0x84>)
 8001b9a:	8011      	strh	r1, [r2, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <USART3_IRQHandler+0x80>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <USART3_IRQHandler+0x88>)
 8001ba6:	5499      	strb	r1, [r3, r2]
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40004800 	.word	0x40004800
 8001bb0:	200001e8 	.word	0x200001e8
 8001bb4:	200001ea 	.word	0x200001ea
 8001bb8:	200001ec 	.word	0x200001ec
 8001bbc:	200005d4 	.word	0x200005d4

08001bc0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 8001bc6:	4815      	ldr	r0, [pc, #84]	@ (8001c1c <UART5_IRQHandler+0x5c>)
 8001bc8:	f7ff ff4f 	bl	8001a6a <LL_USART_IsActiveFlag_RXNE>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d015      	beq.n	8001bfe <UART5_IRQHandler+0x3e>
 8001bd2:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <UART5_IRQHandler+0x5c>)
 8001bd4:	f7ff ff5c 	bl	8001a90 <LL_USART_IsEnabledIT_RXNE>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00f      	beq.n	8001bfe <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 8001bde:	480f      	ldr	r0, [pc, #60]	@ (8001c1c <UART5_IRQHandler+0x5c>)
 8001be0:	f7ff ff69 	bl	8001ab6 <LL_USART_ReceiveData8>
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <UART5_IRQHandler+0x60>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	b2d1      	uxtb	r1, r2
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <UART5_IRQHandler+0x60>)
 8001bf4:	7011      	strb	r1, [r2, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <UART5_IRQHandler+0x64>)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <UART5_IRQHandler+0x60>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d905      	bls.n	8001c14 <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <UART5_IRQHandler+0x60>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <UART5_IRQHandler+0x68>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40005000 	.word	0x40005000
 8001c20:	200005e1 	.word	0x200005e1
 8001c24:	200005d8 	.word	0x200005d8
 8001c28:	200005e2 	.word	0x200005e2

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f002 fae1 	bl	800420c <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 faca 	bl	8002260 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f002 fa46 	bl	800420c <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20020000 	.word	0x20020000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	200005e4 	.word	0x200005e4
 8001db4:	20000738 	.word	0x20000738

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efc:	4907      	ldr	r1, [pc, #28]	@ (8001f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800

08001f20 <LL_APB1_GRP1_EnableClock>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f2c:	4907      	ldr	r1, [pc, #28]	@ (8001f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800

08001f50 <LL_USART_Enable>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_USART_ConfigAsyncMode>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	615a      	str	r2, [r3, #20]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_USART_IsActiveFlag_TC>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fac:	2b40      	cmp	r3, #64	@ 0x40
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_USART_TransmitData8>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	@ 0x38
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800200a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800200e:	f7ff ff87 	bl	8001f20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002012:	2004      	movs	r0, #4
 8002014:	f7ff ff6c 	bl	8001ef0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002018:	2008      	movs	r0, #8
 800201a:	f7ff ff69 	bl	8001ef0 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800201e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002024:	2302      	movs	r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002034:	2308      	movs	r3, #8
 8002036:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4821      	ldr	r0, [pc, #132]	@ (80020c4 <MX_UART5_Init+0xe4>)
 800203e:	f000 fa9b 	bl	8002578 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002042:	2304      	movs	r3, #4
 8002044:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002046:	2302      	movs	r3, #2
 8002048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002056:	2308      	movs	r3, #8
 8002058:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	481a      	ldr	r0, [pc, #104]	@ (80020c8 <MX_UART5_Init+0xe8>)
 8002060:	f000 fa8a 	bl	8002578 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002064:	f7ff feba 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8002068:	4603      	mov	r3, r0
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff0a 	bl	8001e88 <NVIC_EncodePriority>
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	2035      	movs	r0, #53	@ 0x35
 800207a:	f7ff fedb 	bl	8001e34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800207e:	2035      	movs	r0, #53	@ 0x35
 8002080:	f7ff feba 	bl	8001df8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002084:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002088:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002096:	230c      	movs	r3, #12
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <MX_UART5_Init+0xec>)
 80020aa:	f000 fec7 	bl	8002e3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80020ae:	4807      	ldr	r0, [pc, #28]	@ (80020cc <MX_UART5_Init+0xec>)
 80020b0:	f7ff ff5e 	bl	8001f70 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_UART5_Init+0xec>)
 80020b6:	f7ff ff4b 	bl	8001f50 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3738      	adds	r7, #56	@ 0x38
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40005000 	.word	0x40005000

080020d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	@ 0x38
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80020fa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020fe:	f7ff ff0f 	bl	8001f20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002102:	2001      	movs	r0, #1
 8002104:	f7ff fef4 	bl	8001ef0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002108:	230c      	movs	r3, #12
 800210a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800210c:	2302      	movs	r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800211c:	2307      	movs	r3, #7
 800211e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	4619      	mov	r1, r3
 8002124:	4810      	ldr	r0, [pc, #64]	@ (8002168 <MX_USART2_UART_Init+0x98>)
 8002126:	f000 fa27 	bl	8002578 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800212a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800212e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800213c:	230c      	movs	r3, #12
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	@ (800216c <MX_USART2_UART_Init+0x9c>)
 8002150:	f000 fe74 	bl	8002e3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_USART2_UART_Init+0x9c>)
 8002156:	f7ff ff0b 	bl	8001f70 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800215a:	4804      	ldr	r0, [pc, #16]	@ (800216c <MX_USART2_UART_Init+0x9c>)
 800215c:	f7ff fef8 	bl	8001f50 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	3738      	adds	r7, #56	@ 0x38
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020000 	.word	0x40020000
 800216c:	40004400 	.word	0x40004400

08002170 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	@ 0x38
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800219a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800219e:	f7ff febf 	bl	8001f20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80021a2:	2004      	movs	r0, #4
 80021a4:	f7ff fea4 	bl	8001ef0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7ff fea1 	bl	8001ef0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80021ae:	2320      	movs	r3, #32
 80021b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021c2:	2307      	movs	r3, #7
 80021c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4822      	ldr	r0, [pc, #136]	@ (8002254 <MX_USART3_UART_Init+0xe4>)
 80021cc:	f000 f9d4 	bl	8002578 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80021d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021d6:	2302      	movs	r3, #2
 80021d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021e6:	2307      	movs	r3, #7
 80021e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	481a      	ldr	r0, [pc, #104]	@ (8002258 <MX_USART3_UART_Init+0xe8>)
 80021f0:	f000 f9c2 	bl	8002578 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021f4:	f7ff fdf2 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe42 	bl	8001e88 <NVIC_EncodePriority>
 8002204:	4603      	mov	r3, r0
 8002206:	4619      	mov	r1, r3
 8002208:	2027      	movs	r0, #39	@ 0x27
 800220a:	f7ff fe13 	bl	8001e34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800220e:	2027      	movs	r0, #39	@ 0x27
 8002210:	f7ff fdf2 	bl	8001df8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002214:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002218:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002226:	230c      	movs	r3, #12
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800222e:	2300      	movs	r3, #0
 8002230:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	4808      	ldr	r0, [pc, #32]	@ (800225c <MX_USART3_UART_Init+0xec>)
 800223a:	f000 fdff 	bl	8002e3c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800223e:	4807      	ldr	r0, [pc, #28]	@ (800225c <MX_USART3_UART_Init+0xec>)
 8002240:	f7ff fe96 	bl	8001f70 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002244:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_USART3_UART_Init+0xec>)
 8002246:	f7ff fe83 	bl	8001f50 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	3738      	adds	r7, #56	@ 0x38
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40020800 	.word	0x40020800
 8002258:	40020400 	.word	0x40020400
 800225c:	40004800 	.word	0x40004800

08002260 <__io_putchar>:

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    LL_USART_TransmitData8(USART2, ch);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	@ (800228c <__io_putchar+0x2c>)
 8002270:	f7ff fea7 	bl	8001fc2 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(USART2));
 8002274:	bf00      	nop
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <__io_putchar+0x2c>)
 8002278:	f7ff fe90 	bl	8001f9c <LL_USART_IsActiveFlag_TC>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f9      	beq.n	8002276 <__io_putchar+0x16>
    return ch;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40004400 	.word	0x40004400

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002294:	f7ff fd90 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	@ (80022cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	@ (80022dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022be:	f001 ffab 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7ff fa59 	bl	8001778 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80022d4:	0800666c 	.word	0x0800666c
  ldr r2, =_sbss
 80022d8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80022dc:	20000734 	.word	0x20000734

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>

080022e2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b08b      	sub	sp, #44	@ 0x2c
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	613b      	str	r3, [r7, #16]
  return result;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2103      	movs	r1, #3
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
  return result;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	372c      	adds	r7, #44	@ 0x2c
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800238c:	b480      	push	{r7}
 800238e:	b08b      	sub	sp, #44	@ 0x2c
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	613b      	str	r3, [r7, #16]
  return result;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e003      	b.n	80023be <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2103      	movs	r1, #3
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	401a      	ands	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	61fb      	str	r3, [r7, #28]
  return result;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80023fa:	bf00      	nop
 80023fc:	372c      	adds	r7, #44	@ 0x2c
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002406:	b480      	push	{r7}
 8002408:	b08b      	sub	sp, #44	@ 0x2c
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	613b      	str	r3, [r7, #16]
  return result;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2103      	movs	r1, #3
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	61fb      	str	r3, [r7, #28]
  return result;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	60da      	str	r2, [r3, #12]
}
 8002474:	bf00      	nop
 8002476:	372c      	adds	r7, #44	@ 0x2c
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002480:	b480      	push	{r7}
 8002482:	b08b      	sub	sp, #44	@ 0x2c
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	613b      	str	r3, [r7, #16]
  return result;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e003      	b.n	80024b2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	210f      	movs	r1, #15
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	401a      	ands	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	61fb      	str	r3, [r7, #28]
  return result;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80024ee:	bf00      	nop
 80024f0:	372c      	adds	r7, #44	@ 0x2c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b08b      	sub	sp, #44	@ 0x2c
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	613b      	str	r3, [r7, #16]
  return result;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e003      	b.n	800252e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	210f      	movs	r1, #15
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61fb      	str	r3, [r7, #28]
  return result;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800256c:	bf00      	nop
 800256e:	372c      	adds	r7, #44	@ 0x2c
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	@ 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	617b      	str	r3, [r7, #20]
  return result;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <LL_GPIO_Init+0x2e>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025b0:	e057      	b.n	8002662 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	4013      	ands	r3, r2
 80025c0:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d049      	beq.n	800265c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d003      	beq.n	80025d8 <LL_GPIO_Init+0x60>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d10d      	bne.n	80025f4 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	461a      	mov	r2, r3
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fed3 	bl	800238c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff feb4 	bl	800235c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	461a      	mov	r2, r3
 80025fa:	6a39      	ldr	r1, [r7, #32]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff02 	bl	8002406 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d121      	bne.n	800264e <LL_GPIO_Init+0xd6>
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	60bb      	str	r3, [r7, #8]
  return result;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <LL_GPIO_Init+0xac>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800262c:	2b07      	cmp	r3, #7
 800262e:	d807      	bhi.n	8002640 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	461a      	mov	r2, r3
 8002636:	6a39      	ldr	r1, [r7, #32]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff21 	bl	8002480 <LL_GPIO_SetAFPin_0_7>
 800263e:	e006      	b.n	800264e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	461a      	mov	r2, r3
 8002646:	6a39      	ldr	r1, [r7, #32]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff56 	bl	80024fa <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe43 	bl	80022e2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	3301      	adds	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1a0      	bne.n	80025b2 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3728      	adds	r7, #40	@ 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <LL_RCC_GetSysClkSource>:
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <LL_RCC_GetSysClkSource+0x18>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <LL_RCC_GetAHBPrescaler>:
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <LL_RCC_GetAPB1Prescaler>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <LL_RCC_GetAPB2Prescaler>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <LL_RCC_PLL_GetMainSource+0x18>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800

08002708 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <LL_RCC_PLL_GetN+0x18>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40023800 	.word	0x40023800

08002724 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <LL_RCC_PLL_GetP+0x18>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <LL_RCC_PLL_GetR+0x18>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <LL_RCC_PLL_GetDivider+0x18>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002780:	f000 f820 	bl	80027c4 <RCC_GetSystemClockFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f85c 	bl	800284c <RCC_GetHCLKClockFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f86a 	bl	8002878 <RCC_GetPCLK1ClockFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f876 	bl	80028a0 <RCC_GetPCLK2ClockFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60da      	str	r2, [r3, #12]
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80027ce:	f7ff ff55 	bl	800267c <LL_RCC_GetSysClkSource>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d82d      	bhi.n	8002834 <RCC_GetSystemClockFreq+0x70>
 80027d8:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <RCC_GetSystemClockFreq+0x1c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002815 	.word	0x08002815
 80027e4:	08002835 	.word	0x08002835
 80027e8:	08002835 	.word	0x08002835
 80027ec:	08002835 	.word	0x08002835
 80027f0:	0800281b 	.word	0x0800281b
 80027f4:	08002835 	.word	0x08002835
 80027f8:	08002835 	.word	0x08002835
 80027fc:	08002835 	.word	0x08002835
 8002800:	08002821 	.word	0x08002821
 8002804:	08002835 	.word	0x08002835
 8002808:	08002835 	.word	0x08002835
 800280c:	08002835 	.word	0x08002835
 8002810:	0800282b 	.word	0x0800282b
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <RCC_GetSystemClockFreq+0x80>)
 8002816:	607b      	str	r3, [r7, #4]
      break;
 8002818:	e00f      	b.n	800283a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <RCC_GetSystemClockFreq+0x84>)
 800281c:	607b      	str	r3, [r7, #4]
      break;
 800281e:	e00c      	b.n	800283a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002820:	2008      	movs	r0, #8
 8002822:	f000 f851 	bl	80028c8 <RCC_PLL_GetFreqDomain_SYS>
 8002826:	6078      	str	r0, [r7, #4]
      break;
 8002828:	e007      	b.n	800283a <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800282a:	200c      	movs	r0, #12
 800282c:	f000 f84c 	bl	80028c8 <RCC_PLL_GetFreqDomain_SYS>
 8002830:	6078      	str	r0, [r7, #4]
      break;
 8002832:	e002      	b.n	800283a <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <RCC_GetSystemClockFreq+0x80>)
 8002836:	607b      	str	r3, [r7, #4]
      break;
 8002838:	bf00      	nop
  }

  return frequency;
 800283a:	687b      	ldr	r3, [r7, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00f42400 	.word	0x00f42400
 8002848:	017d7840 	.word	0x017d7840

0800284c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002854:	f7ff ff20 	bl	8002698 <LL_RCC_GetAHBPrescaler>
 8002858:	4603      	mov	r3, r0
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <RCC_GetHCLKClockFreq+0x28>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	40d3      	lsrs	r3, r2
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	0800622c 	.word	0x0800622c

08002878 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002880:	f7ff ff18 	bl	80026b4 <LL_RCC_GetAPB1Prescaler>
 8002884:	4603      	mov	r3, r0
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <RCC_GetPCLK1ClockFreq+0x24>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	40d3      	lsrs	r3, r2
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	0800623c 	.word	0x0800623c

080028a0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80028a8:	f7ff ff12 	bl	80026d0 <LL_RCC_GetAPB2Prescaler>
 80028ac:	4603      	mov	r3, r0
 80028ae:	0b5b      	lsrs	r3, r3, #13
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <RCC_GetPCLK2ClockFreq+0x24>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	461a      	mov	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	40d3      	lsrs	r3, r2
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	0800623c 	.word	0x0800623c

080028c8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80028dc:	f7ff ff06 	bl	80026ec <LL_RCC_PLL_GetMainSource>
 80028e0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ee:	d003      	beq.n	80028f8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80028f0:	e005      	b.n	80028fe <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80028f4:	617b      	str	r3, [r7, #20]
      break;
 80028f6:	e005      	b.n	8002904 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80028fa:	617b      	str	r3, [r7, #20]
      break;
 80028fc:	e002      	b.n	8002904 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002900:	617b      	str	r3, [r7, #20]
      break;
 8002902:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d114      	bne.n	8002934 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800290a:	f7ff ff27 	bl	800275c <LL_RCC_PLL_GetDivider>
 800290e:	4602      	mov	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fbb3 f4f2 	udiv	r4, r3, r2
 8002916:	f7ff fef7 	bl	8002708 <LL_RCC_PLL_GetN>
 800291a:	4603      	mov	r3, r0
 800291c:	fb03 f404 	mul.w	r4, r3, r4
 8002920:	f7ff ff00 	bl	8002724 <LL_RCC_PLL_GetP>
 8002924:	4603      	mov	r3, r0
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	3301      	adds	r3, #1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e011      	b.n	8002958 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002934:	f7ff ff12 	bl	800275c <LL_RCC_PLL_GetDivider>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fbb3 f4f2 	udiv	r4, r3, r2
 8002940:	f7ff fee2 	bl	8002708 <LL_RCC_PLL_GetN>
 8002944:	4603      	mov	r3, r0
 8002946:	fb03 f404 	mul.w	r4, r3, r4
 800294a:	f7ff fef9 	bl	8002740 <LL_RCC_PLL_GetR>
 800294e:	4603      	mov	r3, r0
 8002950:	0f1b      	lsrs	r3, r3, #28
 8002952:	fbb4 f3f3 	udiv	r3, r4, r3
 8002956:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002958:	693b      	ldr	r3, [r7, #16]
}
 800295a:	4618      	mov	r0, r3
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	00f42400 	.word	0x00f42400
 8002968:	017d7840 	.word	0x017d7840

0800296c <LL_USART_IsEnabled>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_USART_SetStopBitsLength>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_USART_SetHWFlowCtrl>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	615a      	str	r2, [r3, #20]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_USART_SetBaudRate>:
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b0c0      	sub	sp, #256	@ 0x100
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029ec:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80029f0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80029f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a00:	f040 810c 	bne.w	8002c1c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002a04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	1891      	adds	r1, r2, r2
 8002a1c:	6639      	str	r1, [r7, #96]	@ 0x60
 8002a1e:	415b      	adcs	r3, r3
 8002a20:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002a26:	4621      	mov	r1, r4
 8002a28:	eb12 0801 	adds.w	r8, r2, r1
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	eb43 0901 	adc.w	r9, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb18 0303 	adds.w	r3, r8, r3
 8002a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a54:	462b      	mov	r3, r5
 8002a56:	eb49 0303 	adc.w	r3, r9, r3
 8002a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002a62:	2200      	movs	r2, #0
 8002a64:	469a      	mov	sl, r3
 8002a66:	4693      	mov	fp, r2
 8002a68:	eb1a 030a 	adds.w	r3, sl, sl
 8002a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a6e:	eb4b 030b 	adc.w	r3, fp, fp
 8002a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a7c:	f7fe f906 	bl	8000c8c <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b64      	ldr	r3, [pc, #400]	@ (8002c18 <LL_USART_SetBaudRate+0x238>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	b29c      	uxth	r4, r3
 8002a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a9c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002aa0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	1891      	adds	r1, r2, r2
 8002aaa:	6539      	str	r1, [r7, #80]	@ 0x50
 8002aac:	415b      	adcs	r3, r3
 8002aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	1851      	adds	r1, r2, r1
 8002ab8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002aba:	4649      	mov	r1, r9
 8002abc:	414b      	adcs	r3, r1
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002acc:	4659      	mov	r1, fp
 8002ace:	00cb      	lsls	r3, r1, #3
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	00ca      	lsls	r2, r1, #3
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ae8:	464b      	mov	r3, r9
 8002aea:	460a      	mov	r2, r1
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002af4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002afe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002b02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b06:	460b      	mov	r3, r1
 8002b08:	18db      	adds	r3, r3, r3
 8002b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b18:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002b1c:	f7fe f8b6 	bl	8000c8c <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4611      	mov	r1, r2
 8002b26:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <LL_USART_SetBaudRate+0x238>)
 8002b28:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	2264      	movs	r2, #100	@ 0x64
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	1acb      	subs	r3, r1, r3
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b3c:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <LL_USART_SetBaudRate+0x238>)
 8002b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4423      	add	r3, r4
 8002b52:	b29c      	uxth	r4, r3
 8002b54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b5e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b62:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b76:	4641      	mov	r1, r8
 8002b78:	1851      	adds	r1, r2, r1
 8002b7a:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	414b      	adcs	r3, r1
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b8e:	4659      	mov	r1, fp
 8002b90:	00cb      	lsls	r3, r1, #3
 8002b92:	4651      	mov	r1, sl
 8002b94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b98:	4651      	mov	r1, sl
 8002b9a:	00ca      	lsls	r2, r1, #3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4642      	mov	r2, r8
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002baa:	464b      	mov	r3, r9
 8002bac:	460a      	mov	r2, r1
 8002bae:	eb42 0303 	adc.w	r3, r2, r3
 8002bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002bb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bc0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002bc4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bda:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002bde:	f7fe f855 	bl	8000c8c <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <LL_USART_SetBaudRate+0x238>)
 8002be8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	2164      	movs	r1, #100	@ 0x64
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	3332      	adds	r3, #50	@ 0x32
 8002bfa:	4a07      	ldr	r2, [pc, #28]	@ (8002c18 <LL_USART_SetBaudRate+0x238>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4423      	add	r3, r4
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c14:	609a      	str	r2, [r3, #8]
}
 8002c16:	e108      	b.n	8002e2a <LL_USART_SetBaudRate+0x44a>
 8002c18:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c26:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c2a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8002c2e:	4642      	mov	r2, r8
 8002c30:	464b      	mov	r3, r9
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	6239      	str	r1, [r7, #32]
 8002c36:	415b      	adcs	r3, r3
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3e:	4641      	mov	r1, r8
 8002c40:	1854      	adds	r4, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb43 0501 	adc.w	r5, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	00eb      	lsls	r3, r5, #3
 8002c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c56:	00e2      	lsls	r2, r4, #3
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	18e3      	adds	r3, r4, r3
 8002c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c64:	464b      	mov	r3, r9
 8002c66:	eb45 0303 	adc.w	r3, r5, r3
 8002c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002c6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002c88:	4629      	mov	r1, r5
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4621      	mov	r1, r4
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002c9a:	f7fd fff7 	bl	8000c8c <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b65      	ldr	r3, [pc, #404]	@ (8002e38 <LL_USART_SetBaudRate+0x458>)
 8002ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	b29c      	uxth	r4, r3
 8002cb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cbe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002cc2:	4642      	mov	r2, r8
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	1891      	adds	r1, r2, r2
 8002cc8:	61b9      	str	r1, [r7, #24]
 8002cca:	415b      	adcs	r3, r3
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	1851      	adds	r1, r2, r1
 8002cd6:	6139      	str	r1, [r7, #16]
 8002cd8:	4649      	mov	r1, r9
 8002cda:	414b      	adcs	r3, r1
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cea:	4659      	mov	r1, fp
 8002cec:	00cb      	lsls	r3, r1, #3
 8002cee:	4651      	mov	r1, sl
 8002cf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	00ca      	lsls	r2, r1, #3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4642      	mov	r2, r8
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d06:	464b      	mov	r3, r9
 8002d08:	460a      	mov	r2, r1
 8002d0a:	eb42 0303 	adc.w	r3, r2, r3
 8002d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	008b      	lsls	r3, r1, #2
 8002d30:	4641      	mov	r1, r8
 8002d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d36:	4641      	mov	r1, r8
 8002d38:	008a      	lsls	r2, r1, #2
 8002d3a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002d3e:	f7fd ffa5 	bl	8000c8c <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <LL_USART_SetBaudRate+0x458>)
 8002d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2264      	movs	r2, #100	@ 0x64
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	1acb      	subs	r3, r1, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	@ 0x32
 8002d5c:	4a36      	ldr	r2, [pc, #216]	@ (8002e38 <LL_USART_SetBaudRate+0x458>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4423      	add	r3, r4
 8002d6e:	b29c      	uxth	r4, r3
 8002d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d74:	2200      	movs	r2, #0
 8002d76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d78:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d7a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d7e:	4642      	mov	r2, r8
 8002d80:	464b      	mov	r3, r9
 8002d82:	1891      	adds	r1, r2, r2
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	415b      	adcs	r3, r3
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8e:	4641      	mov	r1, r8
 8002d90:	1851      	adds	r1, r2, r1
 8002d92:	6039      	str	r1, [r7, #0]
 8002d94:	4649      	mov	r1, r9
 8002d96:	414b      	adcs	r3, r1
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da6:	4659      	mov	r1, fp
 8002da8:	00cb      	lsls	r3, r1, #3
 8002daa:	4651      	mov	r1, sl
 8002dac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db0:	4651      	mov	r1, sl
 8002db2:	00ca      	lsls	r2, r1, #3
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	4603      	mov	r3, r0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8002de0:	4649      	mov	r1, r9
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	4641      	mov	r1, r8
 8002de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dea:	4641      	mov	r1, r8
 8002dec:	008a      	lsls	r2, r1, #2
 8002dee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002df2:	f7fd ff4b 	bl	8000c8c <__aeabi_uldivmod>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <LL_USART_SetBaudRate+0x458>)
 8002dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	2164      	movs	r1, #100	@ 0x64
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	3332      	adds	r3, #50	@ 0x32
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <LL_USART_SetBaudRate+0x458>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4423      	add	r3, r4
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e36:	bf00      	nop
 8002e38:	51eb851f 	.word	0x51eb851f

08002e3c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fd8c 	bl	800296c <LL_USART_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d15e      	bne.n	8002f18 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002e62:	f023 030c 	bic.w	r3, r3, #12
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6851      	ldr	r1, [r2, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6912      	ldr	r2, [r2, #16]
 8002e74:	4311      	orrs	r1, r2
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6992      	ldr	r2, [r2, #24]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fd83 	bl	8002994 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fd90 	bl	80029ba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fc6a 	bl	8002778 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <LL_USART_Init+0xe8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d102      	bne.n	8002eb2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e021      	b.n	8002ef6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <LL_USART_Init+0xec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d102      	bne.n	8002ec0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e01a      	b.n	8002ef6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <LL_USART_Init+0xf0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	e013      	b.n	8002ef6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <LL_USART_Init+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d102      	bne.n	8002edc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e00c      	b.n	8002ef6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a15      	ldr	r2, [pc, #84]	@ (8002f34 <LL_USART_Init+0xf8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d102      	bne.n	8002eea <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e005      	b.n	8002ef6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <LL_USART_Init+0xfc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002f04:	2300      	movs	r3, #0
 8002f06:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fd64 	bl	80029e0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40004400 	.word	0x40004400
 8002f2c:	40004800 	.word	0x40004800
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40004c00 	.word	0x40004c00
 8002f38:	40005000 	.word	0x40005000

08002f3c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <LL_InitTick+0x30>)
 8002f50:	3b01      	subs	r3, #1
 8002f52:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <LL_InitTick+0x30>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5a:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <LL_InitTick+0x30>)
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002f78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ffdd 	bl	8002f3c <LL_InitTick>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <LL_mDelay+0x48>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f9a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d00c      	beq.n	8002fbe <LL_mDelay+0x32>
  {
    Delay++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002faa:	e008      	b.n	8002fbe <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <LL_mDelay+0x48>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <LL_mDelay+0x32>
    {
      Delay--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f3      	bne.n	8002fac <LL_mDelay+0x20>
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002fe0:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <LL_SetSystemCoreClock+0x1c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <atof>:
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f000 be05 	b.w	8003c08 <strtod>

08002ffe <sulp>:
 8002ffe:	b570      	push	{r4, r5, r6, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	460d      	mov	r5, r1
 8003004:	ec45 4b10 	vmov	d0, r4, r5
 8003008:	4616      	mov	r6, r2
 800300a:	f002 f923 	bl	8005254 <__ulp>
 800300e:	ec51 0b10 	vmov	r0, r1, d0
 8003012:	b17e      	cbz	r6, 8003034 <sulp+0x36>
 8003014:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800301c:	2b00      	cmp	r3, #0
 800301e:	dd09      	ble.n	8003034 <sulp+0x36>
 8003020:	051b      	lsls	r3, r3, #20
 8003022:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003026:	2400      	movs	r4, #0
 8003028:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800302c:	4622      	mov	r2, r4
 800302e:	462b      	mov	r3, r5
 8003030:	f7fd fafa 	bl	8000628 <__aeabi_dmul>
 8003034:	ec41 0b10 	vmov	d0, r0, r1
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	0000      	movs	r0, r0
 800303c:	0000      	movs	r0, r0
	...

08003040 <_strtod_l>:
 8003040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003044:	b09f      	sub	sp, #124	@ 0x7c
 8003046:	460c      	mov	r4, r1
 8003048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800304a:	2200      	movs	r2, #0
 800304c:	921a      	str	r2, [sp, #104]	@ 0x68
 800304e:	9005      	str	r0, [sp, #20]
 8003050:	f04f 0a00 	mov.w	sl, #0
 8003054:	f04f 0b00 	mov.w	fp, #0
 8003058:	460a      	mov	r2, r1
 800305a:	9219      	str	r2, [sp, #100]	@ 0x64
 800305c:	7811      	ldrb	r1, [r2, #0]
 800305e:	292b      	cmp	r1, #43	@ 0x2b
 8003060:	d04a      	beq.n	80030f8 <_strtod_l+0xb8>
 8003062:	d838      	bhi.n	80030d6 <_strtod_l+0x96>
 8003064:	290d      	cmp	r1, #13
 8003066:	d832      	bhi.n	80030ce <_strtod_l+0x8e>
 8003068:	2908      	cmp	r1, #8
 800306a:	d832      	bhi.n	80030d2 <_strtod_l+0x92>
 800306c:	2900      	cmp	r1, #0
 800306e:	d03b      	beq.n	80030e8 <_strtod_l+0xa8>
 8003070:	2200      	movs	r2, #0
 8003072:	920e      	str	r2, [sp, #56]	@ 0x38
 8003074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003076:	782a      	ldrb	r2, [r5, #0]
 8003078:	2a30      	cmp	r2, #48	@ 0x30
 800307a:	f040 80b2 	bne.w	80031e2 <_strtod_l+0x1a2>
 800307e:	786a      	ldrb	r2, [r5, #1]
 8003080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003084:	2a58      	cmp	r2, #88	@ 0x58
 8003086:	d16e      	bne.n	8003166 <_strtod_l+0x126>
 8003088:	9302      	str	r3, [sp, #8]
 800308a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	ab1a      	add	r3, sp, #104	@ 0x68
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4a8f      	ldr	r2, [pc, #572]	@ (80032d0 <_strtod_l+0x290>)
 8003094:	9805      	ldr	r0, [sp, #20]
 8003096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003098:	a919      	add	r1, sp, #100	@ 0x64
 800309a:	f001 f9d5 	bl	8004448 <__gethex>
 800309e:	f010 060f 	ands.w	r6, r0, #15
 80030a2:	4604      	mov	r4, r0
 80030a4:	d005      	beq.n	80030b2 <_strtod_l+0x72>
 80030a6:	2e06      	cmp	r6, #6
 80030a8:	d128      	bne.n	80030fc <_strtod_l+0xbc>
 80030aa:	3501      	adds	r5, #1
 80030ac:	2300      	movs	r3, #0
 80030ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80030b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80030b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 858e 	bne.w	8003bd6 <_strtod_l+0xb96>
 80030ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80030bc:	b1cb      	cbz	r3, 80030f2 <_strtod_l+0xb2>
 80030be:	4652      	mov	r2, sl
 80030c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80030c4:	ec43 2b10 	vmov	d0, r2, r3
 80030c8:	b01f      	add	sp, #124	@ 0x7c
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ce:	2920      	cmp	r1, #32
 80030d0:	d1ce      	bne.n	8003070 <_strtod_l+0x30>
 80030d2:	3201      	adds	r2, #1
 80030d4:	e7c1      	b.n	800305a <_strtod_l+0x1a>
 80030d6:	292d      	cmp	r1, #45	@ 0x2d
 80030d8:	d1ca      	bne.n	8003070 <_strtod_l+0x30>
 80030da:	2101      	movs	r1, #1
 80030dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80030de:	1c51      	adds	r1, r2, #1
 80030e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80030e2:	7852      	ldrb	r2, [r2, #1]
 80030e4:	2a00      	cmp	r2, #0
 80030e6:	d1c5      	bne.n	8003074 <_strtod_l+0x34>
 80030e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80030ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 8570 	bne.w	8003bd2 <_strtod_l+0xb92>
 80030f2:	4652      	mov	r2, sl
 80030f4:	465b      	mov	r3, fp
 80030f6:	e7e5      	b.n	80030c4 <_strtod_l+0x84>
 80030f8:	2100      	movs	r1, #0
 80030fa:	e7ef      	b.n	80030dc <_strtod_l+0x9c>
 80030fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80030fe:	b13a      	cbz	r2, 8003110 <_strtod_l+0xd0>
 8003100:	2135      	movs	r1, #53	@ 0x35
 8003102:	a81c      	add	r0, sp, #112	@ 0x70
 8003104:	f002 f9a0 	bl	8005448 <__copybits>
 8003108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800310a:	9805      	ldr	r0, [sp, #20]
 800310c:	f001 fd76 	bl	8004bfc <_Bfree>
 8003110:	3e01      	subs	r6, #1
 8003112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003114:	2e04      	cmp	r6, #4
 8003116:	d806      	bhi.n	8003126 <_strtod_l+0xe6>
 8003118:	e8df f006 	tbb	[pc, r6]
 800311c:	201d0314 	.word	0x201d0314
 8003120:	14          	.byte	0x14
 8003121:	00          	.byte	0x00
 8003122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8003126:	05e1      	lsls	r1, r4, #23
 8003128:	bf48      	it	mi
 800312a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800312e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003132:	0d1b      	lsrs	r3, r3, #20
 8003134:	051b      	lsls	r3, r3, #20
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1bb      	bne.n	80030b2 <_strtod_l+0x72>
 800313a:	f001 f867 	bl	800420c <__errno>
 800313e:	2322      	movs	r3, #34	@ 0x22
 8003140:	6003      	str	r3, [r0, #0]
 8003142:	e7b6      	b.n	80030b2 <_strtod_l+0x72>
 8003144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8003148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800314c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003154:	e7e7      	b.n	8003126 <_strtod_l+0xe6>
 8003156:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80032d8 <_strtod_l+0x298>
 800315a:	e7e4      	b.n	8003126 <_strtod_l+0xe6>
 800315c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8003160:	f04f 3aff 	mov.w	sl, #4294967295
 8003164:	e7df      	b.n	8003126 <_strtod_l+0xe6>
 8003166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	9219      	str	r2, [sp, #100]	@ 0x64
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b30      	cmp	r3, #48	@ 0x30
 8003170:	d0f9      	beq.n	8003166 <_strtod_l+0x126>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d09d      	beq.n	80030b2 <_strtod_l+0x72>
 8003176:	2301      	movs	r3, #1
 8003178:	2700      	movs	r7, #0
 800317a:	9308      	str	r3, [sp, #32]
 800317c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800317e:	930c      	str	r3, [sp, #48]	@ 0x30
 8003180:	970b      	str	r7, [sp, #44]	@ 0x2c
 8003182:	46b9      	mov	r9, r7
 8003184:	220a      	movs	r2, #10
 8003186:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8003188:	7805      	ldrb	r5, [r0, #0]
 800318a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800318e:	b2d9      	uxtb	r1, r3
 8003190:	2909      	cmp	r1, #9
 8003192:	d928      	bls.n	80031e6 <_strtod_l+0x1a6>
 8003194:	494f      	ldr	r1, [pc, #316]	@ (80032d4 <_strtod_l+0x294>)
 8003196:	2201      	movs	r2, #1
 8003198:	f000 ff83 	bl	80040a2 <strncmp>
 800319c:	2800      	cmp	r0, #0
 800319e:	d032      	beq.n	8003206 <_strtod_l+0x1c6>
 80031a0:	2000      	movs	r0, #0
 80031a2:	462a      	mov	r2, r5
 80031a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80031a6:	464d      	mov	r5, r9
 80031a8:	4603      	mov	r3, r0
 80031aa:	2a65      	cmp	r2, #101	@ 0x65
 80031ac:	d001      	beq.n	80031b2 <_strtod_l+0x172>
 80031ae:	2a45      	cmp	r2, #69	@ 0x45
 80031b0:	d114      	bne.n	80031dc <_strtod_l+0x19c>
 80031b2:	b91d      	cbnz	r5, 80031bc <_strtod_l+0x17c>
 80031b4:	9a08      	ldr	r2, [sp, #32]
 80031b6:	4302      	orrs	r2, r0
 80031b8:	d096      	beq.n	80030e8 <_strtod_l+0xa8>
 80031ba:	2500      	movs	r5, #0
 80031bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80031be:	1c62      	adds	r2, r4, #1
 80031c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80031c2:	7862      	ldrb	r2, [r4, #1]
 80031c4:	2a2b      	cmp	r2, #43	@ 0x2b
 80031c6:	d07a      	beq.n	80032be <_strtod_l+0x27e>
 80031c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80031ca:	d07e      	beq.n	80032ca <_strtod_l+0x28a>
 80031cc:	f04f 0c00 	mov.w	ip, #0
 80031d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80031d4:	2909      	cmp	r1, #9
 80031d6:	f240 8085 	bls.w	80032e4 <_strtod_l+0x2a4>
 80031da:	9419      	str	r4, [sp, #100]	@ 0x64
 80031dc:	f04f 0800 	mov.w	r8, #0
 80031e0:	e0a5      	b.n	800332e <_strtod_l+0x2ee>
 80031e2:	2300      	movs	r3, #0
 80031e4:	e7c8      	b.n	8003178 <_strtod_l+0x138>
 80031e6:	f1b9 0f08 	cmp.w	r9, #8
 80031ea:	bfd8      	it	le
 80031ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80031ee:	f100 0001 	add.w	r0, r0, #1
 80031f2:	bfda      	itte	le
 80031f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80031f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80031fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80031fe:	f109 0901 	add.w	r9, r9, #1
 8003202:	9019      	str	r0, [sp, #100]	@ 0x64
 8003204:	e7bf      	b.n	8003186 <_strtod_l+0x146>
 8003206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	9219      	str	r2, [sp, #100]	@ 0x64
 800320c:	785a      	ldrb	r2, [r3, #1]
 800320e:	f1b9 0f00 	cmp.w	r9, #0
 8003212:	d03b      	beq.n	800328c <_strtod_l+0x24c>
 8003214:	900a      	str	r0, [sp, #40]	@ 0x28
 8003216:	464d      	mov	r5, r9
 8003218:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800321c:	2b09      	cmp	r3, #9
 800321e:	d912      	bls.n	8003246 <_strtod_l+0x206>
 8003220:	2301      	movs	r3, #1
 8003222:	e7c2      	b.n	80031aa <_strtod_l+0x16a>
 8003224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	9219      	str	r2, [sp, #100]	@ 0x64
 800322a:	785a      	ldrb	r2, [r3, #1]
 800322c:	3001      	adds	r0, #1
 800322e:	2a30      	cmp	r2, #48	@ 0x30
 8003230:	d0f8      	beq.n	8003224 <_strtod_l+0x1e4>
 8003232:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8003236:	2b08      	cmp	r3, #8
 8003238:	f200 84d2 	bhi.w	8003be0 <_strtod_l+0xba0>
 800323c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800323e:	900a      	str	r0, [sp, #40]	@ 0x28
 8003240:	2000      	movs	r0, #0
 8003242:	930c      	str	r3, [sp, #48]	@ 0x30
 8003244:	4605      	mov	r5, r0
 8003246:	3a30      	subs	r2, #48	@ 0x30
 8003248:	f100 0301 	add.w	r3, r0, #1
 800324c:	d018      	beq.n	8003280 <_strtod_l+0x240>
 800324e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003250:	4419      	add	r1, r3
 8003252:	910a      	str	r1, [sp, #40]	@ 0x28
 8003254:	462e      	mov	r6, r5
 8003256:	f04f 0e0a 	mov.w	lr, #10
 800325a:	1c71      	adds	r1, r6, #1
 800325c:	eba1 0c05 	sub.w	ip, r1, r5
 8003260:	4563      	cmp	r3, ip
 8003262:	dc15      	bgt.n	8003290 <_strtod_l+0x250>
 8003264:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003268:	182b      	adds	r3, r5, r0
 800326a:	2b08      	cmp	r3, #8
 800326c:	f105 0501 	add.w	r5, r5, #1
 8003270:	4405      	add	r5, r0
 8003272:	dc1a      	bgt.n	80032aa <_strtod_l+0x26a>
 8003274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003276:	230a      	movs	r3, #10
 8003278:	fb03 2301 	mla	r3, r3, r1, r2
 800327c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800327e:	2300      	movs	r3, #0
 8003280:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003282:	1c51      	adds	r1, r2, #1
 8003284:	9119      	str	r1, [sp, #100]	@ 0x64
 8003286:	7852      	ldrb	r2, [r2, #1]
 8003288:	4618      	mov	r0, r3
 800328a:	e7c5      	b.n	8003218 <_strtod_l+0x1d8>
 800328c:	4648      	mov	r0, r9
 800328e:	e7ce      	b.n	800322e <_strtod_l+0x1ee>
 8003290:	2e08      	cmp	r6, #8
 8003292:	dc05      	bgt.n	80032a0 <_strtod_l+0x260>
 8003294:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8003296:	fb0e f606 	mul.w	r6, lr, r6
 800329a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800329c:	460e      	mov	r6, r1
 800329e:	e7dc      	b.n	800325a <_strtod_l+0x21a>
 80032a0:	2910      	cmp	r1, #16
 80032a2:	bfd8      	it	le
 80032a4:	fb0e f707 	mulle.w	r7, lr, r7
 80032a8:	e7f8      	b.n	800329c <_strtod_l+0x25c>
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	bfdc      	itt	le
 80032ae:	230a      	movle	r3, #10
 80032b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80032b4:	e7e3      	b.n	800327e <_strtod_l+0x23e>
 80032b6:	2300      	movs	r3, #0
 80032b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80032ba:	2301      	movs	r3, #1
 80032bc:	e77a      	b.n	80031b4 <_strtod_l+0x174>
 80032be:	f04f 0c00 	mov.w	ip, #0
 80032c2:	1ca2      	adds	r2, r4, #2
 80032c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80032c6:	78a2      	ldrb	r2, [r4, #2]
 80032c8:	e782      	b.n	80031d0 <_strtod_l+0x190>
 80032ca:	f04f 0c01 	mov.w	ip, #1
 80032ce:	e7f8      	b.n	80032c2 <_strtod_l+0x282>
 80032d0:	08006418 	.word	0x08006418
 80032d4:	08006244 	.word	0x08006244
 80032d8:	7ff00000 	.word	0x7ff00000
 80032dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80032de:	1c51      	adds	r1, r2, #1
 80032e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80032e2:	7852      	ldrb	r2, [r2, #1]
 80032e4:	2a30      	cmp	r2, #48	@ 0x30
 80032e6:	d0f9      	beq.n	80032dc <_strtod_l+0x29c>
 80032e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80032ec:	2908      	cmp	r1, #8
 80032ee:	f63f af75 	bhi.w	80031dc <_strtod_l+0x19c>
 80032f2:	3a30      	subs	r2, #48	@ 0x30
 80032f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80032f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80032f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80032fa:	f04f 080a 	mov.w	r8, #10
 80032fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003300:	1c56      	adds	r6, r2, #1
 8003302:	9619      	str	r6, [sp, #100]	@ 0x64
 8003304:	7852      	ldrb	r2, [r2, #1]
 8003306:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800330a:	f1be 0f09 	cmp.w	lr, #9
 800330e:	d939      	bls.n	8003384 <_strtod_l+0x344>
 8003310:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003312:	1a76      	subs	r6, r6, r1
 8003314:	2e08      	cmp	r6, #8
 8003316:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800331a:	dc03      	bgt.n	8003324 <_strtod_l+0x2e4>
 800331c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800331e:	4588      	cmp	r8, r1
 8003320:	bfa8      	it	ge
 8003322:	4688      	movge	r8, r1
 8003324:	f1bc 0f00 	cmp.w	ip, #0
 8003328:	d001      	beq.n	800332e <_strtod_l+0x2ee>
 800332a:	f1c8 0800 	rsb	r8, r8, #0
 800332e:	2d00      	cmp	r5, #0
 8003330:	d14e      	bne.n	80033d0 <_strtod_l+0x390>
 8003332:	9908      	ldr	r1, [sp, #32]
 8003334:	4308      	orrs	r0, r1
 8003336:	f47f aebc 	bne.w	80030b2 <_strtod_l+0x72>
 800333a:	2b00      	cmp	r3, #0
 800333c:	f47f aed4 	bne.w	80030e8 <_strtod_l+0xa8>
 8003340:	2a69      	cmp	r2, #105	@ 0x69
 8003342:	d028      	beq.n	8003396 <_strtod_l+0x356>
 8003344:	dc25      	bgt.n	8003392 <_strtod_l+0x352>
 8003346:	2a49      	cmp	r2, #73	@ 0x49
 8003348:	d025      	beq.n	8003396 <_strtod_l+0x356>
 800334a:	2a4e      	cmp	r2, #78	@ 0x4e
 800334c:	f47f aecc 	bne.w	80030e8 <_strtod_l+0xa8>
 8003350:	499a      	ldr	r1, [pc, #616]	@ (80035bc <_strtod_l+0x57c>)
 8003352:	a819      	add	r0, sp, #100	@ 0x64
 8003354:	f001 fa9a 	bl	800488c <__match>
 8003358:	2800      	cmp	r0, #0
 800335a:	f43f aec5 	beq.w	80030e8 <_strtod_l+0xa8>
 800335e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b28      	cmp	r3, #40	@ 0x28
 8003364:	d12e      	bne.n	80033c4 <_strtod_l+0x384>
 8003366:	4996      	ldr	r1, [pc, #600]	@ (80035c0 <_strtod_l+0x580>)
 8003368:	aa1c      	add	r2, sp, #112	@ 0x70
 800336a:	a819      	add	r0, sp, #100	@ 0x64
 800336c:	f001 faa2 	bl	80048b4 <__hexnan>
 8003370:	2805      	cmp	r0, #5
 8003372:	d127      	bne.n	80033c4 <_strtod_l+0x384>
 8003374:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003376:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800337a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800337e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8003382:	e696      	b.n	80030b2 <_strtod_l+0x72>
 8003384:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003386:	fb08 2101 	mla	r1, r8, r1, r2
 800338a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800338e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003390:	e7b5      	b.n	80032fe <_strtod_l+0x2be>
 8003392:	2a6e      	cmp	r2, #110	@ 0x6e
 8003394:	e7da      	b.n	800334c <_strtod_l+0x30c>
 8003396:	498b      	ldr	r1, [pc, #556]	@ (80035c4 <_strtod_l+0x584>)
 8003398:	a819      	add	r0, sp, #100	@ 0x64
 800339a:	f001 fa77 	bl	800488c <__match>
 800339e:	2800      	cmp	r0, #0
 80033a0:	f43f aea2 	beq.w	80030e8 <_strtod_l+0xa8>
 80033a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80033a6:	4988      	ldr	r1, [pc, #544]	@ (80035c8 <_strtod_l+0x588>)
 80033a8:	3b01      	subs	r3, #1
 80033aa:	a819      	add	r0, sp, #100	@ 0x64
 80033ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80033ae:	f001 fa6d 	bl	800488c <__match>
 80033b2:	b910      	cbnz	r0, 80033ba <_strtod_l+0x37a>
 80033b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80033b6:	3301      	adds	r3, #1
 80033b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80033ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80035d8 <_strtod_l+0x598>
 80033be:	f04f 0a00 	mov.w	sl, #0
 80033c2:	e676      	b.n	80030b2 <_strtod_l+0x72>
 80033c4:	4881      	ldr	r0, [pc, #516]	@ (80035cc <_strtod_l+0x58c>)
 80033c6:	f000 ff67 	bl	8004298 <nan>
 80033ca:	ec5b ab10 	vmov	sl, fp, d0
 80033ce:	e670      	b.n	80030b2 <_strtod_l+0x72>
 80033d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80033d4:	eba8 0303 	sub.w	r3, r8, r3
 80033d8:	f1b9 0f00 	cmp.w	r9, #0
 80033dc:	bf08      	it	eq
 80033de:	46a9      	moveq	r9, r5
 80033e0:	2d10      	cmp	r5, #16
 80033e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80033e4:	462c      	mov	r4, r5
 80033e6:	bfa8      	it	ge
 80033e8:	2410      	movge	r4, #16
 80033ea:	f7fd f8a3 	bl	8000534 <__aeabi_ui2d>
 80033ee:	2d09      	cmp	r5, #9
 80033f0:	4682      	mov	sl, r0
 80033f2:	468b      	mov	fp, r1
 80033f4:	dc13      	bgt.n	800341e <_strtod_l+0x3de>
 80033f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f43f ae5a 	beq.w	80030b2 <_strtod_l+0x72>
 80033fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003400:	dd78      	ble.n	80034f4 <_strtod_l+0x4b4>
 8003402:	2b16      	cmp	r3, #22
 8003404:	dc5f      	bgt.n	80034c6 <_strtod_l+0x486>
 8003406:	4972      	ldr	r1, [pc, #456]	@ (80035d0 <_strtod_l+0x590>)
 8003408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800340c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003410:	4652      	mov	r2, sl
 8003412:	465b      	mov	r3, fp
 8003414:	f7fd f908 	bl	8000628 <__aeabi_dmul>
 8003418:	4682      	mov	sl, r0
 800341a:	468b      	mov	fp, r1
 800341c:	e649      	b.n	80030b2 <_strtod_l+0x72>
 800341e:	4b6c      	ldr	r3, [pc, #432]	@ (80035d0 <_strtod_l+0x590>)
 8003420:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003424:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003428:	f7fd f8fe 	bl	8000628 <__aeabi_dmul>
 800342c:	4682      	mov	sl, r0
 800342e:	4638      	mov	r0, r7
 8003430:	468b      	mov	fp, r1
 8003432:	f7fd f87f 	bl	8000534 <__aeabi_ui2d>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	f7fc ff3d 	bl	80002bc <__adddf3>
 8003442:	2d0f      	cmp	r5, #15
 8003444:	4682      	mov	sl, r0
 8003446:	468b      	mov	fp, r1
 8003448:	ddd5      	ble.n	80033f6 <_strtod_l+0x3b6>
 800344a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800344c:	1b2c      	subs	r4, r5, r4
 800344e:	441c      	add	r4, r3
 8003450:	2c00      	cmp	r4, #0
 8003452:	f340 8093 	ble.w	800357c <_strtod_l+0x53c>
 8003456:	f014 030f 	ands.w	r3, r4, #15
 800345a:	d00a      	beq.n	8003472 <_strtod_l+0x432>
 800345c:	495c      	ldr	r1, [pc, #368]	@ (80035d0 <_strtod_l+0x590>)
 800345e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003462:	4652      	mov	r2, sl
 8003464:	465b      	mov	r3, fp
 8003466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800346a:	f7fd f8dd 	bl	8000628 <__aeabi_dmul>
 800346e:	4682      	mov	sl, r0
 8003470:	468b      	mov	fp, r1
 8003472:	f034 040f 	bics.w	r4, r4, #15
 8003476:	d073      	beq.n	8003560 <_strtod_l+0x520>
 8003478:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800347c:	dd49      	ble.n	8003512 <_strtod_l+0x4d2>
 800347e:	2400      	movs	r4, #0
 8003480:	46a0      	mov	r8, r4
 8003482:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003484:	46a1      	mov	r9, r4
 8003486:	9a05      	ldr	r2, [sp, #20]
 8003488:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80035d8 <_strtod_l+0x598>
 800348c:	2322      	movs	r3, #34	@ 0x22
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	f04f 0a00 	mov.w	sl, #0
 8003494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003496:	2b00      	cmp	r3, #0
 8003498:	f43f ae0b 	beq.w	80030b2 <_strtod_l+0x72>
 800349c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800349e:	9805      	ldr	r0, [sp, #20]
 80034a0:	f001 fbac 	bl	8004bfc <_Bfree>
 80034a4:	9805      	ldr	r0, [sp, #20]
 80034a6:	4649      	mov	r1, r9
 80034a8:	f001 fba8 	bl	8004bfc <_Bfree>
 80034ac:	9805      	ldr	r0, [sp, #20]
 80034ae:	4641      	mov	r1, r8
 80034b0:	f001 fba4 	bl	8004bfc <_Bfree>
 80034b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80034b6:	9805      	ldr	r0, [sp, #20]
 80034b8:	f001 fba0 	bl	8004bfc <_Bfree>
 80034bc:	9805      	ldr	r0, [sp, #20]
 80034be:	4621      	mov	r1, r4
 80034c0:	f001 fb9c 	bl	8004bfc <_Bfree>
 80034c4:	e5f5      	b.n	80030b2 <_strtod_l+0x72>
 80034c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80034cc:	4293      	cmp	r3, r2
 80034ce:	dbbc      	blt.n	800344a <_strtod_l+0x40a>
 80034d0:	4c3f      	ldr	r4, [pc, #252]	@ (80035d0 <_strtod_l+0x590>)
 80034d2:	f1c5 050f 	rsb	r5, r5, #15
 80034d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034e2:	f7fd f8a1 	bl	8000628 <__aeabi_dmul>
 80034e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e8:	1b5d      	subs	r5, r3, r5
 80034ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80034ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80034f2:	e78f      	b.n	8003414 <_strtod_l+0x3d4>
 80034f4:	3316      	adds	r3, #22
 80034f6:	dba8      	blt.n	800344a <_strtod_l+0x40a>
 80034f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034fa:	eba3 0808 	sub.w	r8, r3, r8
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <_strtod_l+0x590>)
 8003500:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003504:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003508:	4650      	mov	r0, sl
 800350a:	4659      	mov	r1, fp
 800350c:	f7fd f9b6 	bl	800087c <__aeabi_ddiv>
 8003510:	e782      	b.n	8003418 <_strtod_l+0x3d8>
 8003512:	2300      	movs	r3, #0
 8003514:	4f2f      	ldr	r7, [pc, #188]	@ (80035d4 <_strtod_l+0x594>)
 8003516:	1124      	asrs	r4, r4, #4
 8003518:	4650      	mov	r0, sl
 800351a:	4659      	mov	r1, fp
 800351c:	461e      	mov	r6, r3
 800351e:	2c01      	cmp	r4, #1
 8003520:	dc21      	bgt.n	8003566 <_strtod_l+0x526>
 8003522:	b10b      	cbz	r3, 8003528 <_strtod_l+0x4e8>
 8003524:	4682      	mov	sl, r0
 8003526:	468b      	mov	fp, r1
 8003528:	492a      	ldr	r1, [pc, #168]	@ (80035d4 <_strtod_l+0x594>)
 800352a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800352e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003532:	4652      	mov	r2, sl
 8003534:	465b      	mov	r3, fp
 8003536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800353a:	f7fd f875 	bl	8000628 <__aeabi_dmul>
 800353e:	4b26      	ldr	r3, [pc, #152]	@ (80035d8 <_strtod_l+0x598>)
 8003540:	460a      	mov	r2, r1
 8003542:	400b      	ands	r3, r1
 8003544:	4925      	ldr	r1, [pc, #148]	@ (80035dc <_strtod_l+0x59c>)
 8003546:	428b      	cmp	r3, r1
 8003548:	4682      	mov	sl, r0
 800354a:	d898      	bhi.n	800347e <_strtod_l+0x43e>
 800354c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003550:	428b      	cmp	r3, r1
 8003552:	bf86      	itte	hi
 8003554:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80035e0 <_strtod_l+0x5a0>
 8003558:	f04f 3aff 	movhi.w	sl, #4294967295
 800355c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003560:	2300      	movs	r3, #0
 8003562:	9308      	str	r3, [sp, #32]
 8003564:	e076      	b.n	8003654 <_strtod_l+0x614>
 8003566:	07e2      	lsls	r2, r4, #31
 8003568:	d504      	bpl.n	8003574 <_strtod_l+0x534>
 800356a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800356e:	f7fd f85b 	bl	8000628 <__aeabi_dmul>
 8003572:	2301      	movs	r3, #1
 8003574:	3601      	adds	r6, #1
 8003576:	1064      	asrs	r4, r4, #1
 8003578:	3708      	adds	r7, #8
 800357a:	e7d0      	b.n	800351e <_strtod_l+0x4de>
 800357c:	d0f0      	beq.n	8003560 <_strtod_l+0x520>
 800357e:	4264      	negs	r4, r4
 8003580:	f014 020f 	ands.w	r2, r4, #15
 8003584:	d00a      	beq.n	800359c <_strtod_l+0x55c>
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <_strtod_l+0x590>)
 8003588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800358c:	4650      	mov	r0, sl
 800358e:	4659      	mov	r1, fp
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd f972 	bl	800087c <__aeabi_ddiv>
 8003598:	4682      	mov	sl, r0
 800359a:	468b      	mov	fp, r1
 800359c:	1124      	asrs	r4, r4, #4
 800359e:	d0df      	beq.n	8003560 <_strtod_l+0x520>
 80035a0:	2c1f      	cmp	r4, #31
 80035a2:	dd1f      	ble.n	80035e4 <_strtod_l+0x5a4>
 80035a4:	2400      	movs	r4, #0
 80035a6:	46a0      	mov	r8, r4
 80035a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80035aa:	46a1      	mov	r9, r4
 80035ac:	9a05      	ldr	r2, [sp, #20]
 80035ae:	2322      	movs	r3, #34	@ 0x22
 80035b0:	f04f 0a00 	mov.w	sl, #0
 80035b4:	f04f 0b00 	mov.w	fp, #0
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e76b      	b.n	8003494 <_strtod_l+0x454>
 80035bc:	0800624f 	.word	0x0800624f
 80035c0:	08006404 	.word	0x08006404
 80035c4:	08006246 	.word	0x08006246
 80035c8:	08006249 	.word	0x08006249
 80035cc:	08006306 	.word	0x08006306
 80035d0:	08006490 	.word	0x08006490
 80035d4:	08006468 	.word	0x08006468
 80035d8:	7ff00000 	.word	0x7ff00000
 80035dc:	7ca00000 	.word	0x7ca00000
 80035e0:	7fefffff 	.word	0x7fefffff
 80035e4:	f014 0310 	ands.w	r3, r4, #16
 80035e8:	bf18      	it	ne
 80035ea:	236a      	movne	r3, #106	@ 0x6a
 80035ec:	4ea9      	ldr	r6, [pc, #676]	@ (8003894 <_strtod_l+0x854>)
 80035ee:	9308      	str	r3, [sp, #32]
 80035f0:	4650      	mov	r0, sl
 80035f2:	4659      	mov	r1, fp
 80035f4:	2300      	movs	r3, #0
 80035f6:	07e7      	lsls	r7, r4, #31
 80035f8:	d504      	bpl.n	8003604 <_strtod_l+0x5c4>
 80035fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80035fe:	f7fd f813 	bl	8000628 <__aeabi_dmul>
 8003602:	2301      	movs	r3, #1
 8003604:	1064      	asrs	r4, r4, #1
 8003606:	f106 0608 	add.w	r6, r6, #8
 800360a:	d1f4      	bne.n	80035f6 <_strtod_l+0x5b6>
 800360c:	b10b      	cbz	r3, 8003612 <_strtod_l+0x5d2>
 800360e:	4682      	mov	sl, r0
 8003610:	468b      	mov	fp, r1
 8003612:	9b08      	ldr	r3, [sp, #32]
 8003614:	b1b3      	cbz	r3, 8003644 <_strtod_l+0x604>
 8003616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800361a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800361e:	2b00      	cmp	r3, #0
 8003620:	4659      	mov	r1, fp
 8003622:	dd0f      	ble.n	8003644 <_strtod_l+0x604>
 8003624:	2b1f      	cmp	r3, #31
 8003626:	dd56      	ble.n	80036d6 <_strtod_l+0x696>
 8003628:	2b34      	cmp	r3, #52	@ 0x34
 800362a:	bfde      	ittt	le
 800362c:	f04f 33ff 	movle.w	r3, #4294967295
 8003630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003634:	4093      	lslle	r3, r2
 8003636:	f04f 0a00 	mov.w	sl, #0
 800363a:	bfcc      	ite	gt
 800363c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003640:	ea03 0b01 	andle.w	fp, r3, r1
 8003644:	2200      	movs	r2, #0
 8003646:	2300      	movs	r3, #0
 8003648:	4650      	mov	r0, sl
 800364a:	4659      	mov	r1, fp
 800364c:	f7fd fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8003650:	2800      	cmp	r0, #0
 8003652:	d1a7      	bne.n	80035a4 <_strtod_l+0x564>
 8003654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800365a:	9805      	ldr	r0, [sp, #20]
 800365c:	462b      	mov	r3, r5
 800365e:	464a      	mov	r2, r9
 8003660:	f001 fb34 	bl	8004ccc <__s2b>
 8003664:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003666:	2800      	cmp	r0, #0
 8003668:	f43f af09 	beq.w	800347e <_strtod_l+0x43e>
 800366c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800366e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003670:	2a00      	cmp	r2, #0
 8003672:	eba3 0308 	sub.w	r3, r3, r8
 8003676:	bfa8      	it	ge
 8003678:	2300      	movge	r3, #0
 800367a:	9312      	str	r3, [sp, #72]	@ 0x48
 800367c:	2400      	movs	r4, #0
 800367e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003682:	9316      	str	r3, [sp, #88]	@ 0x58
 8003684:	46a0      	mov	r8, r4
 8003686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003688:	9805      	ldr	r0, [sp, #20]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	f001 fa76 	bl	8004b7c <_Balloc>
 8003690:	4681      	mov	r9, r0
 8003692:	2800      	cmp	r0, #0
 8003694:	f43f aef7 	beq.w	8003486 <_strtod_l+0x446>
 8003698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	3202      	adds	r2, #2
 800369e:	f103 010c 	add.w	r1, r3, #12
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	300c      	adds	r0, #12
 80036a6:	f000 fde6 	bl	8004276 <memcpy>
 80036aa:	ec4b ab10 	vmov	d0, sl, fp
 80036ae:	9805      	ldr	r0, [sp, #20]
 80036b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80036b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80036b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80036b8:	f001 fe3c 	bl	8005334 <__d2b>
 80036bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80036be:	2800      	cmp	r0, #0
 80036c0:	f43f aee1 	beq.w	8003486 <_strtod_l+0x446>
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	2101      	movs	r1, #1
 80036c8:	f001 fb96 	bl	8004df8 <__i2b>
 80036cc:	4680      	mov	r8, r0
 80036ce:	b948      	cbnz	r0, 80036e4 <_strtod_l+0x6a4>
 80036d0:	f04f 0800 	mov.w	r8, #0
 80036d4:	e6d7      	b.n	8003486 <_strtod_l+0x446>
 80036d6:	f04f 32ff 	mov.w	r2, #4294967295
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	ea03 0a0a 	and.w	sl, r3, sl
 80036e2:	e7af      	b.n	8003644 <_strtod_l+0x604>
 80036e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80036e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	bfab      	itete	ge
 80036ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80036ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80036f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80036f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80036f4:	bfac      	ite	ge
 80036f6:	18ef      	addge	r7, r5, r3
 80036f8:	1b5e      	sublt	r6, r3, r5
 80036fa:	9b08      	ldr	r3, [sp, #32]
 80036fc:	1aed      	subs	r5, r5, r3
 80036fe:	4415      	add	r5, r2
 8003700:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <_strtod_l+0x858>)
 8003702:	3d01      	subs	r5, #1
 8003704:	429d      	cmp	r5, r3
 8003706:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800370a:	da50      	bge.n	80037ae <_strtod_l+0x76e>
 800370c:	1b5b      	subs	r3, r3, r5
 800370e:	2b1f      	cmp	r3, #31
 8003710:	eba2 0203 	sub.w	r2, r2, r3
 8003714:	f04f 0101 	mov.w	r1, #1
 8003718:	dc3d      	bgt.n	8003796 <_strtod_l+0x756>
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003720:	2300      	movs	r3, #0
 8003722:	9310      	str	r3, [sp, #64]	@ 0x40
 8003724:	18bd      	adds	r5, r7, r2
 8003726:	9b08      	ldr	r3, [sp, #32]
 8003728:	42af      	cmp	r7, r5
 800372a:	4416      	add	r6, r2
 800372c:	441e      	add	r6, r3
 800372e:	463b      	mov	r3, r7
 8003730:	bfa8      	it	ge
 8003732:	462b      	movge	r3, r5
 8003734:	42b3      	cmp	r3, r6
 8003736:	bfa8      	it	ge
 8003738:	4633      	movge	r3, r6
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfc2      	ittt	gt
 800373e:	1aed      	subgt	r5, r5, r3
 8003740:	1af6      	subgt	r6, r6, r3
 8003742:	1aff      	subgt	r7, r7, r3
 8003744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	dd16      	ble.n	8003778 <_strtod_l+0x738>
 800374a:	4641      	mov	r1, r8
 800374c:	9805      	ldr	r0, [sp, #20]
 800374e:	461a      	mov	r2, r3
 8003750:	f001 fc0a 	bl	8004f68 <__pow5mult>
 8003754:	4680      	mov	r8, r0
 8003756:	2800      	cmp	r0, #0
 8003758:	d0ba      	beq.n	80036d0 <_strtod_l+0x690>
 800375a:	4601      	mov	r1, r0
 800375c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800375e:	9805      	ldr	r0, [sp, #20]
 8003760:	f001 fb60 	bl	8004e24 <__multiply>
 8003764:	900a      	str	r0, [sp, #40]	@ 0x28
 8003766:	2800      	cmp	r0, #0
 8003768:	f43f ae8d 	beq.w	8003486 <_strtod_l+0x446>
 800376c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800376e:	9805      	ldr	r0, [sp, #20]
 8003770:	f001 fa44 	bl	8004bfc <_Bfree>
 8003774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003776:	931a      	str	r3, [sp, #104]	@ 0x68
 8003778:	2d00      	cmp	r5, #0
 800377a:	dc1d      	bgt.n	80037b8 <_strtod_l+0x778>
 800377c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	dd23      	ble.n	80037ca <_strtod_l+0x78a>
 8003782:	4649      	mov	r1, r9
 8003784:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003786:	9805      	ldr	r0, [sp, #20]
 8003788:	f001 fbee 	bl	8004f68 <__pow5mult>
 800378c:	4681      	mov	r9, r0
 800378e:	b9e0      	cbnz	r0, 80037ca <_strtod_l+0x78a>
 8003790:	f04f 0900 	mov.w	r9, #0
 8003794:	e677      	b.n	8003486 <_strtod_l+0x446>
 8003796:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800379a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800379e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80037a2:	35e2      	adds	r5, #226	@ 0xe2
 80037a4:	fa01 f305 	lsl.w	r3, r1, r5
 80037a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80037aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80037ac:	e7ba      	b.n	8003724 <_strtod_l+0x6e4>
 80037ae:	2300      	movs	r3, #0
 80037b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80037b2:	2301      	movs	r3, #1
 80037b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80037b6:	e7b5      	b.n	8003724 <_strtod_l+0x6e4>
 80037b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80037ba:	9805      	ldr	r0, [sp, #20]
 80037bc:	462a      	mov	r2, r5
 80037be:	f001 fc2d 	bl	800501c <__lshift>
 80037c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d1d9      	bne.n	800377c <_strtod_l+0x73c>
 80037c8:	e65d      	b.n	8003486 <_strtod_l+0x446>
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	dd07      	ble.n	80037de <_strtod_l+0x79e>
 80037ce:	4649      	mov	r1, r9
 80037d0:	9805      	ldr	r0, [sp, #20]
 80037d2:	4632      	mov	r2, r6
 80037d4:	f001 fc22 	bl	800501c <__lshift>
 80037d8:	4681      	mov	r9, r0
 80037da:	2800      	cmp	r0, #0
 80037dc:	d0d8      	beq.n	8003790 <_strtod_l+0x750>
 80037de:	2f00      	cmp	r7, #0
 80037e0:	dd08      	ble.n	80037f4 <_strtod_l+0x7b4>
 80037e2:	4641      	mov	r1, r8
 80037e4:	9805      	ldr	r0, [sp, #20]
 80037e6:	463a      	mov	r2, r7
 80037e8:	f001 fc18 	bl	800501c <__lshift>
 80037ec:	4680      	mov	r8, r0
 80037ee:	2800      	cmp	r0, #0
 80037f0:	f43f ae49 	beq.w	8003486 <_strtod_l+0x446>
 80037f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80037f6:	9805      	ldr	r0, [sp, #20]
 80037f8:	464a      	mov	r2, r9
 80037fa:	f001 fc97 	bl	800512c <__mdiff>
 80037fe:	4604      	mov	r4, r0
 8003800:	2800      	cmp	r0, #0
 8003802:	f43f ae40 	beq.w	8003486 <_strtod_l+0x446>
 8003806:	68c3      	ldr	r3, [r0, #12]
 8003808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800380a:	2300      	movs	r3, #0
 800380c:	60c3      	str	r3, [r0, #12]
 800380e:	4641      	mov	r1, r8
 8003810:	f001 fc70 	bl	80050f4 <__mcmp>
 8003814:	2800      	cmp	r0, #0
 8003816:	da45      	bge.n	80038a4 <_strtod_l+0x864>
 8003818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800381a:	ea53 030a 	orrs.w	r3, r3, sl
 800381e:	d16b      	bne.n	80038f8 <_strtod_l+0x8b8>
 8003820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003824:	2b00      	cmp	r3, #0
 8003826:	d167      	bne.n	80038f8 <_strtod_l+0x8b8>
 8003828:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800382c:	0d1b      	lsrs	r3, r3, #20
 800382e:	051b      	lsls	r3, r3, #20
 8003830:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003834:	d960      	bls.n	80038f8 <_strtod_l+0x8b8>
 8003836:	6963      	ldr	r3, [r4, #20]
 8003838:	b913      	cbnz	r3, 8003840 <_strtod_l+0x800>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	dd5b      	ble.n	80038f8 <_strtod_l+0x8b8>
 8003840:	4621      	mov	r1, r4
 8003842:	2201      	movs	r2, #1
 8003844:	9805      	ldr	r0, [sp, #20]
 8003846:	f001 fbe9 	bl	800501c <__lshift>
 800384a:	4641      	mov	r1, r8
 800384c:	4604      	mov	r4, r0
 800384e:	f001 fc51 	bl	80050f4 <__mcmp>
 8003852:	2800      	cmp	r0, #0
 8003854:	dd50      	ble.n	80038f8 <_strtod_l+0x8b8>
 8003856:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800385a:	9a08      	ldr	r2, [sp, #32]
 800385c:	0d1b      	lsrs	r3, r3, #20
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	2a00      	cmp	r2, #0
 8003862:	d06a      	beq.n	800393a <_strtod_l+0x8fa>
 8003864:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003868:	d867      	bhi.n	800393a <_strtod_l+0x8fa>
 800386a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800386e:	f67f ae9d 	bls.w	80035ac <_strtod_l+0x56c>
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <_strtod_l+0x85c>)
 8003874:	4650      	mov	r0, sl
 8003876:	4659      	mov	r1, fp
 8003878:	2200      	movs	r2, #0
 800387a:	f7fc fed5 	bl	8000628 <__aeabi_dmul>
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <_strtod_l+0x860>)
 8003880:	400b      	ands	r3, r1
 8003882:	4682      	mov	sl, r0
 8003884:	468b      	mov	fp, r1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f47f ae08 	bne.w	800349c <_strtod_l+0x45c>
 800388c:	9a05      	ldr	r2, [sp, #20]
 800388e:	2322      	movs	r3, #34	@ 0x22
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e603      	b.n	800349c <_strtod_l+0x45c>
 8003894:	08006430 	.word	0x08006430
 8003898:	fffffc02 	.word	0xfffffc02
 800389c:	39500000 	.word	0x39500000
 80038a0:	7ff00000 	.word	0x7ff00000
 80038a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80038a8:	d165      	bne.n	8003976 <_strtod_l+0x936>
 80038aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80038ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80038b0:	b35a      	cbz	r2, 800390a <_strtod_l+0x8ca>
 80038b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003b30 <_strtod_l+0xaf0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d12b      	bne.n	8003910 <_strtod_l+0x8d0>
 80038b8:	9b08      	ldr	r3, [sp, #32]
 80038ba:	4651      	mov	r1, sl
 80038bc:	b303      	cbz	r3, 8003900 <_strtod_l+0x8c0>
 80038be:	4b9d      	ldr	r3, [pc, #628]	@ (8003b34 <_strtod_l+0xaf4>)
 80038c0:	465a      	mov	r2, fp
 80038c2:	4013      	ands	r3, r2
 80038c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	d81b      	bhi.n	8003906 <_strtod_l+0x8c6>
 80038ce:	0d1b      	lsrs	r3, r3, #20
 80038d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	4299      	cmp	r1, r3
 80038da:	d119      	bne.n	8003910 <_strtod_l+0x8d0>
 80038dc:	4b96      	ldr	r3, [pc, #600]	@ (8003b38 <_strtod_l+0xaf8>)
 80038de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d102      	bne.n	80038ea <_strtod_l+0x8aa>
 80038e4:	3101      	adds	r1, #1
 80038e6:	f43f adce 	beq.w	8003486 <_strtod_l+0x446>
 80038ea:	4b92      	ldr	r3, [pc, #584]	@ (8003b34 <_strtod_l+0xaf4>)
 80038ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038ee:	401a      	ands	r2, r3
 80038f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80038f4:	f04f 0a00 	mov.w	sl, #0
 80038f8:	9b08      	ldr	r3, [sp, #32]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1b9      	bne.n	8003872 <_strtod_l+0x832>
 80038fe:	e5cd      	b.n	800349c <_strtod_l+0x45c>
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	e7e8      	b.n	80038d8 <_strtod_l+0x898>
 8003906:	4613      	mov	r3, r2
 8003908:	e7e6      	b.n	80038d8 <_strtod_l+0x898>
 800390a:	ea53 030a 	orrs.w	r3, r3, sl
 800390e:	d0a2      	beq.n	8003856 <_strtod_l+0x816>
 8003910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003912:	b1db      	cbz	r3, 800394c <_strtod_l+0x90c>
 8003914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003916:	4213      	tst	r3, r2
 8003918:	d0ee      	beq.n	80038f8 <_strtod_l+0x8b8>
 800391a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800391c:	9a08      	ldr	r2, [sp, #32]
 800391e:	4650      	mov	r0, sl
 8003920:	4659      	mov	r1, fp
 8003922:	b1bb      	cbz	r3, 8003954 <_strtod_l+0x914>
 8003924:	f7ff fb6b 	bl	8002ffe <sulp>
 8003928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800392c:	ec53 2b10 	vmov	r2, r3, d0
 8003930:	f7fc fcc4 	bl	80002bc <__adddf3>
 8003934:	4682      	mov	sl, r0
 8003936:	468b      	mov	fp, r1
 8003938:	e7de      	b.n	80038f8 <_strtod_l+0x8b8>
 800393a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800393e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003946:	f04f 3aff 	mov.w	sl, #4294967295
 800394a:	e7d5      	b.n	80038f8 <_strtod_l+0x8b8>
 800394c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800394e:	ea13 0f0a 	tst.w	r3, sl
 8003952:	e7e1      	b.n	8003918 <_strtod_l+0x8d8>
 8003954:	f7ff fb53 	bl	8002ffe <sulp>
 8003958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800395c:	ec53 2b10 	vmov	r2, r3, d0
 8003960:	f7fc fcaa 	bl	80002b8 <__aeabi_dsub>
 8003964:	2200      	movs	r2, #0
 8003966:	2300      	movs	r3, #0
 8003968:	4682      	mov	sl, r0
 800396a:	468b      	mov	fp, r1
 800396c:	f7fd f8c4 	bl	8000af8 <__aeabi_dcmpeq>
 8003970:	2800      	cmp	r0, #0
 8003972:	d0c1      	beq.n	80038f8 <_strtod_l+0x8b8>
 8003974:	e61a      	b.n	80035ac <_strtod_l+0x56c>
 8003976:	4641      	mov	r1, r8
 8003978:	4620      	mov	r0, r4
 800397a:	f001 fd33 	bl	80053e4 <__ratio>
 800397e:	ec57 6b10 	vmov	r6, r7, d0
 8003982:	2200      	movs	r2, #0
 8003984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003988:	4630      	mov	r0, r6
 800398a:	4639      	mov	r1, r7
 800398c:	f7fd f8c8 	bl	8000b20 <__aeabi_dcmple>
 8003990:	2800      	cmp	r0, #0
 8003992:	d06f      	beq.n	8003a74 <_strtod_l+0xa34>
 8003994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d17a      	bne.n	8003a90 <_strtod_l+0xa50>
 800399a:	f1ba 0f00 	cmp.w	sl, #0
 800399e:	d158      	bne.n	8003a52 <_strtod_l+0xa12>
 80039a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d15a      	bne.n	8003a60 <_strtod_l+0xa20>
 80039aa:	4b64      	ldr	r3, [pc, #400]	@ (8003b3c <_strtod_l+0xafc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	4630      	mov	r0, r6
 80039b0:	4639      	mov	r1, r7
 80039b2:	f7fd f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d159      	bne.n	8003a6e <_strtod_l+0xa2e>
 80039ba:	4630      	mov	r0, r6
 80039bc:	4639      	mov	r1, r7
 80039be:	4b60      	ldr	r3, [pc, #384]	@ (8003b40 <_strtod_l+0xb00>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	f7fc fe31 	bl	8000628 <__aeabi_dmul>
 80039c6:	4606      	mov	r6, r0
 80039c8:	460f      	mov	r7, r1
 80039ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80039ce:	9606      	str	r6, [sp, #24]
 80039d0:	9307      	str	r3, [sp, #28]
 80039d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039d6:	4d57      	ldr	r5, [pc, #348]	@ (8003b34 <_strtod_l+0xaf4>)
 80039d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80039dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039de:	401d      	ands	r5, r3
 80039e0:	4b58      	ldr	r3, [pc, #352]	@ (8003b44 <_strtod_l+0xb04>)
 80039e2:	429d      	cmp	r5, r3
 80039e4:	f040 80b2 	bne.w	8003b4c <_strtod_l+0xb0c>
 80039e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80039ee:	ec4b ab10 	vmov	d0, sl, fp
 80039f2:	f001 fc2f 	bl	8005254 <__ulp>
 80039f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039fa:	ec51 0b10 	vmov	r0, r1, d0
 80039fe:	f7fc fe13 	bl	8000628 <__aeabi_dmul>
 8003a02:	4652      	mov	r2, sl
 8003a04:	465b      	mov	r3, fp
 8003a06:	f7fc fc59 	bl	80002bc <__adddf3>
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4949      	ldr	r1, [pc, #292]	@ (8003b34 <_strtod_l+0xaf4>)
 8003a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8003b48 <_strtod_l+0xb08>)
 8003a10:	4019      	ands	r1, r3
 8003a12:	4291      	cmp	r1, r2
 8003a14:	4682      	mov	sl, r0
 8003a16:	d942      	bls.n	8003a9e <_strtod_l+0xa5e>
 8003a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003a1a:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <_strtod_l+0xaf8>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d103      	bne.n	8003a28 <_strtod_l+0x9e8>
 8003a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a22:	3301      	adds	r3, #1
 8003a24:	f43f ad2f 	beq.w	8003486 <_strtod_l+0x446>
 8003a28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8003b38 <_strtod_l+0xaf8>
 8003a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8003a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003a32:	9805      	ldr	r0, [sp, #20]
 8003a34:	f001 f8e2 	bl	8004bfc <_Bfree>
 8003a38:	9805      	ldr	r0, [sp, #20]
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	f001 f8de 	bl	8004bfc <_Bfree>
 8003a40:	9805      	ldr	r0, [sp, #20]
 8003a42:	4641      	mov	r1, r8
 8003a44:	f001 f8da 	bl	8004bfc <_Bfree>
 8003a48:	9805      	ldr	r0, [sp, #20]
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	f001 f8d6 	bl	8004bfc <_Bfree>
 8003a50:	e619      	b.n	8003686 <_strtod_l+0x646>
 8003a52:	f1ba 0f01 	cmp.w	sl, #1
 8003a56:	d103      	bne.n	8003a60 <_strtod_l+0xa20>
 8003a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f43f ada6 	beq.w	80035ac <_strtod_l+0x56c>
 8003a60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8003b10 <_strtod_l+0xad0>
 8003a64:	4f35      	ldr	r7, [pc, #212]	@ (8003b3c <_strtod_l+0xafc>)
 8003a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	e7b1      	b.n	80039d2 <_strtod_l+0x992>
 8003a6e:	4f34      	ldr	r7, [pc, #208]	@ (8003b40 <_strtod_l+0xb00>)
 8003a70:	2600      	movs	r6, #0
 8003a72:	e7aa      	b.n	80039ca <_strtod_l+0x98a>
 8003a74:	4b32      	ldr	r3, [pc, #200]	@ (8003b40 <_strtod_l+0xb00>)
 8003a76:	4630      	mov	r0, r6
 8003a78:	4639      	mov	r1, r7
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f7fc fdd4 	bl	8000628 <__aeabi_dmul>
 8003a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a82:	4606      	mov	r6, r0
 8003a84:	460f      	mov	r7, r1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d09f      	beq.n	80039ca <_strtod_l+0x98a>
 8003a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003a8e:	e7a0      	b.n	80039d2 <_strtod_l+0x992>
 8003a90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8003b18 <_strtod_l+0xad8>
 8003a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003a98:	ec57 6b17 	vmov	r6, r7, d7
 8003a9c:	e799      	b.n	80039d2 <_strtod_l+0x992>
 8003a9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8003aa2:	9b08      	ldr	r3, [sp, #32]
 8003aa4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1c1      	bne.n	8003a30 <_strtod_l+0x9f0>
 8003aac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003ab0:	0d1b      	lsrs	r3, r3, #20
 8003ab2:	051b      	lsls	r3, r3, #20
 8003ab4:	429d      	cmp	r5, r3
 8003ab6:	d1bb      	bne.n	8003a30 <_strtod_l+0x9f0>
 8003ab8:	4630      	mov	r0, r6
 8003aba:	4639      	mov	r1, r7
 8003abc:	f7fd f8fe 	bl	8000cbc <__aeabi_d2lz>
 8003ac0:	f7fc fd84 	bl	80005cc <__aeabi_l2d>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4630      	mov	r0, r6
 8003aca:	4639      	mov	r1, r7
 8003acc:	f7fc fbf4 	bl	80002b8 <__aeabi_dsub>
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003ad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ade:	ea46 060a 	orr.w	r6, r6, sl
 8003ae2:	431e      	orrs	r6, r3
 8003ae4:	d06f      	beq.n	8003bc6 <_strtod_l+0xb86>
 8003ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8003b20 <_strtod_l+0xae0>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fd f80e 	bl	8000b0c <__aeabi_dcmplt>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	f47f acd3 	bne.w	800349c <_strtod_l+0x45c>
 8003af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b28 <_strtod_l+0xae8>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b00:	f7fd f822 	bl	8000b48 <__aeabi_dcmpgt>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d093      	beq.n	8003a30 <_strtod_l+0x9f0>
 8003b08:	e4c8      	b.n	800349c <_strtod_l+0x45c>
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	00000000 	.word	0x00000000
 8003b14:	bff00000 	.word	0xbff00000
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	3ff00000 	.word	0x3ff00000
 8003b20:	94a03595 	.word	0x94a03595
 8003b24:	3fdfffff 	.word	0x3fdfffff
 8003b28:	35afe535 	.word	0x35afe535
 8003b2c:	3fe00000 	.word	0x3fe00000
 8003b30:	000fffff 	.word	0x000fffff
 8003b34:	7ff00000 	.word	0x7ff00000
 8003b38:	7fefffff 	.word	0x7fefffff
 8003b3c:	3ff00000 	.word	0x3ff00000
 8003b40:	3fe00000 	.word	0x3fe00000
 8003b44:	7fe00000 	.word	0x7fe00000
 8003b48:	7c9fffff 	.word	0x7c9fffff
 8003b4c:	9b08      	ldr	r3, [sp, #32]
 8003b4e:	b323      	cbz	r3, 8003b9a <_strtod_l+0xb5a>
 8003b50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8003b54:	d821      	bhi.n	8003b9a <_strtod_l+0xb5a>
 8003b56:	a328      	add	r3, pc, #160	@ (adr r3, 8003bf8 <_strtod_l+0xbb8>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4639      	mov	r1, r7
 8003b60:	f7fc ffde 	bl	8000b20 <__aeabi_dcmple>
 8003b64:	b1a0      	cbz	r0, 8003b90 <_strtod_l+0xb50>
 8003b66:	4639      	mov	r1, r7
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7fd f81f 	bl	8000bac <__aeabi_d2uiz>
 8003b6e:	2801      	cmp	r0, #1
 8003b70:	bf38      	it	cc
 8003b72:	2001      	movcc	r0, #1
 8003b74:	f7fc fcde 	bl	8000534 <__aeabi_ui2d>
 8003b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	460f      	mov	r7, r1
 8003b7e:	b9fb      	cbnz	r3, 8003bc0 <_strtod_l+0xb80>
 8003b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b84:	9014      	str	r0, [sp, #80]	@ 0x50
 8003b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8003b88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8003b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8003b96:	1b5b      	subs	r3, r3, r5
 8003b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8003b9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003b9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003ba2:	f001 fb57 	bl	8005254 <__ulp>
 8003ba6:	4650      	mov	r0, sl
 8003ba8:	ec53 2b10 	vmov	r2, r3, d0
 8003bac:	4659      	mov	r1, fp
 8003bae:	f7fc fd3b 	bl	8000628 <__aeabi_dmul>
 8003bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003bb6:	f7fc fb81 	bl	80002bc <__adddf3>
 8003bba:	4682      	mov	sl, r0
 8003bbc:	468b      	mov	fp, r1
 8003bbe:	e770      	b.n	8003aa2 <_strtod_l+0xa62>
 8003bc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003bc4:	e7e0      	b.n	8003b88 <_strtod_l+0xb48>
 8003bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8003c00 <_strtod_l+0xbc0>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc ff9e 	bl	8000b0c <__aeabi_dcmplt>
 8003bd0:	e798      	b.n	8003b04 <_strtod_l+0xac4>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8003bd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	f7ff ba6d 	b.w	80030ba <_strtod_l+0x7a>
 8003be0:	2a65      	cmp	r2, #101	@ 0x65
 8003be2:	f43f ab68 	beq.w	80032b6 <_strtod_l+0x276>
 8003be6:	2a45      	cmp	r2, #69	@ 0x45
 8003be8:	f43f ab65 	beq.w	80032b6 <_strtod_l+0x276>
 8003bec:	2301      	movs	r3, #1
 8003bee:	f7ff bba0 	b.w	8003332 <_strtod_l+0x2f2>
 8003bf2:	bf00      	nop
 8003bf4:	f3af 8000 	nop.w
 8003bf8:	ffc00000 	.word	0xffc00000
 8003bfc:	41dfffff 	.word	0x41dfffff
 8003c00:	94a03595 	.word	0x94a03595
 8003c04:	3fcfffff 	.word	0x3fcfffff

08003c08 <strtod>:
 8003c08:	460a      	mov	r2, r1
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <strtod+0x10>)
 8003c0e:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <strtod+0x14>)
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f7ff ba15 	b.w	8003040 <_strtod_l>
 8003c16:	bf00      	nop
 8003c18:	2000017c 	.word	0x2000017c
 8003c1c:	20000010 	.word	0x20000010

08003c20 <std>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b510      	push	{r4, lr}
 8003c24:	4604      	mov	r4, r0
 8003c26:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c2e:	6083      	str	r3, [r0, #8]
 8003c30:	8181      	strh	r1, [r0, #12]
 8003c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c34:	81c2      	strh	r2, [r0, #14]
 8003c36:	6183      	str	r3, [r0, #24]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	305c      	adds	r0, #92	@ 0x5c
 8003c3e:	f000 fa1b 	bl	8004078 <memset>
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <std+0x58>)
 8003c44:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <std+0x5c>)
 8003c48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x60>)
 8003c4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x64>)
 8003c50:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <std+0x68>)
 8003c54:	6224      	str	r4, [r4, #32]
 8003c56:	429c      	cmp	r4, r3
 8003c58:	d006      	beq.n	8003c68 <std+0x48>
 8003c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c5e:	4294      	cmp	r4, r2
 8003c60:	d002      	beq.n	8003c68 <std+0x48>
 8003c62:	33d0      	adds	r3, #208	@ 0xd0
 8003c64:	429c      	cmp	r4, r3
 8003c66:	d105      	bne.n	8003c74 <std+0x54>
 8003c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c70:	f000 baf6 	b.w	8004260 <__retarget_lock_init_recursive>
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	08003ec9 	.word	0x08003ec9
 8003c7c:	08003eeb 	.word	0x08003eeb
 8003c80:	08003f23 	.word	0x08003f23
 8003c84:	08003f47 	.word	0x08003f47
 8003c88:	200005e8 	.word	0x200005e8

08003c8c <stdio_exit_handler>:
 8003c8c:	4a02      	ldr	r2, [pc, #8]	@ (8003c98 <stdio_exit_handler+0xc>)
 8003c8e:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <stdio_exit_handler+0x10>)
 8003c90:	4803      	ldr	r0, [pc, #12]	@ (8003ca0 <stdio_exit_handler+0x14>)
 8003c92:	f000 b869 	b.w	8003d68 <_fwalk_sglue>
 8003c96:	bf00      	nop
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	08005e3d 	.word	0x08005e3d
 8003ca0:	20000180 	.word	0x20000180

08003ca4 <cleanup_stdio>:
 8003ca4:	6841      	ldr	r1, [r0, #4]
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <cleanup_stdio+0x34>)
 8003ca8:	4299      	cmp	r1, r3
 8003caa:	b510      	push	{r4, lr}
 8003cac:	4604      	mov	r4, r0
 8003cae:	d001      	beq.n	8003cb4 <cleanup_stdio+0x10>
 8003cb0:	f002 f8c4 	bl	8005e3c <_fflush_r>
 8003cb4:	68a1      	ldr	r1, [r4, #8]
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <cleanup_stdio+0x38>)
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	d002      	beq.n	8003cc2 <cleanup_stdio+0x1e>
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f002 f8bd 	bl	8005e3c <_fflush_r>
 8003cc2:	68e1      	ldr	r1, [r4, #12]
 8003cc4:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <cleanup_stdio+0x3c>)
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	d004      	beq.n	8003cd4 <cleanup_stdio+0x30>
 8003cca:	4620      	mov	r0, r4
 8003ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd0:	f002 b8b4 	b.w	8005e3c <_fflush_r>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200005e8 	.word	0x200005e8
 8003cdc:	20000650 	.word	0x20000650
 8003ce0:	200006b8 	.word	0x200006b8

08003ce4 <global_stdio_init.part.0>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <global_stdio_init.part.0+0x30>)
 8003ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8003d18 <global_stdio_init.part.0+0x34>)
 8003cea:	4a0c      	ldr	r2, [pc, #48]	@ (8003d1c <global_stdio_init.part.0+0x38>)
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	4620      	mov	r0, r4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	f7ff ff94 	bl	8003c20 <std>
 8003cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2109      	movs	r1, #9
 8003d00:	f7ff ff8e 	bl	8003c20 <std>
 8003d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d08:	2202      	movs	r2, #2
 8003d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0e:	2112      	movs	r1, #18
 8003d10:	f7ff bf86 	b.w	8003c20 <std>
 8003d14:	20000720 	.word	0x20000720
 8003d18:	200005e8 	.word	0x200005e8
 8003d1c:	08003c8d 	.word	0x08003c8d

08003d20 <__sfp_lock_acquire>:
 8003d20:	4801      	ldr	r0, [pc, #4]	@ (8003d28 <__sfp_lock_acquire+0x8>)
 8003d22:	f000 ba9e 	b.w	8004262 <__retarget_lock_acquire_recursive>
 8003d26:	bf00      	nop
 8003d28:	20000729 	.word	0x20000729

08003d2c <__sfp_lock_release>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	@ (8003d34 <__sfp_lock_release+0x8>)
 8003d2e:	f000 ba99 	b.w	8004264 <__retarget_lock_release_recursive>
 8003d32:	bf00      	nop
 8003d34:	20000729 	.word	0x20000729

08003d38 <__sinit>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	f7ff fff0 	bl	8003d20 <__sfp_lock_acquire>
 8003d40:	6a23      	ldr	r3, [r4, #32]
 8003d42:	b11b      	cbz	r3, 8003d4c <__sinit+0x14>
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	f7ff bff0 	b.w	8003d2c <__sfp_lock_release>
 8003d4c:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <__sinit+0x28>)
 8003d4e:	6223      	str	r3, [r4, #32]
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__sinit+0x2c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f5      	bne.n	8003d44 <__sinit+0xc>
 8003d58:	f7ff ffc4 	bl	8003ce4 <global_stdio_init.part.0>
 8003d5c:	e7f2      	b.n	8003d44 <__sinit+0xc>
 8003d5e:	bf00      	nop
 8003d60:	08003ca5 	.word	0x08003ca5
 8003d64:	20000720 	.word	0x20000720

08003d68 <_fwalk_sglue>:
 8003d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	4688      	mov	r8, r1
 8003d70:	4614      	mov	r4, r2
 8003d72:	2600      	movs	r6, #0
 8003d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d78:	f1b9 0901 	subs.w	r9, r9, #1
 8003d7c:	d505      	bpl.n	8003d8a <_fwalk_sglue+0x22>
 8003d7e:	6824      	ldr	r4, [r4, #0]
 8003d80:	2c00      	cmp	r4, #0
 8003d82:	d1f7      	bne.n	8003d74 <_fwalk_sglue+0xc>
 8003d84:	4630      	mov	r0, r6
 8003d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d907      	bls.n	8003da0 <_fwalk_sglue+0x38>
 8003d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d94:	3301      	adds	r3, #1
 8003d96:	d003      	beq.n	8003da0 <_fwalk_sglue+0x38>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	47c0      	blx	r8
 8003d9e:	4306      	orrs	r6, r0
 8003da0:	3568      	adds	r5, #104	@ 0x68
 8003da2:	e7e9      	b.n	8003d78 <_fwalk_sglue+0x10>

08003da4 <iprintf>:
 8003da4:	b40f      	push	{r0, r1, r2, r3}
 8003da6:	b507      	push	{r0, r1, r2, lr}
 8003da8:	4906      	ldr	r1, [pc, #24]	@ (8003dc4 <iprintf+0x20>)
 8003daa:	ab04      	add	r3, sp, #16
 8003dac:	6808      	ldr	r0, [r1, #0]
 8003dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db2:	6881      	ldr	r1, [r0, #8]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	f001 fd19 	bl	80057ec <_vfiprintf_r>
 8003dba:	b003      	add	sp, #12
 8003dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc0:	b004      	add	sp, #16
 8003dc2:	4770      	bx	lr
 8003dc4:	2000017c 	.word	0x2000017c

08003dc8 <_puts_r>:
 8003dc8:	6a03      	ldr	r3, [r0, #32]
 8003dca:	b570      	push	{r4, r5, r6, lr}
 8003dcc:	6884      	ldr	r4, [r0, #8]
 8003dce:	4605      	mov	r5, r0
 8003dd0:	460e      	mov	r6, r1
 8003dd2:	b90b      	cbnz	r3, 8003dd8 <_puts_r+0x10>
 8003dd4:	f7ff ffb0 	bl	8003d38 <__sinit>
 8003dd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dda:	07db      	lsls	r3, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_puts_r+0x22>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	0598      	lsls	r0, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_puts_r+0x22>
 8003de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003de6:	f000 fa3c 	bl	8004262 <__retarget_lock_acquire_recursive>
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	0719      	lsls	r1, r3, #28
 8003dee:	d502      	bpl.n	8003df6 <_puts_r+0x2e>
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d135      	bne.n	8003e62 <_puts_r+0x9a>
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f8e7 	bl	8003fcc <__swsetup_r>
 8003dfe:	b380      	cbz	r0, 8003e62 <_puts_r+0x9a>
 8003e00:	f04f 35ff 	mov.w	r5, #4294967295
 8003e04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e06:	07da      	lsls	r2, r3, #31
 8003e08:	d405      	bmi.n	8003e16 <_puts_r+0x4e>
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	059b      	lsls	r3, r3, #22
 8003e0e:	d402      	bmi.n	8003e16 <_puts_r+0x4e>
 8003e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e12:	f000 fa27 	bl	8004264 <__retarget_lock_release_recursive>
 8003e16:	4628      	mov	r0, r5
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da04      	bge.n	8003e28 <_puts_r+0x60>
 8003e1e:	69a2      	ldr	r2, [r4, #24]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	dc17      	bgt.n	8003e54 <_puts_r+0x8c>
 8003e24:	290a      	cmp	r1, #10
 8003e26:	d015      	beq.n	8003e54 <_puts_r+0x8c>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	7019      	strb	r1, [r3, #0]
 8003e30:	68a3      	ldr	r3, [r4, #8]
 8003e32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e36:	3b01      	subs	r3, #1
 8003e38:	60a3      	str	r3, [r4, #8]
 8003e3a:	2900      	cmp	r1, #0
 8003e3c:	d1ed      	bne.n	8003e1a <_puts_r+0x52>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da11      	bge.n	8003e66 <_puts_r+0x9e>
 8003e42:	4622      	mov	r2, r4
 8003e44:	210a      	movs	r1, #10
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f881 	bl	8003f4e <__swbuf_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d0d7      	beq.n	8003e00 <_puts_r+0x38>
 8003e50:	250a      	movs	r5, #10
 8003e52:	e7d7      	b.n	8003e04 <_puts_r+0x3c>
 8003e54:	4622      	mov	r2, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f879 	bl	8003f4e <__swbuf_r>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d1e7      	bne.n	8003e30 <_puts_r+0x68>
 8003e60:	e7ce      	b.n	8003e00 <_puts_r+0x38>
 8003e62:	3e01      	subs	r6, #1
 8003e64:	e7e4      	b.n	8003e30 <_puts_r+0x68>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e7ee      	b.n	8003e50 <_puts_r+0x88>
	...

08003e74 <puts>:
 8003e74:	4b02      	ldr	r3, [pc, #8]	@ (8003e80 <puts+0xc>)
 8003e76:	4601      	mov	r1, r0
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	f7ff bfa5 	b.w	8003dc8 <_puts_r>
 8003e7e:	bf00      	nop
 8003e80:	2000017c 	.word	0x2000017c

08003e84 <siprintf>:
 8003e84:	b40e      	push	{r1, r2, r3}
 8003e86:	b510      	push	{r4, lr}
 8003e88:	b09d      	sub	sp, #116	@ 0x74
 8003e8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e8c:	9002      	str	r0, [sp, #8]
 8003e8e:	9006      	str	r0, [sp, #24]
 8003e90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e94:	480a      	ldr	r0, [pc, #40]	@ (8003ec0 <siprintf+0x3c>)
 8003e96:	9107      	str	r1, [sp, #28]
 8003e98:	9104      	str	r1, [sp, #16]
 8003e9a:	490a      	ldr	r1, [pc, #40]	@ (8003ec4 <siprintf+0x40>)
 8003e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea0:	9105      	str	r1, [sp, #20]
 8003ea2:	2400      	movs	r4, #0
 8003ea4:	a902      	add	r1, sp, #8
 8003ea6:	6800      	ldr	r0, [r0, #0]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003eac:	f001 fb78 	bl	80055a0 <_svfiprintf_r>
 8003eb0:	9b02      	ldr	r3, [sp, #8]
 8003eb2:	701c      	strb	r4, [r3, #0]
 8003eb4:	b01d      	add	sp, #116	@ 0x74
 8003eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eba:	b003      	add	sp, #12
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000017c 	.word	0x2000017c
 8003ec4:	ffff0208 	.word	0xffff0208

08003ec8 <__sread>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed0:	f000 f978 	bl	80041c4 <_read_r>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	bfab      	itete	ge
 8003ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003eda:	89a3      	ldrhlt	r3, [r4, #12]
 8003edc:	181b      	addge	r3, r3, r0
 8003ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ee2:	bfac      	ite	ge
 8003ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ee6:	81a3      	strhlt	r3, [r4, #12]
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <__swrite>:
 8003eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eee:	461f      	mov	r7, r3
 8003ef0:	898b      	ldrh	r3, [r1, #12]
 8003ef2:	05db      	lsls	r3, r3, #23
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	4616      	mov	r6, r2
 8003efa:	d505      	bpl.n	8003f08 <__swrite+0x1e>
 8003efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f00:	2302      	movs	r3, #2
 8003f02:	2200      	movs	r2, #0
 8003f04:	f000 f94c 	bl	80041a0 <_lseek_r>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	4632      	mov	r2, r6
 8003f16:	463b      	mov	r3, r7
 8003f18:	4628      	mov	r0, r5
 8003f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	f000 b963 	b.w	80041e8 <_write_r>

08003f22 <__sseek>:
 8003f22:	b510      	push	{r4, lr}
 8003f24:	460c      	mov	r4, r1
 8003f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2a:	f000 f939 	bl	80041a0 <_lseek_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	bf15      	itete	ne
 8003f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f3e:	81a3      	strheq	r3, [r4, #12]
 8003f40:	bf18      	it	ne
 8003f42:	81a3      	strhne	r3, [r4, #12]
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <__sclose>:
 8003f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4a:	f000 b919 	b.w	8004180 <_close_r>

08003f4e <__swbuf_r>:
 8003f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f50:	460e      	mov	r6, r1
 8003f52:	4614      	mov	r4, r2
 8003f54:	4605      	mov	r5, r0
 8003f56:	b118      	cbz	r0, 8003f60 <__swbuf_r+0x12>
 8003f58:	6a03      	ldr	r3, [r0, #32]
 8003f5a:	b90b      	cbnz	r3, 8003f60 <__swbuf_r+0x12>
 8003f5c:	f7ff feec 	bl	8003d38 <__sinit>
 8003f60:	69a3      	ldr	r3, [r4, #24]
 8003f62:	60a3      	str	r3, [r4, #8]
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	071a      	lsls	r2, r3, #28
 8003f68:	d501      	bpl.n	8003f6e <__swbuf_r+0x20>
 8003f6a:	6923      	ldr	r3, [r4, #16]
 8003f6c:	b943      	cbnz	r3, 8003f80 <__swbuf_r+0x32>
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f82b 	bl	8003fcc <__swsetup_r>
 8003f76:	b118      	cbz	r0, 8003f80 <__swbuf_r+0x32>
 8003f78:	f04f 37ff 	mov.w	r7, #4294967295
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	6922      	ldr	r2, [r4, #16]
 8003f84:	1a98      	subs	r0, r3, r2
 8003f86:	6963      	ldr	r3, [r4, #20]
 8003f88:	b2f6      	uxtb	r6, r6
 8003f8a:	4283      	cmp	r3, r0
 8003f8c:	4637      	mov	r7, r6
 8003f8e:	dc05      	bgt.n	8003f9c <__swbuf_r+0x4e>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	f001 ff52 	bl	8005e3c <_fflush_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d1ed      	bne.n	8003f78 <__swbuf_r+0x2a>
 8003f9c:	68a3      	ldr	r3, [r4, #8]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	6022      	str	r2, [r4, #0]
 8003fa8:	701e      	strb	r6, [r3, #0]
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d004      	beq.n	8003fbc <__swbuf_r+0x6e>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	07db      	lsls	r3, r3, #31
 8003fb6:	d5e1      	bpl.n	8003f7c <__swbuf_r+0x2e>
 8003fb8:	2e0a      	cmp	r6, #10
 8003fba:	d1df      	bne.n	8003f7c <__swbuf_r+0x2e>
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f001 ff3c 	bl	8005e3c <_fflush_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d0d9      	beq.n	8003f7c <__swbuf_r+0x2e>
 8003fc8:	e7d6      	b.n	8003f78 <__swbuf_r+0x2a>
	...

08003fcc <__swsetup_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <__swsetup_r+0xa8>)
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	b118      	cbz	r0, 8003fe0 <__swsetup_r+0x14>
 8003fd8:	6a03      	ldr	r3, [r0, #32]
 8003fda:	b90b      	cbnz	r3, 8003fe0 <__swsetup_r+0x14>
 8003fdc:	f7ff feac 	bl	8003d38 <__sinit>
 8003fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe4:	0719      	lsls	r1, r3, #28
 8003fe6:	d422      	bmi.n	800402e <__swsetup_r+0x62>
 8003fe8:	06da      	lsls	r2, r3, #27
 8003fea:	d407      	bmi.n	8003ffc <__swsetup_r+0x30>
 8003fec:	2209      	movs	r2, #9
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	e033      	b.n	8004064 <__swsetup_r+0x98>
 8003ffc:	0758      	lsls	r0, r3, #29
 8003ffe:	d512      	bpl.n	8004026 <__swsetup_r+0x5a>
 8004000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004002:	b141      	cbz	r1, 8004016 <__swsetup_r+0x4a>
 8004004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004008:	4299      	cmp	r1, r3
 800400a:	d002      	beq.n	8004012 <__swsetup_r+0x46>
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f969 	bl	80042e4 <_free_r>
 8004012:	2300      	movs	r3, #0
 8004014:	6363      	str	r3, [r4, #52]	@ 0x34
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	2300      	movs	r3, #0
 8004020:	6063      	str	r3, [r4, #4]
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	81a3      	strh	r3, [r4, #12]
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	b94b      	cbnz	r3, 8004046 <__swsetup_r+0x7a>
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800403c:	d003      	beq.n	8004046 <__swsetup_r+0x7a>
 800403e:	4621      	mov	r1, r4
 8004040:	4628      	mov	r0, r5
 8004042:	f001 ff5b 	bl	8005efc <__smakebuf_r>
 8004046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800404a:	f013 0201 	ands.w	r2, r3, #1
 800404e:	d00a      	beq.n	8004066 <__swsetup_r+0x9a>
 8004050:	2200      	movs	r2, #0
 8004052:	60a2      	str	r2, [r4, #8]
 8004054:	6962      	ldr	r2, [r4, #20]
 8004056:	4252      	negs	r2, r2
 8004058:	61a2      	str	r2, [r4, #24]
 800405a:	6922      	ldr	r2, [r4, #16]
 800405c:	b942      	cbnz	r2, 8004070 <__swsetup_r+0xa4>
 800405e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004062:	d1c5      	bne.n	8003ff0 <__swsetup_r+0x24>
 8004064:	bd38      	pop	{r3, r4, r5, pc}
 8004066:	0799      	lsls	r1, r3, #30
 8004068:	bf58      	it	pl
 800406a:	6962      	ldrpl	r2, [r4, #20]
 800406c:	60a2      	str	r2, [r4, #8]
 800406e:	e7f4      	b.n	800405a <__swsetup_r+0x8e>
 8004070:	2000      	movs	r0, #0
 8004072:	e7f7      	b.n	8004064 <__swsetup_r+0x98>
 8004074:	2000017c 	.word	0x2000017c

08004078 <memset>:
 8004078:	4402      	add	r2, r0
 800407a:	4603      	mov	r3, r0
 800407c:	4293      	cmp	r3, r2
 800407e:	d100      	bne.n	8004082 <memset+0xa>
 8004080:	4770      	bx	lr
 8004082:	f803 1b01 	strb.w	r1, [r3], #1
 8004086:	e7f9      	b.n	800407c <memset+0x4>

08004088 <strchr>:
 8004088:	b2c9      	uxtb	r1, r1
 800408a:	4603      	mov	r3, r0
 800408c:	4618      	mov	r0, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b112      	cbz	r2, 800409a <strchr+0x12>
 8004094:	428a      	cmp	r2, r1
 8004096:	d1f9      	bne.n	800408c <strchr+0x4>
 8004098:	4770      	bx	lr
 800409a:	2900      	cmp	r1, #0
 800409c:	bf18      	it	ne
 800409e:	2000      	movne	r0, #0
 80040a0:	4770      	bx	lr

080040a2 <strncmp>:
 80040a2:	b510      	push	{r4, lr}
 80040a4:	b16a      	cbz	r2, 80040c2 <strncmp+0x20>
 80040a6:	3901      	subs	r1, #1
 80040a8:	1884      	adds	r4, r0, r2
 80040aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d103      	bne.n	80040be <strncmp+0x1c>
 80040b6:	42a0      	cmp	r0, r4
 80040b8:	d001      	beq.n	80040be <strncmp+0x1c>
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	d1f5      	bne.n	80040aa <strncmp+0x8>
 80040be:	1ad0      	subs	r0, r2, r3
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	4610      	mov	r0, r2
 80040c4:	e7fc      	b.n	80040c0 <strncmp+0x1e>
	...

080040c8 <strtok>:
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <strtok+0x5c>)
 80040ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ce:	681f      	ldr	r7, [r3, #0]
 80040d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80040d2:	4605      	mov	r5, r0
 80040d4:	460e      	mov	r6, r1
 80040d6:	b9ec      	cbnz	r4, 8004114 <strtok+0x4c>
 80040d8:	2050      	movs	r0, #80	@ 0x50
 80040da:	f000 fc87 	bl	80049ec <malloc>
 80040de:	4602      	mov	r2, r0
 80040e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80040e2:	b920      	cbnz	r0, 80040ee <strtok+0x26>
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <strtok+0x60>)
 80040e6:	4811      	ldr	r0, [pc, #68]	@ (800412c <strtok+0x64>)
 80040e8:	215b      	movs	r1, #91	@ 0x5b
 80040ea:	f000 f8dd 	bl	80042a8 <__assert_func>
 80040ee:	e9c0 4400 	strd	r4, r4, [r0]
 80040f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80040f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80040fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80040fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004102:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004106:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800410a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800410e:	6184      	str	r4, [r0, #24]
 8004110:	7704      	strb	r4, [r0, #28]
 8004112:	6244      	str	r4, [r0, #36]	@ 0x24
 8004114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	2301      	movs	r3, #1
 800411c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	f000 b806 	b.w	8004130 <__strtok_r>
 8004124:	2000017c 	.word	0x2000017c
 8004128:	08006252 	.word	0x08006252
 800412c:	08006269 	.word	0x08006269

08004130 <__strtok_r>:
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	4604      	mov	r4, r0
 8004134:	b908      	cbnz	r0, 800413a <__strtok_r+0xa>
 8004136:	6814      	ldr	r4, [r2, #0]
 8004138:	b144      	cbz	r4, 800414c <__strtok_r+0x1c>
 800413a:	4620      	mov	r0, r4
 800413c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004140:	460f      	mov	r7, r1
 8004142:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004146:	b91e      	cbnz	r6, 8004150 <__strtok_r+0x20>
 8004148:	b965      	cbnz	r5, 8004164 <__strtok_r+0x34>
 800414a:	6015      	str	r5, [r2, #0]
 800414c:	2000      	movs	r0, #0
 800414e:	e005      	b.n	800415c <__strtok_r+0x2c>
 8004150:	42b5      	cmp	r5, r6
 8004152:	d1f6      	bne.n	8004142 <__strtok_r+0x12>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <__strtok_r+0xa>
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	7003      	strb	r3, [r0, #0]
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415e:	461c      	mov	r4, r3
 8004160:	e00c      	b.n	800417c <__strtok_r+0x4c>
 8004162:	b91d      	cbnz	r5, 800416c <__strtok_r+0x3c>
 8004164:	4627      	mov	r7, r4
 8004166:	f814 3b01 	ldrb.w	r3, [r4], #1
 800416a:	460e      	mov	r6, r1
 800416c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004170:	42ab      	cmp	r3, r5
 8004172:	d1f6      	bne.n	8004162 <__strtok_r+0x32>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f2      	beq.n	800415e <__strtok_r+0x2e>
 8004178:	2300      	movs	r3, #0
 800417a:	703b      	strb	r3, [r7, #0]
 800417c:	6014      	str	r4, [r2, #0]
 800417e:	e7ed      	b.n	800415c <__strtok_r+0x2c>

08004180 <_close_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d06      	ldr	r5, [pc, #24]	@ (800419c <_close_r+0x1c>)
 8004184:	2300      	movs	r3, #0
 8004186:	4604      	mov	r4, r0
 8004188:	4608      	mov	r0, r1
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f7fd fdaa 	bl	8001ce4 <_close>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_close_r+0x1a>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_close_r+0x1a>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20000724 	.word	0x20000724

080041a0 <_lseek_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	@ (80041c0 <_lseek_r+0x20>)
 80041a4:	4604      	mov	r4, r0
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7fd fdbf 	bl	8001d32 <_lseek>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_lseek_r+0x1e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_lseek_r+0x1e>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000724 	.word	0x20000724

080041c4 <_read_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	@ (80041e4 <_read_r+0x20>)
 80041c8:	4604      	mov	r4, r0
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fd fd4d 	bl	8001c72 <_read>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_read_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_read_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	20000724 	.word	0x20000724

080041e8 <_write_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d07      	ldr	r5, [pc, #28]	@ (8004208 <_write_r+0x20>)
 80041ec:	4604      	mov	r4, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	602a      	str	r2, [r5, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fd fd58 	bl	8001cac <_write>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_write_r+0x1e>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_write_r+0x1e>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000724 	.word	0x20000724

0800420c <__errno>:
 800420c:	4b01      	ldr	r3, [pc, #4]	@ (8004214 <__errno+0x8>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000017c 	.word	0x2000017c

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	@ (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	@ (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	@ (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	@ (800425c <__libc_init_array+0x44>)
 800422c:	f001 ff84 	bl	8006138 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	08006664 	.word	0x08006664
 8004254:	08006664 	.word	0x08006664
 8004258:	08006664 	.word	0x08006664
 800425c:	08006668 	.word	0x08006668

08004260 <__retarget_lock_init_recursive>:
 8004260:	4770      	bx	lr

08004262 <__retarget_lock_acquire_recursive>:
 8004262:	4770      	bx	lr

08004264 <__retarget_lock_release_recursive>:
 8004264:	4770      	bx	lr

08004266 <strcpy>:
 8004266:	4603      	mov	r3, r0
 8004268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426c:	f803 2b01 	strb.w	r2, [r3], #1
 8004270:	2a00      	cmp	r2, #0
 8004272:	d1f9      	bne.n	8004268 <strcpy+0x2>
 8004274:	4770      	bx	lr

08004276 <memcpy>:
 8004276:	440a      	add	r2, r1
 8004278:	4291      	cmp	r1, r2
 800427a:	f100 33ff 	add.w	r3, r0, #4294967295
 800427e:	d100      	bne.n	8004282 <memcpy+0xc>
 8004280:	4770      	bx	lr
 8004282:	b510      	push	{r4, lr}
 8004284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800428c:	4291      	cmp	r1, r2
 800428e:	d1f9      	bne.n	8004284 <memcpy+0xe>
 8004290:	bd10      	pop	{r4, pc}
 8004292:	0000      	movs	r0, r0
 8004294:	0000      	movs	r0, r0
	...

08004298 <nan>:
 8004298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80042a0 <nan+0x8>
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	00000000 	.word	0x00000000
 80042a4:	7ff80000 	.word	0x7ff80000

080042a8 <__assert_func>:
 80042a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042aa:	4614      	mov	r4, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <__assert_func+0x2c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4605      	mov	r5, r0
 80042b4:	68d8      	ldr	r0, [r3, #12]
 80042b6:	b14c      	cbz	r4, 80042cc <__assert_func+0x24>
 80042b8:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <__assert_func+0x30>)
 80042ba:	9100      	str	r1, [sp, #0]
 80042bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042c0:	4906      	ldr	r1, [pc, #24]	@ (80042dc <__assert_func+0x34>)
 80042c2:	462b      	mov	r3, r5
 80042c4:	f001 fde2 	bl	8005e8c <fiprintf>
 80042c8:	f001 fea0 	bl	800600c <abort>
 80042cc:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <__assert_func+0x38>)
 80042ce:	461c      	mov	r4, r3
 80042d0:	e7f3      	b.n	80042ba <__assert_func+0x12>
 80042d2:	bf00      	nop
 80042d4:	2000017c 	.word	0x2000017c
 80042d8:	080062cb 	.word	0x080062cb
 80042dc:	080062d8 	.word	0x080062d8
 80042e0:	08006306 	.word	0x08006306

080042e4 <_free_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4605      	mov	r5, r0
 80042e8:	2900      	cmp	r1, #0
 80042ea:	d041      	beq.n	8004370 <_free_r+0x8c>
 80042ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f0:	1f0c      	subs	r4, r1, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfb8      	it	lt
 80042f6:	18e4      	addlt	r4, r4, r3
 80042f8:	f000 fc34 	bl	8004b64 <__malloc_lock>
 80042fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <_free_r+0x90>)
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x2c>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	4628      	mov	r0, r5
 8004308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800430c:	f000 bc30 	b.w	8004b70 <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x42>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	1821      	adds	r1, r4, r0
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1809      	addeq	r1, r1, r0
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x1e>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x4c>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x42>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1850      	adds	r0, r2, r1
 8004334:	42a0      	cmp	r0, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x6c>
 8004338:	6820      	ldr	r0, [r4, #0]
 800433a:	4401      	add	r1, r0
 800433c:	1850      	adds	r0, r2, r1
 800433e:	4283      	cmp	r3, r0
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x22>
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	4408      	add	r0, r1
 800434c:	6010      	str	r0, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x22>
 8004350:	d902      	bls.n	8004358 <_free_r+0x74>
 8004352:	230c      	movs	r3, #12
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x22>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	1821      	adds	r1, r4, r0
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1809      	addeq	r1, r1, r0
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x22>
 8004370:	bd38      	pop	{r3, r4, r5, pc}
 8004372:	bf00      	nop
 8004374:	20000730 	.word	0x20000730

08004378 <rshift>:
 8004378:	6903      	ldr	r3, [r0, #16]
 800437a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800437e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004382:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004386:	f100 0414 	add.w	r4, r0, #20
 800438a:	dd45      	ble.n	8004418 <rshift+0xa0>
 800438c:	f011 011f 	ands.w	r1, r1, #31
 8004390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004398:	d10c      	bne.n	80043b4 <rshift+0x3c>
 800439a:	f100 0710 	add.w	r7, r0, #16
 800439e:	4629      	mov	r1, r5
 80043a0:	42b1      	cmp	r1, r6
 80043a2:	d334      	bcc.n	800440e <rshift+0x96>
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	1eea      	subs	r2, r5, #3
 80043aa:	4296      	cmp	r6, r2
 80043ac:	bf38      	it	cc
 80043ae:	2300      	movcc	r3, #0
 80043b0:	4423      	add	r3, r4
 80043b2:	e015      	b.n	80043e0 <rshift+0x68>
 80043b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80043b8:	f1c1 0820 	rsb	r8, r1, #32
 80043bc:	40cf      	lsrs	r7, r1
 80043be:	f105 0e04 	add.w	lr, r5, #4
 80043c2:	46a1      	mov	r9, r4
 80043c4:	4576      	cmp	r6, lr
 80043c6:	46f4      	mov	ip, lr
 80043c8:	d815      	bhi.n	80043f6 <rshift+0x7e>
 80043ca:	1a9a      	subs	r2, r3, r2
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	3a04      	subs	r2, #4
 80043d0:	3501      	adds	r5, #1
 80043d2:	42ae      	cmp	r6, r5
 80043d4:	bf38      	it	cc
 80043d6:	2200      	movcc	r2, #0
 80043d8:	18a3      	adds	r3, r4, r2
 80043da:	50a7      	str	r7, [r4, r2]
 80043dc:	b107      	cbz	r7, 80043e0 <rshift+0x68>
 80043de:	3304      	adds	r3, #4
 80043e0:	1b1a      	subs	r2, r3, r4
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80043e8:	bf08      	it	eq
 80043ea:	2300      	moveq	r3, #0
 80043ec:	6102      	str	r2, [r0, #16]
 80043ee:	bf08      	it	eq
 80043f0:	6143      	streq	r3, [r0, #20]
 80043f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043f6:	f8dc c000 	ldr.w	ip, [ip]
 80043fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80043fe:	ea4c 0707 	orr.w	r7, ip, r7
 8004402:	f849 7b04 	str.w	r7, [r9], #4
 8004406:	f85e 7b04 	ldr.w	r7, [lr], #4
 800440a:	40cf      	lsrs	r7, r1
 800440c:	e7da      	b.n	80043c4 <rshift+0x4c>
 800440e:	f851 cb04 	ldr.w	ip, [r1], #4
 8004412:	f847 cf04 	str.w	ip, [r7, #4]!
 8004416:	e7c3      	b.n	80043a0 <rshift+0x28>
 8004418:	4623      	mov	r3, r4
 800441a:	e7e1      	b.n	80043e0 <rshift+0x68>

0800441c <__hexdig_fun>:
 800441c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004420:	2b09      	cmp	r3, #9
 8004422:	d802      	bhi.n	800442a <__hexdig_fun+0xe>
 8004424:	3820      	subs	r0, #32
 8004426:	b2c0      	uxtb	r0, r0
 8004428:	4770      	bx	lr
 800442a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800442e:	2b05      	cmp	r3, #5
 8004430:	d801      	bhi.n	8004436 <__hexdig_fun+0x1a>
 8004432:	3847      	subs	r0, #71	@ 0x47
 8004434:	e7f7      	b.n	8004426 <__hexdig_fun+0xa>
 8004436:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800443a:	2b05      	cmp	r3, #5
 800443c:	d801      	bhi.n	8004442 <__hexdig_fun+0x26>
 800443e:	3827      	subs	r0, #39	@ 0x27
 8004440:	e7f1      	b.n	8004426 <__hexdig_fun+0xa>
 8004442:	2000      	movs	r0, #0
 8004444:	4770      	bx	lr
	...

08004448 <__gethex>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	b085      	sub	sp, #20
 800444e:	468a      	mov	sl, r1
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	680b      	ldr	r3, [r1, #0]
 8004454:	9001      	str	r0, [sp, #4]
 8004456:	4690      	mov	r8, r2
 8004458:	1c9c      	adds	r4, r3, #2
 800445a:	46a1      	mov	r9, r4
 800445c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004460:	2830      	cmp	r0, #48	@ 0x30
 8004462:	d0fa      	beq.n	800445a <__gethex+0x12>
 8004464:	eba9 0303 	sub.w	r3, r9, r3
 8004468:	f1a3 0b02 	sub.w	fp, r3, #2
 800446c:	f7ff ffd6 	bl	800441c <__hexdig_fun>
 8004470:	4605      	mov	r5, r0
 8004472:	2800      	cmp	r0, #0
 8004474:	d168      	bne.n	8004548 <__gethex+0x100>
 8004476:	49a0      	ldr	r1, [pc, #640]	@ (80046f8 <__gethex+0x2b0>)
 8004478:	2201      	movs	r2, #1
 800447a:	4648      	mov	r0, r9
 800447c:	f7ff fe11 	bl	80040a2 <strncmp>
 8004480:	4607      	mov	r7, r0
 8004482:	2800      	cmp	r0, #0
 8004484:	d167      	bne.n	8004556 <__gethex+0x10e>
 8004486:	f899 0001 	ldrb.w	r0, [r9, #1]
 800448a:	4626      	mov	r6, r4
 800448c:	f7ff ffc6 	bl	800441c <__hexdig_fun>
 8004490:	2800      	cmp	r0, #0
 8004492:	d062      	beq.n	800455a <__gethex+0x112>
 8004494:	4623      	mov	r3, r4
 8004496:	7818      	ldrb	r0, [r3, #0]
 8004498:	2830      	cmp	r0, #48	@ 0x30
 800449a:	4699      	mov	r9, r3
 800449c:	f103 0301 	add.w	r3, r3, #1
 80044a0:	d0f9      	beq.n	8004496 <__gethex+0x4e>
 80044a2:	f7ff ffbb 	bl	800441c <__hexdig_fun>
 80044a6:	fab0 f580 	clz	r5, r0
 80044aa:	096d      	lsrs	r5, r5, #5
 80044ac:	f04f 0b01 	mov.w	fp, #1
 80044b0:	464a      	mov	r2, r9
 80044b2:	4616      	mov	r6, r2
 80044b4:	3201      	adds	r2, #1
 80044b6:	7830      	ldrb	r0, [r6, #0]
 80044b8:	f7ff ffb0 	bl	800441c <__hexdig_fun>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1f8      	bne.n	80044b2 <__gethex+0x6a>
 80044c0:	498d      	ldr	r1, [pc, #564]	@ (80046f8 <__gethex+0x2b0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff fdec 	bl	80040a2 <strncmp>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d13f      	bne.n	800454e <__gethex+0x106>
 80044ce:	b944      	cbnz	r4, 80044e2 <__gethex+0x9a>
 80044d0:	1c74      	adds	r4, r6, #1
 80044d2:	4622      	mov	r2, r4
 80044d4:	4616      	mov	r6, r2
 80044d6:	3201      	adds	r2, #1
 80044d8:	7830      	ldrb	r0, [r6, #0]
 80044da:	f7ff ff9f 	bl	800441c <__hexdig_fun>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d1f8      	bne.n	80044d4 <__gethex+0x8c>
 80044e2:	1ba4      	subs	r4, r4, r6
 80044e4:	00a7      	lsls	r7, r4, #2
 80044e6:	7833      	ldrb	r3, [r6, #0]
 80044e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80044ec:	2b50      	cmp	r3, #80	@ 0x50
 80044ee:	d13e      	bne.n	800456e <__gethex+0x126>
 80044f0:	7873      	ldrb	r3, [r6, #1]
 80044f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80044f4:	d033      	beq.n	800455e <__gethex+0x116>
 80044f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80044f8:	d034      	beq.n	8004564 <__gethex+0x11c>
 80044fa:	1c71      	adds	r1, r6, #1
 80044fc:	2400      	movs	r4, #0
 80044fe:	7808      	ldrb	r0, [r1, #0]
 8004500:	f7ff ff8c 	bl	800441c <__hexdig_fun>
 8004504:	1e43      	subs	r3, r0, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b18      	cmp	r3, #24
 800450a:	d830      	bhi.n	800456e <__gethex+0x126>
 800450c:	f1a0 0210 	sub.w	r2, r0, #16
 8004510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004514:	f7ff ff82 	bl	800441c <__hexdig_fun>
 8004518:	f100 3cff 	add.w	ip, r0, #4294967295
 800451c:	fa5f fc8c 	uxtb.w	ip, ip
 8004520:	f1bc 0f18 	cmp.w	ip, #24
 8004524:	f04f 030a 	mov.w	r3, #10
 8004528:	d91e      	bls.n	8004568 <__gethex+0x120>
 800452a:	b104      	cbz	r4, 800452e <__gethex+0xe6>
 800452c:	4252      	negs	r2, r2
 800452e:	4417      	add	r7, r2
 8004530:	f8ca 1000 	str.w	r1, [sl]
 8004534:	b1ed      	cbz	r5, 8004572 <__gethex+0x12a>
 8004536:	f1bb 0f00 	cmp.w	fp, #0
 800453a:	bf0c      	ite	eq
 800453c:	2506      	moveq	r5, #6
 800453e:	2500      	movne	r5, #0
 8004540:	4628      	mov	r0, r5
 8004542:	b005      	add	sp, #20
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	2500      	movs	r5, #0
 800454a:	462c      	mov	r4, r5
 800454c:	e7b0      	b.n	80044b0 <__gethex+0x68>
 800454e:	2c00      	cmp	r4, #0
 8004550:	d1c7      	bne.n	80044e2 <__gethex+0x9a>
 8004552:	4627      	mov	r7, r4
 8004554:	e7c7      	b.n	80044e6 <__gethex+0x9e>
 8004556:	464e      	mov	r6, r9
 8004558:	462f      	mov	r7, r5
 800455a:	2501      	movs	r5, #1
 800455c:	e7c3      	b.n	80044e6 <__gethex+0x9e>
 800455e:	2400      	movs	r4, #0
 8004560:	1cb1      	adds	r1, r6, #2
 8004562:	e7cc      	b.n	80044fe <__gethex+0xb6>
 8004564:	2401      	movs	r4, #1
 8004566:	e7fb      	b.n	8004560 <__gethex+0x118>
 8004568:	fb03 0002 	mla	r0, r3, r2, r0
 800456c:	e7ce      	b.n	800450c <__gethex+0xc4>
 800456e:	4631      	mov	r1, r6
 8004570:	e7de      	b.n	8004530 <__gethex+0xe8>
 8004572:	eba6 0309 	sub.w	r3, r6, r9
 8004576:	3b01      	subs	r3, #1
 8004578:	4629      	mov	r1, r5
 800457a:	2b07      	cmp	r3, #7
 800457c:	dc0a      	bgt.n	8004594 <__gethex+0x14c>
 800457e:	9801      	ldr	r0, [sp, #4]
 8004580:	f000 fafc 	bl	8004b7c <_Balloc>
 8004584:	4604      	mov	r4, r0
 8004586:	b940      	cbnz	r0, 800459a <__gethex+0x152>
 8004588:	4b5c      	ldr	r3, [pc, #368]	@ (80046fc <__gethex+0x2b4>)
 800458a:	4602      	mov	r2, r0
 800458c:	21e4      	movs	r1, #228	@ 0xe4
 800458e:	485c      	ldr	r0, [pc, #368]	@ (8004700 <__gethex+0x2b8>)
 8004590:	f7ff fe8a 	bl	80042a8 <__assert_func>
 8004594:	3101      	adds	r1, #1
 8004596:	105b      	asrs	r3, r3, #1
 8004598:	e7ef      	b.n	800457a <__gethex+0x132>
 800459a:	f100 0a14 	add.w	sl, r0, #20
 800459e:	2300      	movs	r3, #0
 80045a0:	4655      	mov	r5, sl
 80045a2:	469b      	mov	fp, r3
 80045a4:	45b1      	cmp	r9, r6
 80045a6:	d337      	bcc.n	8004618 <__gethex+0x1d0>
 80045a8:	f845 bb04 	str.w	fp, [r5], #4
 80045ac:	eba5 050a 	sub.w	r5, r5, sl
 80045b0:	10ad      	asrs	r5, r5, #2
 80045b2:	6125      	str	r5, [r4, #16]
 80045b4:	4658      	mov	r0, fp
 80045b6:	f000 fbd3 	bl	8004d60 <__hi0bits>
 80045ba:	016d      	lsls	r5, r5, #5
 80045bc:	f8d8 6000 	ldr.w	r6, [r8]
 80045c0:	1a2d      	subs	r5, r5, r0
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	dd54      	ble.n	8004670 <__gethex+0x228>
 80045c6:	1bad      	subs	r5, r5, r6
 80045c8:	4629      	mov	r1, r5
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 ff5f 	bl	800548e <__any_on>
 80045d0:	4681      	mov	r9, r0
 80045d2:	b178      	cbz	r0, 80045f4 <__gethex+0x1ac>
 80045d4:	1e6b      	subs	r3, r5, #1
 80045d6:	1159      	asrs	r1, r3, #5
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80045e0:	f04f 0901 	mov.w	r9, #1
 80045e4:	fa09 f202 	lsl.w	r2, r9, r2
 80045e8:	420a      	tst	r2, r1
 80045ea:	d003      	beq.n	80045f4 <__gethex+0x1ac>
 80045ec:	454b      	cmp	r3, r9
 80045ee:	dc36      	bgt.n	800465e <__gethex+0x216>
 80045f0:	f04f 0902 	mov.w	r9, #2
 80045f4:	4629      	mov	r1, r5
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7ff febe 	bl	8004378 <rshift>
 80045fc:	442f      	add	r7, r5
 80045fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004602:	42bb      	cmp	r3, r7
 8004604:	da42      	bge.n	800468c <__gethex+0x244>
 8004606:	9801      	ldr	r0, [sp, #4]
 8004608:	4621      	mov	r1, r4
 800460a:	f000 faf7 	bl	8004bfc <_Bfree>
 800460e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004610:	2300      	movs	r3, #0
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	25a3      	movs	r5, #163	@ 0xa3
 8004616:	e793      	b.n	8004540 <__gethex+0xf8>
 8004618:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800461c:	2a2e      	cmp	r2, #46	@ 0x2e
 800461e:	d012      	beq.n	8004646 <__gethex+0x1fe>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d104      	bne.n	800462e <__gethex+0x1e6>
 8004624:	f845 bb04 	str.w	fp, [r5], #4
 8004628:	f04f 0b00 	mov.w	fp, #0
 800462c:	465b      	mov	r3, fp
 800462e:	7830      	ldrb	r0, [r6, #0]
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	f7ff fef3 	bl	800441c <__hexdig_fun>
 8004636:	9b03      	ldr	r3, [sp, #12]
 8004638:	f000 000f 	and.w	r0, r0, #15
 800463c:	4098      	lsls	r0, r3
 800463e:	ea4b 0b00 	orr.w	fp, fp, r0
 8004642:	3304      	adds	r3, #4
 8004644:	e7ae      	b.n	80045a4 <__gethex+0x15c>
 8004646:	45b1      	cmp	r9, r6
 8004648:	d8ea      	bhi.n	8004620 <__gethex+0x1d8>
 800464a:	492b      	ldr	r1, [pc, #172]	@ (80046f8 <__gethex+0x2b0>)
 800464c:	9303      	str	r3, [sp, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	4630      	mov	r0, r6
 8004652:	f7ff fd26 	bl	80040a2 <strncmp>
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	2800      	cmp	r0, #0
 800465a:	d1e1      	bne.n	8004620 <__gethex+0x1d8>
 800465c:	e7a2      	b.n	80045a4 <__gethex+0x15c>
 800465e:	1ea9      	subs	r1, r5, #2
 8004660:	4620      	mov	r0, r4
 8004662:	f000 ff14 	bl	800548e <__any_on>
 8004666:	2800      	cmp	r0, #0
 8004668:	d0c2      	beq.n	80045f0 <__gethex+0x1a8>
 800466a:	f04f 0903 	mov.w	r9, #3
 800466e:	e7c1      	b.n	80045f4 <__gethex+0x1ac>
 8004670:	da09      	bge.n	8004686 <__gethex+0x23e>
 8004672:	1b75      	subs	r5, r6, r5
 8004674:	4621      	mov	r1, r4
 8004676:	9801      	ldr	r0, [sp, #4]
 8004678:	462a      	mov	r2, r5
 800467a:	f000 fccf 	bl	800501c <__lshift>
 800467e:	1b7f      	subs	r7, r7, r5
 8004680:	4604      	mov	r4, r0
 8004682:	f100 0a14 	add.w	sl, r0, #20
 8004686:	f04f 0900 	mov.w	r9, #0
 800468a:	e7b8      	b.n	80045fe <__gethex+0x1b6>
 800468c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004690:	42bd      	cmp	r5, r7
 8004692:	dd6f      	ble.n	8004774 <__gethex+0x32c>
 8004694:	1bed      	subs	r5, r5, r7
 8004696:	42ae      	cmp	r6, r5
 8004698:	dc34      	bgt.n	8004704 <__gethex+0x2bc>
 800469a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d022      	beq.n	80046e8 <__gethex+0x2a0>
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d024      	beq.n	80046f0 <__gethex+0x2a8>
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d115      	bne.n	80046d6 <__gethex+0x28e>
 80046aa:	42ae      	cmp	r6, r5
 80046ac:	d113      	bne.n	80046d6 <__gethex+0x28e>
 80046ae:	2e01      	cmp	r6, #1
 80046b0:	d10b      	bne.n	80046ca <__gethex+0x282>
 80046b2:	9a02      	ldr	r2, [sp, #8]
 80046b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	2301      	movs	r3, #1
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	f8ca 3000 	str.w	r3, [sl]
 80046c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046c4:	2562      	movs	r5, #98	@ 0x62
 80046c6:	601c      	str	r4, [r3, #0]
 80046c8:	e73a      	b.n	8004540 <__gethex+0xf8>
 80046ca:	1e71      	subs	r1, r6, #1
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fede 	bl	800548e <__any_on>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d1ed      	bne.n	80046b2 <__gethex+0x26a>
 80046d6:	9801      	ldr	r0, [sp, #4]
 80046d8:	4621      	mov	r1, r4
 80046da:	f000 fa8f 	bl	8004bfc <_Bfree>
 80046de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046e0:	2300      	movs	r3, #0
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	2550      	movs	r5, #80	@ 0x50
 80046e6:	e72b      	b.n	8004540 <__gethex+0xf8>
 80046e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f3      	bne.n	80046d6 <__gethex+0x28e>
 80046ee:	e7e0      	b.n	80046b2 <__gethex+0x26a>
 80046f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1dd      	bne.n	80046b2 <__gethex+0x26a>
 80046f6:	e7ee      	b.n	80046d6 <__gethex+0x28e>
 80046f8:	08006244 	.word	0x08006244
 80046fc:	08006307 	.word	0x08006307
 8004700:	08006318 	.word	0x08006318
 8004704:	1e6f      	subs	r7, r5, #1
 8004706:	f1b9 0f00 	cmp.w	r9, #0
 800470a:	d130      	bne.n	800476e <__gethex+0x326>
 800470c:	b127      	cbz	r7, 8004718 <__gethex+0x2d0>
 800470e:	4639      	mov	r1, r7
 8004710:	4620      	mov	r0, r4
 8004712:	f000 febc 	bl	800548e <__any_on>
 8004716:	4681      	mov	r9, r0
 8004718:	117a      	asrs	r2, r7, #5
 800471a:	2301      	movs	r3, #1
 800471c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004720:	f007 071f 	and.w	r7, r7, #31
 8004724:	40bb      	lsls	r3, r7
 8004726:	4213      	tst	r3, r2
 8004728:	4629      	mov	r1, r5
 800472a:	4620      	mov	r0, r4
 800472c:	bf18      	it	ne
 800472e:	f049 0902 	orrne.w	r9, r9, #2
 8004732:	f7ff fe21 	bl	8004378 <rshift>
 8004736:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800473a:	1b76      	subs	r6, r6, r5
 800473c:	2502      	movs	r5, #2
 800473e:	f1b9 0f00 	cmp.w	r9, #0
 8004742:	d047      	beq.n	80047d4 <__gethex+0x38c>
 8004744:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d015      	beq.n	8004778 <__gethex+0x330>
 800474c:	2b03      	cmp	r3, #3
 800474e:	d017      	beq.n	8004780 <__gethex+0x338>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d109      	bne.n	8004768 <__gethex+0x320>
 8004754:	f019 0f02 	tst.w	r9, #2
 8004758:	d006      	beq.n	8004768 <__gethex+0x320>
 800475a:	f8da 3000 	ldr.w	r3, [sl]
 800475e:	ea49 0903 	orr.w	r9, r9, r3
 8004762:	f019 0f01 	tst.w	r9, #1
 8004766:	d10e      	bne.n	8004786 <__gethex+0x33e>
 8004768:	f045 0510 	orr.w	r5, r5, #16
 800476c:	e032      	b.n	80047d4 <__gethex+0x38c>
 800476e:	f04f 0901 	mov.w	r9, #1
 8004772:	e7d1      	b.n	8004718 <__gethex+0x2d0>
 8004774:	2501      	movs	r5, #1
 8004776:	e7e2      	b.n	800473e <__gethex+0x2f6>
 8004778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800477a:	f1c3 0301 	rsb	r3, r3, #1
 800477e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <__gethex+0x320>
 8004786:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800478a:	f104 0314 	add.w	r3, r4, #20
 800478e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004792:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004796:	f04f 0c00 	mov.w	ip, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80047a4:	d01b      	beq.n	80047de <__gethex+0x396>
 80047a6:	3201      	adds	r2, #1
 80047a8:	6002      	str	r2, [r0, #0]
 80047aa:	2d02      	cmp	r5, #2
 80047ac:	f104 0314 	add.w	r3, r4, #20
 80047b0:	d13c      	bne.n	800482c <__gethex+0x3e4>
 80047b2:	f8d8 2000 	ldr.w	r2, [r8]
 80047b6:	3a01      	subs	r2, #1
 80047b8:	42b2      	cmp	r2, r6
 80047ba:	d109      	bne.n	80047d0 <__gethex+0x388>
 80047bc:	1171      	asrs	r1, r6, #5
 80047be:	2201      	movs	r2, #1
 80047c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80047c4:	f006 061f 	and.w	r6, r6, #31
 80047c8:	fa02 f606 	lsl.w	r6, r2, r6
 80047cc:	421e      	tst	r6, r3
 80047ce:	d13a      	bne.n	8004846 <__gethex+0x3fe>
 80047d0:	f045 0520 	orr.w	r5, r5, #32
 80047d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047d6:	601c      	str	r4, [r3, #0]
 80047d8:	9b02      	ldr	r3, [sp, #8]
 80047da:	601f      	str	r7, [r3, #0]
 80047dc:	e6b0      	b.n	8004540 <__gethex+0xf8>
 80047de:	4299      	cmp	r1, r3
 80047e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80047e4:	d8d9      	bhi.n	800479a <__gethex+0x352>
 80047e6:	68a3      	ldr	r3, [r4, #8]
 80047e8:	459b      	cmp	fp, r3
 80047ea:	db17      	blt.n	800481c <__gethex+0x3d4>
 80047ec:	6861      	ldr	r1, [r4, #4]
 80047ee:	9801      	ldr	r0, [sp, #4]
 80047f0:	3101      	adds	r1, #1
 80047f2:	f000 f9c3 	bl	8004b7c <_Balloc>
 80047f6:	4681      	mov	r9, r0
 80047f8:	b918      	cbnz	r0, 8004802 <__gethex+0x3ba>
 80047fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <__gethex+0x41c>)
 80047fc:	4602      	mov	r2, r0
 80047fe:	2184      	movs	r1, #132	@ 0x84
 8004800:	e6c5      	b.n	800458e <__gethex+0x146>
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	3202      	adds	r2, #2
 8004806:	f104 010c 	add.w	r1, r4, #12
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	300c      	adds	r0, #12
 800480e:	f7ff fd32 	bl	8004276 <memcpy>
 8004812:	4621      	mov	r1, r4
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	f000 f9f1 	bl	8004bfc <_Bfree>
 800481a:	464c      	mov	r4, r9
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004824:	6122      	str	r2, [r4, #16]
 8004826:	2201      	movs	r2, #1
 8004828:	615a      	str	r2, [r3, #20]
 800482a:	e7be      	b.n	80047aa <__gethex+0x362>
 800482c:	6922      	ldr	r2, [r4, #16]
 800482e:	455a      	cmp	r2, fp
 8004830:	dd0b      	ble.n	800484a <__gethex+0x402>
 8004832:	2101      	movs	r1, #1
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff fd9f 	bl	8004378 <rshift>
 800483a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800483e:	3701      	adds	r7, #1
 8004840:	42bb      	cmp	r3, r7
 8004842:	f6ff aee0 	blt.w	8004606 <__gethex+0x1be>
 8004846:	2501      	movs	r5, #1
 8004848:	e7c2      	b.n	80047d0 <__gethex+0x388>
 800484a:	f016 061f 	ands.w	r6, r6, #31
 800484e:	d0fa      	beq.n	8004846 <__gethex+0x3fe>
 8004850:	4453      	add	r3, sl
 8004852:	f1c6 0620 	rsb	r6, r6, #32
 8004856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800485a:	f000 fa81 	bl	8004d60 <__hi0bits>
 800485e:	42b0      	cmp	r0, r6
 8004860:	dbe7      	blt.n	8004832 <__gethex+0x3ea>
 8004862:	e7f0      	b.n	8004846 <__gethex+0x3fe>
 8004864:	08006307 	.word	0x08006307

08004868 <L_shift>:
 8004868:	f1c2 0208 	rsb	r2, r2, #8
 800486c:	0092      	lsls	r2, r2, #2
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	f1c2 0620 	rsb	r6, r2, #32
 8004874:	6843      	ldr	r3, [r0, #4]
 8004876:	6804      	ldr	r4, [r0, #0]
 8004878:	fa03 f506 	lsl.w	r5, r3, r6
 800487c:	432c      	orrs	r4, r5
 800487e:	40d3      	lsrs	r3, r2
 8004880:	6004      	str	r4, [r0, #0]
 8004882:	f840 3f04 	str.w	r3, [r0, #4]!
 8004886:	4288      	cmp	r0, r1
 8004888:	d3f4      	bcc.n	8004874 <L_shift+0xc>
 800488a:	bd70      	pop	{r4, r5, r6, pc}

0800488c <__match>:
 800488c:	b530      	push	{r4, r5, lr}
 800488e:	6803      	ldr	r3, [r0, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004896:	b914      	cbnz	r4, 800489e <__match+0x12>
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	2001      	movs	r0, #1
 800489c:	bd30      	pop	{r4, r5, pc}
 800489e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80048a6:	2d19      	cmp	r5, #25
 80048a8:	bf98      	it	ls
 80048aa:	3220      	addls	r2, #32
 80048ac:	42a2      	cmp	r2, r4
 80048ae:	d0f0      	beq.n	8004892 <__match+0x6>
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7f3      	b.n	800489c <__match+0x10>

080048b4 <__hexnan>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	680b      	ldr	r3, [r1, #0]
 80048ba:	6801      	ldr	r1, [r0, #0]
 80048bc:	115e      	asrs	r6, r3, #5
 80048be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80048c2:	f013 031f 	ands.w	r3, r3, #31
 80048c6:	b087      	sub	sp, #28
 80048c8:	bf18      	it	ne
 80048ca:	3604      	addne	r6, #4
 80048cc:	2500      	movs	r5, #0
 80048ce:	1f37      	subs	r7, r6, #4
 80048d0:	4682      	mov	sl, r0
 80048d2:	4690      	mov	r8, r2
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80048da:	46b9      	mov	r9, r7
 80048dc:	463c      	mov	r4, r7
 80048de:	9502      	str	r5, [sp, #8]
 80048e0:	46ab      	mov	fp, r5
 80048e2:	784a      	ldrb	r2, [r1, #1]
 80048e4:	1c4b      	adds	r3, r1, #1
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	b342      	cbz	r2, 800493c <__hexnan+0x88>
 80048ea:	4610      	mov	r0, r2
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	9204      	str	r2, [sp, #16]
 80048f0:	f7ff fd94 	bl	800441c <__hexdig_fun>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d151      	bne.n	800499c <__hexnan+0xe8>
 80048f8:	9a04      	ldr	r2, [sp, #16]
 80048fa:	9905      	ldr	r1, [sp, #20]
 80048fc:	2a20      	cmp	r2, #32
 80048fe:	d818      	bhi.n	8004932 <__hexnan+0x7e>
 8004900:	9b02      	ldr	r3, [sp, #8]
 8004902:	459b      	cmp	fp, r3
 8004904:	dd13      	ble.n	800492e <__hexnan+0x7a>
 8004906:	454c      	cmp	r4, r9
 8004908:	d206      	bcs.n	8004918 <__hexnan+0x64>
 800490a:	2d07      	cmp	r5, #7
 800490c:	dc04      	bgt.n	8004918 <__hexnan+0x64>
 800490e:	462a      	mov	r2, r5
 8004910:	4649      	mov	r1, r9
 8004912:	4620      	mov	r0, r4
 8004914:	f7ff ffa8 	bl	8004868 <L_shift>
 8004918:	4544      	cmp	r4, r8
 800491a:	d952      	bls.n	80049c2 <__hexnan+0x10e>
 800491c:	2300      	movs	r3, #0
 800491e:	f1a4 0904 	sub.w	r9, r4, #4
 8004922:	f844 3c04 	str.w	r3, [r4, #-4]
 8004926:	f8cd b008 	str.w	fp, [sp, #8]
 800492a:	464c      	mov	r4, r9
 800492c:	461d      	mov	r5, r3
 800492e:	9903      	ldr	r1, [sp, #12]
 8004930:	e7d7      	b.n	80048e2 <__hexnan+0x2e>
 8004932:	2a29      	cmp	r2, #41	@ 0x29
 8004934:	d157      	bne.n	80049e6 <__hexnan+0x132>
 8004936:	3102      	adds	r1, #2
 8004938:	f8ca 1000 	str.w	r1, [sl]
 800493c:	f1bb 0f00 	cmp.w	fp, #0
 8004940:	d051      	beq.n	80049e6 <__hexnan+0x132>
 8004942:	454c      	cmp	r4, r9
 8004944:	d206      	bcs.n	8004954 <__hexnan+0xa0>
 8004946:	2d07      	cmp	r5, #7
 8004948:	dc04      	bgt.n	8004954 <__hexnan+0xa0>
 800494a:	462a      	mov	r2, r5
 800494c:	4649      	mov	r1, r9
 800494e:	4620      	mov	r0, r4
 8004950:	f7ff ff8a 	bl	8004868 <L_shift>
 8004954:	4544      	cmp	r4, r8
 8004956:	d936      	bls.n	80049c6 <__hexnan+0x112>
 8004958:	f1a8 0204 	sub.w	r2, r8, #4
 800495c:	4623      	mov	r3, r4
 800495e:	f853 1b04 	ldr.w	r1, [r3], #4
 8004962:	f842 1f04 	str.w	r1, [r2, #4]!
 8004966:	429f      	cmp	r7, r3
 8004968:	d2f9      	bcs.n	800495e <__hexnan+0xaa>
 800496a:	1b3b      	subs	r3, r7, r4
 800496c:	f023 0303 	bic.w	r3, r3, #3
 8004970:	3304      	adds	r3, #4
 8004972:	3401      	adds	r4, #1
 8004974:	3e03      	subs	r6, #3
 8004976:	42b4      	cmp	r4, r6
 8004978:	bf88      	it	hi
 800497a:	2304      	movhi	r3, #4
 800497c:	4443      	add	r3, r8
 800497e:	2200      	movs	r2, #0
 8004980:	f843 2b04 	str.w	r2, [r3], #4
 8004984:	429f      	cmp	r7, r3
 8004986:	d2fb      	bcs.n	8004980 <__hexnan+0xcc>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b91b      	cbnz	r3, 8004994 <__hexnan+0xe0>
 800498c:	4547      	cmp	r7, r8
 800498e:	d128      	bne.n	80049e2 <__hexnan+0x12e>
 8004990:	2301      	movs	r3, #1
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	2005      	movs	r0, #5
 8004996:	b007      	add	sp, #28
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	3501      	adds	r5, #1
 800499e:	2d08      	cmp	r5, #8
 80049a0:	f10b 0b01 	add.w	fp, fp, #1
 80049a4:	dd06      	ble.n	80049b4 <__hexnan+0x100>
 80049a6:	4544      	cmp	r4, r8
 80049a8:	d9c1      	bls.n	800492e <__hexnan+0x7a>
 80049aa:	2300      	movs	r3, #0
 80049ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80049b0:	2501      	movs	r5, #1
 80049b2:	3c04      	subs	r4, #4
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	f000 000f 	and.w	r0, r0, #15
 80049ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	e7b5      	b.n	800492e <__hexnan+0x7a>
 80049c2:	2508      	movs	r5, #8
 80049c4:	e7b3      	b.n	800492e <__hexnan+0x7a>
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0dd      	beq.n	8004988 <__hexnan+0xd4>
 80049cc:	f1c3 0320 	rsb	r3, r3, #32
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	40da      	lsrs	r2, r3
 80049d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80049da:	4013      	ands	r3, r2
 80049dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80049e0:	e7d2      	b.n	8004988 <__hexnan+0xd4>
 80049e2:	3f04      	subs	r7, #4
 80049e4:	e7d0      	b.n	8004988 <__hexnan+0xd4>
 80049e6:	2004      	movs	r0, #4
 80049e8:	e7d5      	b.n	8004996 <__hexnan+0xe2>
	...

080049ec <malloc>:
 80049ec:	4b02      	ldr	r3, [pc, #8]	@ (80049f8 <malloc+0xc>)
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f000 b825 	b.w	8004a40 <_malloc_r>
 80049f6:	bf00      	nop
 80049f8:	2000017c 	.word	0x2000017c

080049fc <sbrk_aligned>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4e0f      	ldr	r6, [pc, #60]	@ (8004a3c <sbrk_aligned+0x40>)
 8004a00:	460c      	mov	r4, r1
 8004a02:	6831      	ldr	r1, [r6, #0]
 8004a04:	4605      	mov	r5, r0
 8004a06:	b911      	cbnz	r1, 8004a0e <sbrk_aligned+0x12>
 8004a08:	f001 faf0 	bl	8005fec <_sbrk_r>
 8004a0c:	6030      	str	r0, [r6, #0]
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f001 faeb 	bl	8005fec <_sbrk_r>
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	d103      	bne.n	8004a22 <sbrk_aligned+0x26>
 8004a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a1e:	4620      	mov	r0, r4
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d0f8      	beq.n	8004a1e <sbrk_aligned+0x22>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f001 fadc 	bl	8005fec <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d1f2      	bne.n	8004a1e <sbrk_aligned+0x22>
 8004a38:	e7ef      	b.n	8004a1a <sbrk_aligned+0x1e>
 8004a3a:	bf00      	nop
 8004a3c:	2000072c 	.word	0x2000072c

08004a40 <_malloc_r>:
 8004a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	1ccd      	adds	r5, r1, #3
 8004a46:	f025 0503 	bic.w	r5, r5, #3
 8004a4a:	3508      	adds	r5, #8
 8004a4c:	2d0c      	cmp	r5, #12
 8004a4e:	bf38      	it	cc
 8004a50:	250c      	movcc	r5, #12
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	4606      	mov	r6, r0
 8004a56:	db01      	blt.n	8004a5c <_malloc_r+0x1c>
 8004a58:	42a9      	cmp	r1, r5
 8004a5a:	d904      	bls.n	8004a66 <_malloc_r+0x26>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	2000      	movs	r0, #0
 8004a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b3c <_malloc_r+0xfc>
 8004a6a:	f000 f87b 	bl	8004b64 <__malloc_lock>
 8004a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a72:	461c      	mov	r4, r3
 8004a74:	bb44      	cbnz	r4, 8004ac8 <_malloc_r+0x88>
 8004a76:	4629      	mov	r1, r5
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ffbf 	bl	80049fc <sbrk_aligned>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	4604      	mov	r4, r0
 8004a82:	d158      	bne.n	8004b36 <_malloc_r+0xf6>
 8004a84:	f8d8 4000 	ldr.w	r4, [r8]
 8004a88:	4627      	mov	r7, r4
 8004a8a:	2f00      	cmp	r7, #0
 8004a8c:	d143      	bne.n	8004b16 <_malloc_r+0xd6>
 8004a8e:	2c00      	cmp	r4, #0
 8004a90:	d04b      	beq.n	8004b2a <_malloc_r+0xea>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	4639      	mov	r1, r7
 8004a96:	4630      	mov	r0, r6
 8004a98:	eb04 0903 	add.w	r9, r4, r3
 8004a9c:	f001 faa6 	bl	8005fec <_sbrk_r>
 8004aa0:	4581      	cmp	r9, r0
 8004aa2:	d142      	bne.n	8004b2a <_malloc_r+0xea>
 8004aa4:	6821      	ldr	r1, [r4, #0]
 8004aa6:	1a6d      	subs	r5, r5, r1
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ffa6 	bl	80049fc <sbrk_aligned>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d03a      	beq.n	8004b2a <_malloc_r+0xea>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	442b      	add	r3, r5
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	f8d8 3000 	ldr.w	r3, [r8]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	bb62      	cbnz	r2, 8004b1c <_malloc_r+0xdc>
 8004ac2:	f8c8 7000 	str.w	r7, [r8]
 8004ac6:	e00f      	b.n	8004ae8 <_malloc_r+0xa8>
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	1b52      	subs	r2, r2, r5
 8004acc:	d420      	bmi.n	8004b10 <_malloc_r+0xd0>
 8004ace:	2a0b      	cmp	r2, #11
 8004ad0:	d917      	bls.n	8004b02 <_malloc_r+0xc2>
 8004ad2:	1961      	adds	r1, r4, r5
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	6025      	str	r5, [r4, #0]
 8004ad8:	bf18      	it	ne
 8004ada:	6059      	strne	r1, [r3, #4]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	bf08      	it	eq
 8004ae0:	f8c8 1000 	streq.w	r1, [r8]
 8004ae4:	5162      	str	r2, [r4, r5]
 8004ae6:	604b      	str	r3, [r1, #4]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f841 	bl	8004b70 <__malloc_unlock>
 8004aee:	f104 000b 	add.w	r0, r4, #11
 8004af2:	1d23      	adds	r3, r4, #4
 8004af4:	f020 0007 	bic.w	r0, r0, #7
 8004af8:	1ac2      	subs	r2, r0, r3
 8004afa:	bf1c      	itt	ne
 8004afc:	1a1b      	subne	r3, r3, r0
 8004afe:	50a3      	strne	r3, [r4, r2]
 8004b00:	e7af      	b.n	8004a62 <_malloc_r+0x22>
 8004b02:	6862      	ldr	r2, [r4, #4]
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	bf0c      	ite	eq
 8004b08:	f8c8 2000 	streq.w	r2, [r8]
 8004b0c:	605a      	strne	r2, [r3, #4]
 8004b0e:	e7eb      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b10:	4623      	mov	r3, r4
 8004b12:	6864      	ldr	r4, [r4, #4]
 8004b14:	e7ae      	b.n	8004a74 <_malloc_r+0x34>
 8004b16:	463c      	mov	r4, r7
 8004b18:	687f      	ldr	r7, [r7, #4]
 8004b1a:	e7b6      	b.n	8004a8a <_malloc_r+0x4a>
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d1fb      	bne.n	8004b1c <_malloc_r+0xdc>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6053      	str	r3, [r2, #4]
 8004b28:	e7de      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 f81e 	bl	8004b70 <__malloc_unlock>
 8004b34:	e794      	b.n	8004a60 <_malloc_r+0x20>
 8004b36:	6005      	str	r5, [r0, #0]
 8004b38:	e7d6      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b3a:	bf00      	nop
 8004b3c:	20000730 	.word	0x20000730

08004b40 <__ascii_mbtowc>:
 8004b40:	b082      	sub	sp, #8
 8004b42:	b901      	cbnz	r1, 8004b46 <__ascii_mbtowc+0x6>
 8004b44:	a901      	add	r1, sp, #4
 8004b46:	b142      	cbz	r2, 8004b5a <__ascii_mbtowc+0x1a>
 8004b48:	b14b      	cbz	r3, 8004b5e <__ascii_mbtowc+0x1e>
 8004b4a:	7813      	ldrb	r3, [r2, #0]
 8004b4c:	600b      	str	r3, [r1, #0]
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	1e10      	subs	r0, r2, #0
 8004b52:	bf18      	it	ne
 8004b54:	2001      	movne	r0, #1
 8004b56:	b002      	add	sp, #8
 8004b58:	4770      	bx	lr
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	e7fb      	b.n	8004b56 <__ascii_mbtowc+0x16>
 8004b5e:	f06f 0001 	mvn.w	r0, #1
 8004b62:	e7f8      	b.n	8004b56 <__ascii_mbtowc+0x16>

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	@ (8004b6c <__malloc_lock+0x8>)
 8004b66:	f7ff bb7c 	b.w	8004262 <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000728 	.word	0x20000728

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f7ff bb77 	b.w	8004264 <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000728 	.word	0x20000728

08004b7c <_Balloc>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	69c6      	ldr	r6, [r0, #28]
 8004b80:	4604      	mov	r4, r0
 8004b82:	460d      	mov	r5, r1
 8004b84:	b976      	cbnz	r6, 8004ba4 <_Balloc+0x28>
 8004b86:	2010      	movs	r0, #16
 8004b88:	f7ff ff30 	bl	80049ec <malloc>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	61e0      	str	r0, [r4, #28]
 8004b90:	b920      	cbnz	r0, 8004b9c <_Balloc+0x20>
 8004b92:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <_Balloc+0x78>)
 8004b94:	4818      	ldr	r0, [pc, #96]	@ (8004bf8 <_Balloc+0x7c>)
 8004b96:	216b      	movs	r1, #107	@ 0x6b
 8004b98:	f7ff fb86 	bl	80042a8 <__assert_func>
 8004b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ba0:	6006      	str	r6, [r0, #0]
 8004ba2:	60c6      	str	r6, [r0, #12]
 8004ba4:	69e6      	ldr	r6, [r4, #28]
 8004ba6:	68f3      	ldr	r3, [r6, #12]
 8004ba8:	b183      	cbz	r3, 8004bcc <_Balloc+0x50>
 8004baa:	69e3      	ldr	r3, [r4, #28]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bb2:	b9b8      	cbnz	r0, 8004be4 <_Balloc+0x68>
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8004bba:	1d72      	adds	r2, r6, #5
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f001 fa2b 	bl	800601a <_calloc_r>
 8004bc4:	b160      	cbz	r0, 8004be0 <_Balloc+0x64>
 8004bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bca:	e00e      	b.n	8004bea <_Balloc+0x6e>
 8004bcc:	2221      	movs	r2, #33	@ 0x21
 8004bce:	2104      	movs	r1, #4
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f001 fa22 	bl	800601a <_calloc_r>
 8004bd6:	69e3      	ldr	r3, [r4, #28]
 8004bd8:	60f0      	str	r0, [r6, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e4      	bne.n	8004baa <_Balloc+0x2e>
 8004be0:	2000      	movs	r0, #0
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	6802      	ldr	r2, [r0, #0]
 8004be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004bea:	2300      	movs	r3, #0
 8004bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004bf0:	e7f7      	b.n	8004be2 <_Balloc+0x66>
 8004bf2:	bf00      	nop
 8004bf4:	08006252 	.word	0x08006252
 8004bf8:	08006378 	.word	0x08006378

08004bfc <_Bfree>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	69c6      	ldr	r6, [r0, #28]
 8004c00:	4605      	mov	r5, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	b976      	cbnz	r6, 8004c24 <_Bfree+0x28>
 8004c06:	2010      	movs	r0, #16
 8004c08:	f7ff fef0 	bl	80049ec <malloc>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	61e8      	str	r0, [r5, #28]
 8004c10:	b920      	cbnz	r0, 8004c1c <_Bfree+0x20>
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <_Bfree+0x3c>)
 8004c14:	4809      	ldr	r0, [pc, #36]	@ (8004c3c <_Bfree+0x40>)
 8004c16:	218f      	movs	r1, #143	@ 0x8f
 8004c18:	f7ff fb46 	bl	80042a8 <__assert_func>
 8004c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c20:	6006      	str	r6, [r0, #0]
 8004c22:	60c6      	str	r6, [r0, #12]
 8004c24:	b13c      	cbz	r4, 8004c36 <_Bfree+0x3a>
 8004c26:	69eb      	ldr	r3, [r5, #28]
 8004c28:	6862      	ldr	r2, [r4, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c30:	6021      	str	r1, [r4, #0]
 8004c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	08006252 	.word	0x08006252
 8004c3c:	08006378 	.word	0x08006378

08004c40 <__multadd>:
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c44:	690d      	ldr	r5, [r1, #16]
 8004c46:	4607      	mov	r7, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	461e      	mov	r6, r3
 8004c4c:	f101 0c14 	add.w	ip, r1, #20
 8004c50:	2000      	movs	r0, #0
 8004c52:	f8dc 3000 	ldr.w	r3, [ip]
 8004c56:	b299      	uxth	r1, r3
 8004c58:	fb02 6101 	mla	r1, r2, r1, r6
 8004c5c:	0c1e      	lsrs	r6, r3, #16
 8004c5e:	0c0b      	lsrs	r3, r1, #16
 8004c60:	fb02 3306 	mla	r3, r2, r6, r3
 8004c64:	b289      	uxth	r1, r1
 8004c66:	3001      	adds	r0, #1
 8004c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c6c:	4285      	cmp	r5, r0
 8004c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8004c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c76:	dcec      	bgt.n	8004c52 <__multadd+0x12>
 8004c78:	b30e      	cbz	r6, 8004cbe <__multadd+0x7e>
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dc19      	bgt.n	8004cb4 <__multadd+0x74>
 8004c80:	6861      	ldr	r1, [r4, #4]
 8004c82:	4638      	mov	r0, r7
 8004c84:	3101      	adds	r1, #1
 8004c86:	f7ff ff79 	bl	8004b7c <_Balloc>
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	b928      	cbnz	r0, 8004c9a <__multadd+0x5a>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <__multadd+0x84>)
 8004c92:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <__multadd+0x88>)
 8004c94:	21ba      	movs	r1, #186	@ 0xba
 8004c96:	f7ff fb07 	bl	80042a8 <__assert_func>
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	3202      	adds	r2, #2
 8004c9e:	f104 010c 	add.w	r1, r4, #12
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	300c      	adds	r0, #12
 8004ca6:	f7ff fae6 	bl	8004276 <memcpy>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ffa5 	bl	8004bfc <_Bfree>
 8004cb2:	4644      	mov	r4, r8
 8004cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004cb8:	3501      	adds	r5, #1
 8004cba:	615e      	str	r6, [r3, #20]
 8004cbc:	6125      	str	r5, [r4, #16]
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	08006307 	.word	0x08006307
 8004cc8:	08006378 	.word	0x08006378

08004ccc <__s2b>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	461f      	mov	r7, r3
 8004cd6:	2209      	movs	r2, #9
 8004cd8:	3308      	adds	r3, #8
 8004cda:	4606      	mov	r6, r0
 8004cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	db09      	blt.n	8004cfc <__s2b+0x30>
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f7ff ff47 	bl	8004b7c <_Balloc>
 8004cee:	b940      	cbnz	r0, 8004d02 <__s2b+0x36>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <__s2b+0x8c>)
 8004cf4:	4819      	ldr	r0, [pc, #100]	@ (8004d5c <__s2b+0x90>)
 8004cf6:	21d3      	movs	r1, #211	@ 0xd3
 8004cf8:	f7ff fad6 	bl	80042a8 <__assert_func>
 8004cfc:	0052      	lsls	r2, r2, #1
 8004cfe:	3101      	adds	r1, #1
 8004d00:	e7f0      	b.n	8004ce4 <__s2b+0x18>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	6143      	str	r3, [r0, #20]
 8004d06:	2d09      	cmp	r5, #9
 8004d08:	f04f 0301 	mov.w	r3, #1
 8004d0c:	6103      	str	r3, [r0, #16]
 8004d0e:	dd16      	ble.n	8004d3e <__s2b+0x72>
 8004d10:	f104 0909 	add.w	r9, r4, #9
 8004d14:	46c8      	mov	r8, r9
 8004d16:	442c      	add	r4, r5
 8004d18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	3b30      	subs	r3, #48	@ 0x30
 8004d20:	220a      	movs	r2, #10
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ff8c 	bl	8004c40 <__multadd>
 8004d28:	45a0      	cmp	r8, r4
 8004d2a:	d1f5      	bne.n	8004d18 <__s2b+0x4c>
 8004d2c:	f1a5 0408 	sub.w	r4, r5, #8
 8004d30:	444c      	add	r4, r9
 8004d32:	1b2d      	subs	r5, r5, r4
 8004d34:	1963      	adds	r3, r4, r5
 8004d36:	42bb      	cmp	r3, r7
 8004d38:	db04      	blt.n	8004d44 <__s2b+0x78>
 8004d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3e:	340a      	adds	r4, #10
 8004d40:	2509      	movs	r5, #9
 8004d42:	e7f6      	b.n	8004d32 <__s2b+0x66>
 8004d44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d48:	4601      	mov	r1, r0
 8004d4a:	3b30      	subs	r3, #48	@ 0x30
 8004d4c:	220a      	movs	r2, #10
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff ff76 	bl	8004c40 <__multadd>
 8004d54:	e7ee      	b.n	8004d34 <__s2b+0x68>
 8004d56:	bf00      	nop
 8004d58:	08006307 	.word	0x08006307
 8004d5c:	08006378 	.word	0x08006378

08004d60 <__hi0bits>:
 8004d60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004d64:	4603      	mov	r3, r0
 8004d66:	bf36      	itet	cc
 8004d68:	0403      	lslcc	r3, r0, #16
 8004d6a:	2000      	movcs	r0, #0
 8004d6c:	2010      	movcc	r0, #16
 8004d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d72:	bf3c      	itt	cc
 8004d74:	021b      	lslcc	r3, r3, #8
 8004d76:	3008      	addcc	r0, #8
 8004d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d7c:	bf3c      	itt	cc
 8004d7e:	011b      	lslcc	r3, r3, #4
 8004d80:	3004      	addcc	r0, #4
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d86:	bf3c      	itt	cc
 8004d88:	009b      	lslcc	r3, r3, #2
 8004d8a:	3002      	addcc	r0, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db05      	blt.n	8004d9c <__hi0bits+0x3c>
 8004d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004d94:	f100 0001 	add.w	r0, r0, #1
 8004d98:	bf08      	it	eq
 8004d9a:	2020      	moveq	r0, #32
 8004d9c:	4770      	bx	lr

08004d9e <__lo0bits>:
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	4602      	mov	r2, r0
 8004da2:	f013 0007 	ands.w	r0, r3, #7
 8004da6:	d00b      	beq.n	8004dc0 <__lo0bits+0x22>
 8004da8:	07d9      	lsls	r1, r3, #31
 8004daa:	d421      	bmi.n	8004df0 <__lo0bits+0x52>
 8004dac:	0798      	lsls	r0, r3, #30
 8004dae:	bf49      	itett	mi
 8004db0:	085b      	lsrmi	r3, r3, #1
 8004db2:	089b      	lsrpl	r3, r3, #2
 8004db4:	2001      	movmi	r0, #1
 8004db6:	6013      	strmi	r3, [r2, #0]
 8004db8:	bf5c      	itt	pl
 8004dba:	6013      	strpl	r3, [r2, #0]
 8004dbc:	2002      	movpl	r0, #2
 8004dbe:	4770      	bx	lr
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	b909      	cbnz	r1, 8004dc8 <__lo0bits+0x2a>
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	2010      	movs	r0, #16
 8004dc8:	b2d9      	uxtb	r1, r3
 8004dca:	b909      	cbnz	r1, 8004dd0 <__lo0bits+0x32>
 8004dcc:	3008      	adds	r0, #8
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	0719      	lsls	r1, r3, #28
 8004dd2:	bf04      	itt	eq
 8004dd4:	091b      	lsreq	r3, r3, #4
 8004dd6:	3004      	addeq	r0, #4
 8004dd8:	0799      	lsls	r1, r3, #30
 8004dda:	bf04      	itt	eq
 8004ddc:	089b      	lsreq	r3, r3, #2
 8004dde:	3002      	addeq	r0, #2
 8004de0:	07d9      	lsls	r1, r3, #31
 8004de2:	d403      	bmi.n	8004dec <__lo0bits+0x4e>
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	f100 0001 	add.w	r0, r0, #1
 8004dea:	d003      	beq.n	8004df4 <__lo0bits+0x56>
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4770      	bx	lr
 8004df0:	2000      	movs	r0, #0
 8004df2:	4770      	bx	lr
 8004df4:	2020      	movs	r0, #32
 8004df6:	4770      	bx	lr

08004df8 <__i2b>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	f7ff febd 	bl	8004b7c <_Balloc>
 8004e02:	4602      	mov	r2, r0
 8004e04:	b928      	cbnz	r0, 8004e12 <__i2b+0x1a>
 8004e06:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <__i2b+0x24>)
 8004e08:	4805      	ldr	r0, [pc, #20]	@ (8004e20 <__i2b+0x28>)
 8004e0a:	f240 1145 	movw	r1, #325	@ 0x145
 8004e0e:	f7ff fa4b 	bl	80042a8 <__assert_func>
 8004e12:	2301      	movs	r3, #1
 8004e14:	6144      	str	r4, [r0, #20]
 8004e16:	6103      	str	r3, [r0, #16]
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08006307 	.word	0x08006307
 8004e20:	08006378 	.word	0x08006378

08004e24 <__multiply>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	4617      	mov	r7, r2
 8004e2a:	690a      	ldr	r2, [r1, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bfa8      	it	ge
 8004e32:	463b      	movge	r3, r7
 8004e34:	4689      	mov	r9, r1
 8004e36:	bfa4      	itt	ge
 8004e38:	460f      	movge	r7, r1
 8004e3a:	4699      	movge	r9, r3
 8004e3c:	693d      	ldr	r5, [r7, #16]
 8004e3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	eb05 060a 	add.w	r6, r5, sl
 8004e4a:	42b3      	cmp	r3, r6
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	bfb8      	it	lt
 8004e50:	3101      	addlt	r1, #1
 8004e52:	f7ff fe93 	bl	8004b7c <_Balloc>
 8004e56:	b930      	cbnz	r0, 8004e66 <__multiply+0x42>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <__multiply+0x13c>)
 8004e5c:	4841      	ldr	r0, [pc, #260]	@ (8004f64 <__multiply+0x140>)
 8004e5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004e62:	f7ff fa21 	bl	80042a8 <__assert_func>
 8004e66:	f100 0414 	add.w	r4, r0, #20
 8004e6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004e6e:	4623      	mov	r3, r4
 8004e70:	2200      	movs	r2, #0
 8004e72:	4573      	cmp	r3, lr
 8004e74:	d320      	bcc.n	8004eb8 <__multiply+0x94>
 8004e76:	f107 0814 	add.w	r8, r7, #20
 8004e7a:	f109 0114 	add.w	r1, r9, #20
 8004e7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004e82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004e86:	9302      	str	r3, [sp, #8]
 8004e88:	1beb      	subs	r3, r5, r7
 8004e8a:	3b15      	subs	r3, #21
 8004e8c:	f023 0303 	bic.w	r3, r3, #3
 8004e90:	3304      	adds	r3, #4
 8004e92:	3715      	adds	r7, #21
 8004e94:	42bd      	cmp	r5, r7
 8004e96:	bf38      	it	cc
 8004e98:	2304      	movcc	r3, #4
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	9103      	str	r1, [sp, #12]
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d80c      	bhi.n	8004ebe <__multiply+0x9a>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	dd03      	ble.n	8004eb0 <__multiply+0x8c>
 8004ea8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d055      	beq.n	8004f5c <__multiply+0x138>
 8004eb0:	6106      	str	r6, [r0, #16]
 8004eb2:	b005      	add	sp, #20
 8004eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb8:	f843 2b04 	str.w	r2, [r3], #4
 8004ebc:	e7d9      	b.n	8004e72 <__multiply+0x4e>
 8004ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8004ec2:	f1ba 0f00 	cmp.w	sl, #0
 8004ec6:	d01f      	beq.n	8004f08 <__multiply+0xe4>
 8004ec8:	46c4      	mov	ip, r8
 8004eca:	46a1      	mov	r9, r4
 8004ecc:	2700      	movs	r7, #0
 8004ece:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8004ed6:	fa1f fb82 	uxth.w	fp, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	fb0a 330b 	mla	r3, sl, fp, r3
 8004ee0:	443b      	add	r3, r7
 8004ee2:	f8d9 7000 	ldr.w	r7, [r9]
 8004ee6:	0c12      	lsrs	r2, r2, #16
 8004ee8:	0c3f      	lsrs	r7, r7, #16
 8004eea:	fb0a 7202 	mla	r2, sl, r2, r7
 8004eee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ef8:	4565      	cmp	r5, ip
 8004efa:	f849 3b04 	str.w	r3, [r9], #4
 8004efe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004f02:	d8e4      	bhi.n	8004ece <__multiply+0xaa>
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	50e7      	str	r7, [r4, r3]
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004f0e:	3104      	adds	r1, #4
 8004f10:	f1b9 0f00 	cmp.w	r9, #0
 8004f14:	d020      	beq.n	8004f58 <__multiply+0x134>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	4647      	mov	r7, r8
 8004f1a:	46a4      	mov	ip, r4
 8004f1c:	f04f 0a00 	mov.w	sl, #0
 8004f20:	f8b7 b000 	ldrh.w	fp, [r7]
 8004f24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004f28:	fb09 220b 	mla	r2, r9, fp, r2
 8004f2c:	4452      	add	r2, sl
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f34:	f84c 3b04 	str.w	r3, [ip], #4
 8004f38:	f857 3b04 	ldr.w	r3, [r7], #4
 8004f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f40:	f8bc 3000 	ldrh.w	r3, [ip]
 8004f44:	fb09 330a 	mla	r3, r9, sl, r3
 8004f48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004f4c:	42bd      	cmp	r5, r7
 8004f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f52:	d8e5      	bhi.n	8004f20 <__multiply+0xfc>
 8004f54:	9a01      	ldr	r2, [sp, #4]
 8004f56:	50a3      	str	r3, [r4, r2]
 8004f58:	3404      	adds	r4, #4
 8004f5a:	e79f      	b.n	8004e9c <__multiply+0x78>
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	e7a1      	b.n	8004ea4 <__multiply+0x80>
 8004f60:	08006307 	.word	0x08006307
 8004f64:	08006378 	.word	0x08006378

08004f68 <__pow5mult>:
 8004f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f6c:	4615      	mov	r5, r2
 8004f6e:	f012 0203 	ands.w	r2, r2, #3
 8004f72:	4607      	mov	r7, r0
 8004f74:	460e      	mov	r6, r1
 8004f76:	d007      	beq.n	8004f88 <__pow5mult+0x20>
 8004f78:	4c25      	ldr	r4, [pc, #148]	@ (8005010 <__pow5mult+0xa8>)
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f82:	f7ff fe5d 	bl	8004c40 <__multadd>
 8004f86:	4606      	mov	r6, r0
 8004f88:	10ad      	asrs	r5, r5, #2
 8004f8a:	d03d      	beq.n	8005008 <__pow5mult+0xa0>
 8004f8c:	69fc      	ldr	r4, [r7, #28]
 8004f8e:	b97c      	cbnz	r4, 8004fb0 <__pow5mult+0x48>
 8004f90:	2010      	movs	r0, #16
 8004f92:	f7ff fd2b 	bl	80049ec <malloc>
 8004f96:	4602      	mov	r2, r0
 8004f98:	61f8      	str	r0, [r7, #28]
 8004f9a:	b928      	cbnz	r0, 8004fa8 <__pow5mult+0x40>
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <__pow5mult+0xac>)
 8004f9e:	481e      	ldr	r0, [pc, #120]	@ (8005018 <__pow5mult+0xb0>)
 8004fa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004fa4:	f7ff f980 	bl	80042a8 <__assert_func>
 8004fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fac:	6004      	str	r4, [r0, #0]
 8004fae:	60c4      	str	r4, [r0, #12]
 8004fb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fb8:	b94c      	cbnz	r4, 8004fce <__pow5mult+0x66>
 8004fba:	f240 2171 	movw	r1, #625	@ 0x271
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f7ff ff1a 	bl	8004df8 <__i2b>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004fca:	4604      	mov	r4, r0
 8004fcc:	6003      	str	r3, [r0, #0]
 8004fce:	f04f 0900 	mov.w	r9, #0
 8004fd2:	07eb      	lsls	r3, r5, #31
 8004fd4:	d50a      	bpl.n	8004fec <__pow5mult+0x84>
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f7ff ff22 	bl	8004e24 <__multiply>
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7ff fe09 	bl	8004bfc <_Bfree>
 8004fea:	4646      	mov	r6, r8
 8004fec:	106d      	asrs	r5, r5, #1
 8004fee:	d00b      	beq.n	8005008 <__pow5mult+0xa0>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	b938      	cbnz	r0, 8005004 <__pow5mult+0x9c>
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f7ff ff13 	bl	8004e24 <__multiply>
 8004ffe:	6020      	str	r0, [r4, #0]
 8005000:	f8c0 9000 	str.w	r9, [r0]
 8005004:	4604      	mov	r4, r0
 8005006:	e7e4      	b.n	8004fd2 <__pow5mult+0x6a>
 8005008:	4630      	mov	r0, r6
 800500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800500e:	bf00      	nop
 8005010:	08006458 	.word	0x08006458
 8005014:	08006252 	.word	0x08006252
 8005018:	08006378 	.word	0x08006378

0800501c <__lshift>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	6849      	ldr	r1, [r1, #4]
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	4607      	mov	r7, r0
 800502e:	4691      	mov	r9, r2
 8005030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005034:	f108 0601 	add.w	r6, r8, #1
 8005038:	42b3      	cmp	r3, r6
 800503a:	db0b      	blt.n	8005054 <__lshift+0x38>
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff fd9d 	bl	8004b7c <_Balloc>
 8005042:	4605      	mov	r5, r0
 8005044:	b948      	cbnz	r0, 800505a <__lshift+0x3e>
 8005046:	4602      	mov	r2, r0
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <__lshift+0xd0>)
 800504a:	4829      	ldr	r0, [pc, #164]	@ (80050f0 <__lshift+0xd4>)
 800504c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005050:	f7ff f92a 	bl	80042a8 <__assert_func>
 8005054:	3101      	adds	r1, #1
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	e7ee      	b.n	8005038 <__lshift+0x1c>
 800505a:	2300      	movs	r3, #0
 800505c:	f100 0114 	add.w	r1, r0, #20
 8005060:	f100 0210 	add.w	r2, r0, #16
 8005064:	4618      	mov	r0, r3
 8005066:	4553      	cmp	r3, sl
 8005068:	db33      	blt.n	80050d2 <__lshift+0xb6>
 800506a:	6920      	ldr	r0, [r4, #16]
 800506c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005070:	f104 0314 	add.w	r3, r4, #20
 8005074:	f019 091f 	ands.w	r9, r9, #31
 8005078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800507c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005080:	d02b      	beq.n	80050da <__lshift+0xbe>
 8005082:	f1c9 0e20 	rsb	lr, r9, #32
 8005086:	468a      	mov	sl, r1
 8005088:	2200      	movs	r2, #0
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	fa00 f009 	lsl.w	r0, r0, r9
 8005090:	4310      	orrs	r0, r2
 8005092:	f84a 0b04 	str.w	r0, [sl], #4
 8005096:	f853 2b04 	ldr.w	r2, [r3], #4
 800509a:	459c      	cmp	ip, r3
 800509c:	fa22 f20e 	lsr.w	r2, r2, lr
 80050a0:	d8f3      	bhi.n	800508a <__lshift+0x6e>
 80050a2:	ebac 0304 	sub.w	r3, ip, r4
 80050a6:	3b15      	subs	r3, #21
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	3304      	adds	r3, #4
 80050ae:	f104 0015 	add.w	r0, r4, #21
 80050b2:	4560      	cmp	r0, ip
 80050b4:	bf88      	it	hi
 80050b6:	2304      	movhi	r3, #4
 80050b8:	50ca      	str	r2, [r1, r3]
 80050ba:	b10a      	cbz	r2, 80050c0 <__lshift+0xa4>
 80050bc:	f108 0602 	add.w	r6, r8, #2
 80050c0:	3e01      	subs	r6, #1
 80050c2:	4638      	mov	r0, r7
 80050c4:	612e      	str	r6, [r5, #16]
 80050c6:	4621      	mov	r1, r4
 80050c8:	f7ff fd98 	bl	8004bfc <_Bfree>
 80050cc:	4628      	mov	r0, r5
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80050d6:	3301      	adds	r3, #1
 80050d8:	e7c5      	b.n	8005066 <__lshift+0x4a>
 80050da:	3904      	subs	r1, #4
 80050dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80050e4:	459c      	cmp	ip, r3
 80050e6:	d8f9      	bhi.n	80050dc <__lshift+0xc0>
 80050e8:	e7ea      	b.n	80050c0 <__lshift+0xa4>
 80050ea:	bf00      	nop
 80050ec:	08006307 	.word	0x08006307
 80050f0:	08006378 	.word	0x08006378

080050f4 <__mcmp>:
 80050f4:	690a      	ldr	r2, [r1, #16]
 80050f6:	4603      	mov	r3, r0
 80050f8:	6900      	ldr	r0, [r0, #16]
 80050fa:	1a80      	subs	r0, r0, r2
 80050fc:	b530      	push	{r4, r5, lr}
 80050fe:	d10e      	bne.n	800511e <__mcmp+0x2a>
 8005100:	3314      	adds	r3, #20
 8005102:	3114      	adds	r1, #20
 8005104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800510c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005114:	4295      	cmp	r5, r2
 8005116:	d003      	beq.n	8005120 <__mcmp+0x2c>
 8005118:	d205      	bcs.n	8005126 <__mcmp+0x32>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	bd30      	pop	{r4, r5, pc}
 8005120:	42a3      	cmp	r3, r4
 8005122:	d3f3      	bcc.n	800510c <__mcmp+0x18>
 8005124:	e7fb      	b.n	800511e <__mcmp+0x2a>
 8005126:	2001      	movs	r0, #1
 8005128:	e7f9      	b.n	800511e <__mcmp+0x2a>
	...

0800512c <__mdiff>:
 800512c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	4689      	mov	r9, r1
 8005132:	4606      	mov	r6, r0
 8005134:	4611      	mov	r1, r2
 8005136:	4648      	mov	r0, r9
 8005138:	4614      	mov	r4, r2
 800513a:	f7ff ffdb 	bl	80050f4 <__mcmp>
 800513e:	1e05      	subs	r5, r0, #0
 8005140:	d112      	bne.n	8005168 <__mdiff+0x3c>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff fd19 	bl	8004b7c <_Balloc>
 800514a:	4602      	mov	r2, r0
 800514c:	b928      	cbnz	r0, 800515a <__mdiff+0x2e>
 800514e:	4b3f      	ldr	r3, [pc, #252]	@ (800524c <__mdiff+0x120>)
 8005150:	f240 2137 	movw	r1, #567	@ 0x237
 8005154:	483e      	ldr	r0, [pc, #248]	@ (8005250 <__mdiff+0x124>)
 8005156:	f7ff f8a7 	bl	80042a8 <__assert_func>
 800515a:	2301      	movs	r3, #1
 800515c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005160:	4610      	mov	r0, r2
 8005162:	b003      	add	sp, #12
 8005164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005168:	bfbc      	itt	lt
 800516a:	464b      	movlt	r3, r9
 800516c:	46a1      	movlt	r9, r4
 800516e:	4630      	mov	r0, r6
 8005170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005174:	bfba      	itte	lt
 8005176:	461c      	movlt	r4, r3
 8005178:	2501      	movlt	r5, #1
 800517a:	2500      	movge	r5, #0
 800517c:	f7ff fcfe 	bl	8004b7c <_Balloc>
 8005180:	4602      	mov	r2, r0
 8005182:	b918      	cbnz	r0, 800518c <__mdiff+0x60>
 8005184:	4b31      	ldr	r3, [pc, #196]	@ (800524c <__mdiff+0x120>)
 8005186:	f240 2145 	movw	r1, #581	@ 0x245
 800518a:	e7e3      	b.n	8005154 <__mdiff+0x28>
 800518c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005190:	6926      	ldr	r6, [r4, #16]
 8005192:	60c5      	str	r5, [r0, #12]
 8005194:	f109 0310 	add.w	r3, r9, #16
 8005198:	f109 0514 	add.w	r5, r9, #20
 800519c:	f104 0e14 	add.w	lr, r4, #20
 80051a0:	f100 0b14 	add.w	fp, r0, #20
 80051a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80051a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	46d9      	mov	r9, fp
 80051b0:	f04f 0c00 	mov.w	ip, #0
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80051ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	fa1f f38a 	uxth.w	r3, sl
 80051c4:	4619      	mov	r1, r3
 80051c6:	b283      	uxth	r3, r0
 80051c8:	1acb      	subs	r3, r1, r3
 80051ca:	0c00      	lsrs	r0, r0, #16
 80051cc:	4463      	add	r3, ip
 80051ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80051d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80051dc:	4576      	cmp	r6, lr
 80051de:	f849 3b04 	str.w	r3, [r9], #4
 80051e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80051e6:	d8e5      	bhi.n	80051b4 <__mdiff+0x88>
 80051e8:	1b33      	subs	r3, r6, r4
 80051ea:	3b15      	subs	r3, #21
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	3415      	adds	r4, #21
 80051f2:	3304      	adds	r3, #4
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	bf38      	it	cc
 80051f8:	2304      	movcc	r3, #4
 80051fa:	441d      	add	r5, r3
 80051fc:	445b      	add	r3, fp
 80051fe:	461e      	mov	r6, r3
 8005200:	462c      	mov	r4, r5
 8005202:	4544      	cmp	r4, r8
 8005204:	d30e      	bcc.n	8005224 <__mdiff+0xf8>
 8005206:	f108 0103 	add.w	r1, r8, #3
 800520a:	1b49      	subs	r1, r1, r5
 800520c:	f021 0103 	bic.w	r1, r1, #3
 8005210:	3d03      	subs	r5, #3
 8005212:	45a8      	cmp	r8, r5
 8005214:	bf38      	it	cc
 8005216:	2100      	movcc	r1, #0
 8005218:	440b      	add	r3, r1
 800521a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800521e:	b191      	cbz	r1, 8005246 <__mdiff+0x11a>
 8005220:	6117      	str	r7, [r2, #16]
 8005222:	e79d      	b.n	8005160 <__mdiff+0x34>
 8005224:	f854 1b04 	ldr.w	r1, [r4], #4
 8005228:	46e6      	mov	lr, ip
 800522a:	0c08      	lsrs	r0, r1, #16
 800522c:	fa1c fc81 	uxtah	ip, ip, r1
 8005230:	4471      	add	r1, lr
 8005232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005236:	b289      	uxth	r1, r1
 8005238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800523c:	f846 1b04 	str.w	r1, [r6], #4
 8005240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005244:	e7dd      	b.n	8005202 <__mdiff+0xd6>
 8005246:	3f01      	subs	r7, #1
 8005248:	e7e7      	b.n	800521a <__mdiff+0xee>
 800524a:	bf00      	nop
 800524c:	08006307 	.word	0x08006307
 8005250:	08006378 	.word	0x08006378

08005254 <__ulp>:
 8005254:	b082      	sub	sp, #8
 8005256:	ed8d 0b00 	vstr	d0, [sp]
 800525a:	9a01      	ldr	r2, [sp, #4]
 800525c:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <__ulp+0x48>)
 800525e:	4013      	ands	r3, r2
 8005260:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005264:	2b00      	cmp	r3, #0
 8005266:	dc08      	bgt.n	800527a <__ulp+0x26>
 8005268:	425b      	negs	r3, r3
 800526a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800526e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005272:	da04      	bge.n	800527e <__ulp+0x2a>
 8005274:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005278:	4113      	asrs	r3, r2
 800527a:	2200      	movs	r2, #0
 800527c:	e008      	b.n	8005290 <__ulp+0x3c>
 800527e:	f1a2 0314 	sub.w	r3, r2, #20
 8005282:	2b1e      	cmp	r3, #30
 8005284:	bfda      	itte	le
 8005286:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800528a:	40da      	lsrle	r2, r3
 800528c:	2201      	movgt	r2, #1
 800528e:	2300      	movs	r3, #0
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	ec41 0b10 	vmov	d0, r0, r1
 8005298:	b002      	add	sp, #8
 800529a:	4770      	bx	lr
 800529c:	7ff00000 	.word	0x7ff00000

080052a0 <__b2d>:
 80052a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a4:	6906      	ldr	r6, [r0, #16]
 80052a6:	f100 0814 	add.w	r8, r0, #20
 80052aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80052ae:	1f37      	subs	r7, r6, #4
 80052b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7ff fd53 	bl	8004d60 <__hi0bits>
 80052ba:	f1c0 0320 	rsb	r3, r0, #32
 80052be:	280a      	cmp	r0, #10
 80052c0:	600b      	str	r3, [r1, #0]
 80052c2:	491b      	ldr	r1, [pc, #108]	@ (8005330 <__b2d+0x90>)
 80052c4:	dc15      	bgt.n	80052f2 <__b2d+0x52>
 80052c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80052ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80052ce:	45b8      	cmp	r8, r7
 80052d0:	ea43 0501 	orr.w	r5, r3, r1
 80052d4:	bf34      	ite	cc
 80052d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80052da:	2300      	movcs	r3, #0
 80052dc:	3015      	adds	r0, #21
 80052de:	fa02 f000 	lsl.w	r0, r2, r0
 80052e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80052e6:	4303      	orrs	r3, r0
 80052e8:	461c      	mov	r4, r3
 80052ea:	ec45 4b10 	vmov	d0, r4, r5
 80052ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f2:	45b8      	cmp	r8, r7
 80052f4:	bf3a      	itte	cc
 80052f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80052fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80052fe:	2300      	movcs	r3, #0
 8005300:	380b      	subs	r0, #11
 8005302:	d012      	beq.n	800532a <__b2d+0x8a>
 8005304:	f1c0 0120 	rsb	r1, r0, #32
 8005308:	fa23 f401 	lsr.w	r4, r3, r1
 800530c:	4082      	lsls	r2, r0
 800530e:	4322      	orrs	r2, r4
 8005310:	4547      	cmp	r7, r8
 8005312:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005316:	bf8c      	ite	hi
 8005318:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800531c:	2200      	movls	r2, #0
 800531e:	4083      	lsls	r3, r0
 8005320:	40ca      	lsrs	r2, r1
 8005322:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005326:	4313      	orrs	r3, r2
 8005328:	e7de      	b.n	80052e8 <__b2d+0x48>
 800532a:	ea42 0501 	orr.w	r5, r2, r1
 800532e:	e7db      	b.n	80052e8 <__b2d+0x48>
 8005330:	3ff00000 	.word	0x3ff00000

08005334 <__d2b>:
 8005334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005338:	460f      	mov	r7, r1
 800533a:	2101      	movs	r1, #1
 800533c:	ec59 8b10 	vmov	r8, r9, d0
 8005340:	4616      	mov	r6, r2
 8005342:	f7ff fc1b 	bl	8004b7c <_Balloc>
 8005346:	4604      	mov	r4, r0
 8005348:	b930      	cbnz	r0, 8005358 <__d2b+0x24>
 800534a:	4602      	mov	r2, r0
 800534c:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <__d2b+0xa8>)
 800534e:	4824      	ldr	r0, [pc, #144]	@ (80053e0 <__d2b+0xac>)
 8005350:	f240 310f 	movw	r1, #783	@ 0x30f
 8005354:	f7fe ffa8 	bl	80042a8 <__assert_func>
 8005358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800535c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005360:	b10d      	cbz	r5, 8005366 <__d2b+0x32>
 8005362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	f1b8 0300 	subs.w	r3, r8, #0
 800536c:	d023      	beq.n	80053b6 <__d2b+0x82>
 800536e:	4668      	mov	r0, sp
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	f7ff fd14 	bl	8004d9e <__lo0bits>
 8005376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800537a:	b1d0      	cbz	r0, 80053b2 <__d2b+0x7e>
 800537c:	f1c0 0320 	rsb	r3, r0, #32
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	430b      	orrs	r3, r1
 8005386:	40c2      	lsrs	r2, r0
 8005388:	6163      	str	r3, [r4, #20]
 800538a:	9201      	str	r2, [sp, #4]
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	61a3      	str	r3, [r4, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2201      	moveq	r2, #1
 8005396:	2202      	movne	r2, #2
 8005398:	6122      	str	r2, [r4, #16]
 800539a:	b1a5      	cbz	r5, 80053c6 <__d2b+0x92>
 800539c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80053a0:	4405      	add	r5, r0
 80053a2:	603d      	str	r5, [r7, #0]
 80053a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053a8:	6030      	str	r0, [r6, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	b003      	add	sp, #12
 80053ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053b2:	6161      	str	r1, [r4, #20]
 80053b4:	e7ea      	b.n	800538c <__d2b+0x58>
 80053b6:	a801      	add	r0, sp, #4
 80053b8:	f7ff fcf1 	bl	8004d9e <__lo0bits>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	6163      	str	r3, [r4, #20]
 80053c0:	3020      	adds	r0, #32
 80053c2:	2201      	movs	r2, #1
 80053c4:	e7e8      	b.n	8005398 <__d2b+0x64>
 80053c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80053ce:	6038      	str	r0, [r7, #0]
 80053d0:	6918      	ldr	r0, [r3, #16]
 80053d2:	f7ff fcc5 	bl	8004d60 <__hi0bits>
 80053d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053da:	e7e5      	b.n	80053a8 <__d2b+0x74>
 80053dc:	08006307 	.word	0x08006307
 80053e0:	08006378 	.word	0x08006378

080053e4 <__ratio>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	b085      	sub	sp, #20
 80053ea:	e9cd 1000 	strd	r1, r0, [sp]
 80053ee:	a902      	add	r1, sp, #8
 80053f0:	f7ff ff56 	bl	80052a0 <__b2d>
 80053f4:	9800      	ldr	r0, [sp, #0]
 80053f6:	a903      	add	r1, sp, #12
 80053f8:	ec55 4b10 	vmov	r4, r5, d0
 80053fc:	f7ff ff50 	bl	80052a0 <__b2d>
 8005400:	9b01      	ldr	r3, [sp, #4]
 8005402:	6919      	ldr	r1, [r3, #16]
 8005404:	9b00      	ldr	r3, [sp, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	1ac9      	subs	r1, r1, r3
 800540a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	ec5b ab10 	vmov	sl, fp, d0
 8005414:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005418:	2b00      	cmp	r3, #0
 800541a:	bfce      	itee	gt
 800541c:	462a      	movgt	r2, r5
 800541e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005422:	465a      	movle	r2, fp
 8005424:	462f      	mov	r7, r5
 8005426:	46d9      	mov	r9, fp
 8005428:	bfcc      	ite	gt
 800542a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800542e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005432:	464b      	mov	r3, r9
 8005434:	4652      	mov	r2, sl
 8005436:	4620      	mov	r0, r4
 8005438:	4639      	mov	r1, r7
 800543a:	f7fb fa1f 	bl	800087c <__aeabi_ddiv>
 800543e:	ec41 0b10 	vmov	d0, r0, r1
 8005442:	b005      	add	sp, #20
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005448 <__copybits>:
 8005448:	3901      	subs	r1, #1
 800544a:	b570      	push	{r4, r5, r6, lr}
 800544c:	1149      	asrs	r1, r1, #5
 800544e:	6914      	ldr	r4, [r2, #16]
 8005450:	3101      	adds	r1, #1
 8005452:	f102 0314 	add.w	r3, r2, #20
 8005456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800545a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800545e:	1f05      	subs	r5, r0, #4
 8005460:	42a3      	cmp	r3, r4
 8005462:	d30c      	bcc.n	800547e <__copybits+0x36>
 8005464:	1aa3      	subs	r3, r4, r2
 8005466:	3b11      	subs	r3, #17
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	3211      	adds	r2, #17
 800546e:	42a2      	cmp	r2, r4
 8005470:	bf88      	it	hi
 8005472:	2300      	movhi	r3, #0
 8005474:	4418      	add	r0, r3
 8005476:	2300      	movs	r3, #0
 8005478:	4288      	cmp	r0, r1
 800547a:	d305      	bcc.n	8005488 <__copybits+0x40>
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005482:	f845 6f04 	str.w	r6, [r5, #4]!
 8005486:	e7eb      	b.n	8005460 <__copybits+0x18>
 8005488:	f840 3b04 	str.w	r3, [r0], #4
 800548c:	e7f4      	b.n	8005478 <__copybits+0x30>

0800548e <__any_on>:
 800548e:	f100 0214 	add.w	r2, r0, #20
 8005492:	6900      	ldr	r0, [r0, #16]
 8005494:	114b      	asrs	r3, r1, #5
 8005496:	4298      	cmp	r0, r3
 8005498:	b510      	push	{r4, lr}
 800549a:	db11      	blt.n	80054c0 <__any_on+0x32>
 800549c:	dd0a      	ble.n	80054b4 <__any_on+0x26>
 800549e:	f011 011f 	ands.w	r1, r1, #31
 80054a2:	d007      	beq.n	80054b4 <__any_on+0x26>
 80054a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80054a8:	fa24 f001 	lsr.w	r0, r4, r1
 80054ac:	fa00 f101 	lsl.w	r1, r0, r1
 80054b0:	428c      	cmp	r4, r1
 80054b2:	d10b      	bne.n	80054cc <__any_on+0x3e>
 80054b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d803      	bhi.n	80054c4 <__any_on+0x36>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	4603      	mov	r3, r0
 80054c2:	e7f7      	b.n	80054b4 <__any_on+0x26>
 80054c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d0f5      	beq.n	80054b8 <__any_on+0x2a>
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7f6      	b.n	80054be <__any_on+0x30>

080054d0 <__ascii_wctomb>:
 80054d0:	4603      	mov	r3, r0
 80054d2:	4608      	mov	r0, r1
 80054d4:	b141      	cbz	r1, 80054e8 <__ascii_wctomb+0x18>
 80054d6:	2aff      	cmp	r2, #255	@ 0xff
 80054d8:	d904      	bls.n	80054e4 <__ascii_wctomb+0x14>
 80054da:	228a      	movs	r2, #138	@ 0x8a
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	4770      	bx	lr
 80054e4:	700a      	strb	r2, [r1, #0]
 80054e6:	2001      	movs	r0, #1
 80054e8:	4770      	bx	lr

080054ea <__ssputs_r>:
 80054ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ee:	688e      	ldr	r6, [r1, #8]
 80054f0:	461f      	mov	r7, r3
 80054f2:	42be      	cmp	r6, r7
 80054f4:	680b      	ldr	r3, [r1, #0]
 80054f6:	4682      	mov	sl, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	4690      	mov	r8, r2
 80054fc:	d82d      	bhi.n	800555a <__ssputs_r+0x70>
 80054fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005502:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005506:	d026      	beq.n	8005556 <__ssputs_r+0x6c>
 8005508:	6965      	ldr	r5, [r4, #20]
 800550a:	6909      	ldr	r1, [r1, #16]
 800550c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005510:	eba3 0901 	sub.w	r9, r3, r1
 8005514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005518:	1c7b      	adds	r3, r7, #1
 800551a:	444b      	add	r3, r9
 800551c:	106d      	asrs	r5, r5, #1
 800551e:	429d      	cmp	r5, r3
 8005520:	bf38      	it	cc
 8005522:	461d      	movcc	r5, r3
 8005524:	0553      	lsls	r3, r2, #21
 8005526:	d527      	bpl.n	8005578 <__ssputs_r+0x8e>
 8005528:	4629      	mov	r1, r5
 800552a:	f7ff fa89 	bl	8004a40 <_malloc_r>
 800552e:	4606      	mov	r6, r0
 8005530:	b360      	cbz	r0, 800558c <__ssputs_r+0xa2>
 8005532:	6921      	ldr	r1, [r4, #16]
 8005534:	464a      	mov	r2, r9
 8005536:	f7fe fe9e 	bl	8004276 <memcpy>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	6126      	str	r6, [r4, #16]
 8005548:	6165      	str	r5, [r4, #20]
 800554a:	444e      	add	r6, r9
 800554c:	eba5 0509 	sub.w	r5, r5, r9
 8005550:	6026      	str	r6, [r4, #0]
 8005552:	60a5      	str	r5, [r4, #8]
 8005554:	463e      	mov	r6, r7
 8005556:	42be      	cmp	r6, r7
 8005558:	d900      	bls.n	800555c <__ssputs_r+0x72>
 800555a:	463e      	mov	r6, r7
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4632      	mov	r2, r6
 8005560:	4641      	mov	r1, r8
 8005562:	f000 fd07 	bl	8005f74 <memmove>
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	1b9b      	subs	r3, r3, r6
 800556a:	60a3      	str	r3, [r4, #8]
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	4433      	add	r3, r6
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	2000      	movs	r0, #0
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	462a      	mov	r2, r5
 800557a:	f000 fd62 	bl	8006042 <_realloc_r>
 800557e:	4606      	mov	r6, r0
 8005580:	2800      	cmp	r0, #0
 8005582:	d1e0      	bne.n	8005546 <__ssputs_r+0x5c>
 8005584:	6921      	ldr	r1, [r4, #16]
 8005586:	4650      	mov	r0, sl
 8005588:	f7fe feac 	bl	80042e4 <_free_r>
 800558c:	230c      	movs	r3, #12
 800558e:	f8ca 3000 	str.w	r3, [sl]
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	e7e9      	b.n	8005574 <__ssputs_r+0x8a>

080055a0 <_svfiprintf_r>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	4698      	mov	r8, r3
 80055a6:	898b      	ldrh	r3, [r1, #12]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	b09d      	sub	sp, #116	@ 0x74
 80055ac:	4607      	mov	r7, r0
 80055ae:	460d      	mov	r5, r1
 80055b0:	4614      	mov	r4, r2
 80055b2:	d510      	bpl.n	80055d6 <_svfiprintf_r+0x36>
 80055b4:	690b      	ldr	r3, [r1, #16]
 80055b6:	b973      	cbnz	r3, 80055d6 <_svfiprintf_r+0x36>
 80055b8:	2140      	movs	r1, #64	@ 0x40
 80055ba:	f7ff fa41 	bl	8004a40 <_malloc_r>
 80055be:	6028      	str	r0, [r5, #0]
 80055c0:	6128      	str	r0, [r5, #16]
 80055c2:	b930      	cbnz	r0, 80055d2 <_svfiprintf_r+0x32>
 80055c4:	230c      	movs	r3, #12
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b01d      	add	sp, #116	@ 0x74
 80055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	2340      	movs	r3, #64	@ 0x40
 80055d4:	616b      	str	r3, [r5, #20]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80055da:	2320      	movs	r3, #32
 80055dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055e4:	2330      	movs	r3, #48	@ 0x30
 80055e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005784 <_svfiprintf_r+0x1e4>
 80055ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ee:	f04f 0901 	mov.w	r9, #1
 80055f2:	4623      	mov	r3, r4
 80055f4:	469a      	mov	sl, r3
 80055f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055fa:	b10a      	cbz	r2, 8005600 <_svfiprintf_r+0x60>
 80055fc:	2a25      	cmp	r2, #37	@ 0x25
 80055fe:	d1f9      	bne.n	80055f4 <_svfiprintf_r+0x54>
 8005600:	ebba 0b04 	subs.w	fp, sl, r4
 8005604:	d00b      	beq.n	800561e <_svfiprintf_r+0x7e>
 8005606:	465b      	mov	r3, fp
 8005608:	4622      	mov	r2, r4
 800560a:	4629      	mov	r1, r5
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ff6c 	bl	80054ea <__ssputs_r>
 8005612:	3001      	adds	r0, #1
 8005614:	f000 80a7 	beq.w	8005766 <_svfiprintf_r+0x1c6>
 8005618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800561a:	445a      	add	r2, fp
 800561c:	9209      	str	r2, [sp, #36]	@ 0x24
 800561e:	f89a 3000 	ldrb.w	r3, [sl]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 809f 	beq.w	8005766 <_svfiprintf_r+0x1c6>
 8005628:	2300      	movs	r3, #0
 800562a:	f04f 32ff 	mov.w	r2, #4294967295
 800562e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005632:	f10a 0a01 	add.w	sl, sl, #1
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	9307      	str	r3, [sp, #28]
 800563a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800563e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005640:	4654      	mov	r4, sl
 8005642:	2205      	movs	r2, #5
 8005644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005648:	484e      	ldr	r0, [pc, #312]	@ (8005784 <_svfiprintf_r+0x1e4>)
 800564a:	f7fa fde1 	bl	8000210 <memchr>
 800564e:	9a04      	ldr	r2, [sp, #16]
 8005650:	b9d8      	cbnz	r0, 800568a <_svfiprintf_r+0xea>
 8005652:	06d0      	lsls	r0, r2, #27
 8005654:	bf44      	itt	mi
 8005656:	2320      	movmi	r3, #32
 8005658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800565c:	0711      	lsls	r1, r2, #28
 800565e:	bf44      	itt	mi
 8005660:	232b      	movmi	r3, #43	@ 0x2b
 8005662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005666:	f89a 3000 	ldrb.w	r3, [sl]
 800566a:	2b2a      	cmp	r3, #42	@ 0x2a
 800566c:	d015      	beq.n	800569a <_svfiprintf_r+0xfa>
 800566e:	9a07      	ldr	r2, [sp, #28]
 8005670:	4654      	mov	r4, sl
 8005672:	2000      	movs	r0, #0
 8005674:	f04f 0c0a 	mov.w	ip, #10
 8005678:	4621      	mov	r1, r4
 800567a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800567e:	3b30      	subs	r3, #48	@ 0x30
 8005680:	2b09      	cmp	r3, #9
 8005682:	d94b      	bls.n	800571c <_svfiprintf_r+0x17c>
 8005684:	b1b0      	cbz	r0, 80056b4 <_svfiprintf_r+0x114>
 8005686:	9207      	str	r2, [sp, #28]
 8005688:	e014      	b.n	80056b4 <_svfiprintf_r+0x114>
 800568a:	eba0 0308 	sub.w	r3, r0, r8
 800568e:	fa09 f303 	lsl.w	r3, r9, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	46a2      	mov	sl, r4
 8005698:	e7d2      	b.n	8005640 <_svfiprintf_r+0xa0>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	1d19      	adds	r1, r3, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	9103      	str	r1, [sp, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bfbb      	ittet	lt
 80056a6:	425b      	neglt	r3, r3
 80056a8:	f042 0202 	orrlt.w	r2, r2, #2
 80056ac:	9307      	strge	r3, [sp, #28]
 80056ae:	9307      	strlt	r3, [sp, #28]
 80056b0:	bfb8      	it	lt
 80056b2:	9204      	strlt	r2, [sp, #16]
 80056b4:	7823      	ldrb	r3, [r4, #0]
 80056b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b8:	d10a      	bne.n	80056d0 <_svfiprintf_r+0x130>
 80056ba:	7863      	ldrb	r3, [r4, #1]
 80056bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80056be:	d132      	bne.n	8005726 <_svfiprintf_r+0x186>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056cc:	3402      	adds	r4, #2
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005794 <_svfiprintf_r+0x1f4>
 80056d4:	7821      	ldrb	r1, [r4, #0]
 80056d6:	2203      	movs	r2, #3
 80056d8:	4650      	mov	r0, sl
 80056da:	f7fa fd99 	bl	8000210 <memchr>
 80056de:	b138      	cbz	r0, 80056f0 <_svfiprintf_r+0x150>
 80056e0:	9b04      	ldr	r3, [sp, #16]
 80056e2:	eba0 000a 	sub.w	r0, r0, sl
 80056e6:	2240      	movs	r2, #64	@ 0x40
 80056e8:	4082      	lsls	r2, r0
 80056ea:	4313      	orrs	r3, r2
 80056ec:	3401      	adds	r4, #1
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f4:	4824      	ldr	r0, [pc, #144]	@ (8005788 <_svfiprintf_r+0x1e8>)
 80056f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056fa:	2206      	movs	r2, #6
 80056fc:	f7fa fd88 	bl	8000210 <memchr>
 8005700:	2800      	cmp	r0, #0
 8005702:	d036      	beq.n	8005772 <_svfiprintf_r+0x1d2>
 8005704:	4b21      	ldr	r3, [pc, #132]	@ (800578c <_svfiprintf_r+0x1ec>)
 8005706:	bb1b      	cbnz	r3, 8005750 <_svfiprintf_r+0x1b0>
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	3307      	adds	r3, #7
 800570c:	f023 0307 	bic.w	r3, r3, #7
 8005710:	3308      	adds	r3, #8
 8005712:	9303      	str	r3, [sp, #12]
 8005714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005716:	4433      	add	r3, r6
 8005718:	9309      	str	r3, [sp, #36]	@ 0x24
 800571a:	e76a      	b.n	80055f2 <_svfiprintf_r+0x52>
 800571c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005720:	460c      	mov	r4, r1
 8005722:	2001      	movs	r0, #1
 8005724:	e7a8      	b.n	8005678 <_svfiprintf_r+0xd8>
 8005726:	2300      	movs	r3, #0
 8005728:	3401      	adds	r4, #1
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	4619      	mov	r1, r3
 800572e:	f04f 0c0a 	mov.w	ip, #10
 8005732:	4620      	mov	r0, r4
 8005734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005738:	3a30      	subs	r2, #48	@ 0x30
 800573a:	2a09      	cmp	r2, #9
 800573c:	d903      	bls.n	8005746 <_svfiprintf_r+0x1a6>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0c6      	beq.n	80056d0 <_svfiprintf_r+0x130>
 8005742:	9105      	str	r1, [sp, #20]
 8005744:	e7c4      	b.n	80056d0 <_svfiprintf_r+0x130>
 8005746:	fb0c 2101 	mla	r1, ip, r1, r2
 800574a:	4604      	mov	r4, r0
 800574c:	2301      	movs	r3, #1
 800574e:	e7f0      	b.n	8005732 <_svfiprintf_r+0x192>
 8005750:	ab03      	add	r3, sp, #12
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	462a      	mov	r2, r5
 8005756:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <_svfiprintf_r+0x1f0>)
 8005758:	a904      	add	r1, sp, #16
 800575a:	4638      	mov	r0, r7
 800575c:	f3af 8000 	nop.w
 8005760:	1c42      	adds	r2, r0, #1
 8005762:	4606      	mov	r6, r0
 8005764:	d1d6      	bne.n	8005714 <_svfiprintf_r+0x174>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	065b      	lsls	r3, r3, #25
 800576a:	f53f af2d 	bmi.w	80055c8 <_svfiprintf_r+0x28>
 800576e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005770:	e72c      	b.n	80055cc <_svfiprintf_r+0x2c>
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	462a      	mov	r2, r5
 8005778:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <_svfiprintf_r+0x1f0>)
 800577a:	a904      	add	r1, sp, #16
 800577c:	4638      	mov	r0, r7
 800577e:	f000 f9bb 	bl	8005af8 <_printf_i>
 8005782:	e7ed      	b.n	8005760 <_svfiprintf_r+0x1c0>
 8005784:	080063d1 	.word	0x080063d1
 8005788:	080063db 	.word	0x080063db
 800578c:	00000000 	.word	0x00000000
 8005790:	080054eb 	.word	0x080054eb
 8005794:	080063d7 	.word	0x080063d7

08005798 <__sfputc_r>:
 8005798:	6893      	ldr	r3, [r2, #8]
 800579a:	3b01      	subs	r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	b410      	push	{r4}
 80057a0:	6093      	str	r3, [r2, #8]
 80057a2:	da08      	bge.n	80057b6 <__sfputc_r+0x1e>
 80057a4:	6994      	ldr	r4, [r2, #24]
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	db01      	blt.n	80057ae <__sfputc_r+0x16>
 80057aa:	290a      	cmp	r1, #10
 80057ac:	d103      	bne.n	80057b6 <__sfputc_r+0x1e>
 80057ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b2:	f7fe bbcc 	b.w	8003f4e <__swbuf_r>
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	1c58      	adds	r0, r3, #1
 80057ba:	6010      	str	r0, [r2, #0]
 80057bc:	7019      	strb	r1, [r3, #0]
 80057be:	4608      	mov	r0, r1
 80057c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <__sfputs_r>:
 80057c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c8:	4606      	mov	r6, r0
 80057ca:	460f      	mov	r7, r1
 80057cc:	4614      	mov	r4, r2
 80057ce:	18d5      	adds	r5, r2, r3
 80057d0:	42ac      	cmp	r4, r5
 80057d2:	d101      	bne.n	80057d8 <__sfputs_r+0x12>
 80057d4:	2000      	movs	r0, #0
 80057d6:	e007      	b.n	80057e8 <__sfputs_r+0x22>
 80057d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057dc:	463a      	mov	r2, r7
 80057de:	4630      	mov	r0, r6
 80057e0:	f7ff ffda 	bl	8005798 <__sfputc_r>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d1f3      	bne.n	80057d0 <__sfputs_r+0xa>
 80057e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057ec <_vfiprintf_r>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	460d      	mov	r5, r1
 80057f2:	b09d      	sub	sp, #116	@ 0x74
 80057f4:	4614      	mov	r4, r2
 80057f6:	4698      	mov	r8, r3
 80057f8:	4606      	mov	r6, r0
 80057fa:	b118      	cbz	r0, 8005804 <_vfiprintf_r+0x18>
 80057fc:	6a03      	ldr	r3, [r0, #32]
 80057fe:	b90b      	cbnz	r3, 8005804 <_vfiprintf_r+0x18>
 8005800:	f7fe fa9a 	bl	8003d38 <__sinit>
 8005804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005806:	07d9      	lsls	r1, r3, #31
 8005808:	d405      	bmi.n	8005816 <_vfiprintf_r+0x2a>
 800580a:	89ab      	ldrh	r3, [r5, #12]
 800580c:	059a      	lsls	r2, r3, #22
 800580e:	d402      	bmi.n	8005816 <_vfiprintf_r+0x2a>
 8005810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005812:	f7fe fd26 	bl	8004262 <__retarget_lock_acquire_recursive>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	071b      	lsls	r3, r3, #28
 800581a:	d501      	bpl.n	8005820 <_vfiprintf_r+0x34>
 800581c:	692b      	ldr	r3, [r5, #16]
 800581e:	b99b      	cbnz	r3, 8005848 <_vfiprintf_r+0x5c>
 8005820:	4629      	mov	r1, r5
 8005822:	4630      	mov	r0, r6
 8005824:	f7fe fbd2 	bl	8003fcc <__swsetup_r>
 8005828:	b170      	cbz	r0, 8005848 <_vfiprintf_r+0x5c>
 800582a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800582c:	07dc      	lsls	r4, r3, #31
 800582e:	d504      	bpl.n	800583a <_vfiprintf_r+0x4e>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	b01d      	add	sp, #116	@ 0x74
 8005836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583a:	89ab      	ldrh	r3, [r5, #12]
 800583c:	0598      	lsls	r0, r3, #22
 800583e:	d4f7      	bmi.n	8005830 <_vfiprintf_r+0x44>
 8005840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005842:	f7fe fd0f 	bl	8004264 <__retarget_lock_release_recursive>
 8005846:	e7f3      	b.n	8005830 <_vfiprintf_r+0x44>
 8005848:	2300      	movs	r3, #0
 800584a:	9309      	str	r3, [sp, #36]	@ 0x24
 800584c:	2320      	movs	r3, #32
 800584e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005852:	f8cd 800c 	str.w	r8, [sp, #12]
 8005856:	2330      	movs	r3, #48	@ 0x30
 8005858:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a08 <_vfiprintf_r+0x21c>
 800585c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005860:	f04f 0901 	mov.w	r9, #1
 8005864:	4623      	mov	r3, r4
 8005866:	469a      	mov	sl, r3
 8005868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800586c:	b10a      	cbz	r2, 8005872 <_vfiprintf_r+0x86>
 800586e:	2a25      	cmp	r2, #37	@ 0x25
 8005870:	d1f9      	bne.n	8005866 <_vfiprintf_r+0x7a>
 8005872:	ebba 0b04 	subs.w	fp, sl, r4
 8005876:	d00b      	beq.n	8005890 <_vfiprintf_r+0xa4>
 8005878:	465b      	mov	r3, fp
 800587a:	4622      	mov	r2, r4
 800587c:	4629      	mov	r1, r5
 800587e:	4630      	mov	r0, r6
 8005880:	f7ff ffa1 	bl	80057c6 <__sfputs_r>
 8005884:	3001      	adds	r0, #1
 8005886:	f000 80a7 	beq.w	80059d8 <_vfiprintf_r+0x1ec>
 800588a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800588c:	445a      	add	r2, fp
 800588e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005890:	f89a 3000 	ldrb.w	r3, [sl]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 809f 	beq.w	80059d8 <_vfiprintf_r+0x1ec>
 800589a:	2300      	movs	r3, #0
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058a4:	f10a 0a01 	add.w	sl, sl, #1
 80058a8:	9304      	str	r3, [sp, #16]
 80058aa:	9307      	str	r3, [sp, #28]
 80058ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80058b2:	4654      	mov	r4, sl
 80058b4:	2205      	movs	r2, #5
 80058b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ba:	4853      	ldr	r0, [pc, #332]	@ (8005a08 <_vfiprintf_r+0x21c>)
 80058bc:	f7fa fca8 	bl	8000210 <memchr>
 80058c0:	9a04      	ldr	r2, [sp, #16]
 80058c2:	b9d8      	cbnz	r0, 80058fc <_vfiprintf_r+0x110>
 80058c4:	06d1      	lsls	r1, r2, #27
 80058c6:	bf44      	itt	mi
 80058c8:	2320      	movmi	r3, #32
 80058ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058ce:	0713      	lsls	r3, r2, #28
 80058d0:	bf44      	itt	mi
 80058d2:	232b      	movmi	r3, #43	@ 0x2b
 80058d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058d8:	f89a 3000 	ldrb.w	r3, [sl]
 80058dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80058de:	d015      	beq.n	800590c <_vfiprintf_r+0x120>
 80058e0:	9a07      	ldr	r2, [sp, #28]
 80058e2:	4654      	mov	r4, sl
 80058e4:	2000      	movs	r0, #0
 80058e6:	f04f 0c0a 	mov.w	ip, #10
 80058ea:	4621      	mov	r1, r4
 80058ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058f0:	3b30      	subs	r3, #48	@ 0x30
 80058f2:	2b09      	cmp	r3, #9
 80058f4:	d94b      	bls.n	800598e <_vfiprintf_r+0x1a2>
 80058f6:	b1b0      	cbz	r0, 8005926 <_vfiprintf_r+0x13a>
 80058f8:	9207      	str	r2, [sp, #28]
 80058fa:	e014      	b.n	8005926 <_vfiprintf_r+0x13a>
 80058fc:	eba0 0308 	sub.w	r3, r0, r8
 8005900:	fa09 f303 	lsl.w	r3, r9, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	46a2      	mov	sl, r4
 800590a:	e7d2      	b.n	80058b2 <_vfiprintf_r+0xc6>
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	1d19      	adds	r1, r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	9103      	str	r1, [sp, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfbb      	ittet	lt
 8005918:	425b      	neglt	r3, r3
 800591a:	f042 0202 	orrlt.w	r2, r2, #2
 800591e:	9307      	strge	r3, [sp, #28]
 8005920:	9307      	strlt	r3, [sp, #28]
 8005922:	bfb8      	it	lt
 8005924:	9204      	strlt	r2, [sp, #16]
 8005926:	7823      	ldrb	r3, [r4, #0]
 8005928:	2b2e      	cmp	r3, #46	@ 0x2e
 800592a:	d10a      	bne.n	8005942 <_vfiprintf_r+0x156>
 800592c:	7863      	ldrb	r3, [r4, #1]
 800592e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005930:	d132      	bne.n	8005998 <_vfiprintf_r+0x1ac>
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	1d1a      	adds	r2, r3, #4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	9203      	str	r2, [sp, #12]
 800593a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800593e:	3402      	adds	r4, #2
 8005940:	9305      	str	r3, [sp, #20]
 8005942:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a18 <_vfiprintf_r+0x22c>
 8005946:	7821      	ldrb	r1, [r4, #0]
 8005948:	2203      	movs	r2, #3
 800594a:	4650      	mov	r0, sl
 800594c:	f7fa fc60 	bl	8000210 <memchr>
 8005950:	b138      	cbz	r0, 8005962 <_vfiprintf_r+0x176>
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	eba0 000a 	sub.w	r0, r0, sl
 8005958:	2240      	movs	r2, #64	@ 0x40
 800595a:	4082      	lsls	r2, r0
 800595c:	4313      	orrs	r3, r2
 800595e:	3401      	adds	r4, #1
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005966:	4829      	ldr	r0, [pc, #164]	@ (8005a0c <_vfiprintf_r+0x220>)
 8005968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800596c:	2206      	movs	r2, #6
 800596e:	f7fa fc4f 	bl	8000210 <memchr>
 8005972:	2800      	cmp	r0, #0
 8005974:	d03f      	beq.n	80059f6 <_vfiprintf_r+0x20a>
 8005976:	4b26      	ldr	r3, [pc, #152]	@ (8005a10 <_vfiprintf_r+0x224>)
 8005978:	bb1b      	cbnz	r3, 80059c2 <_vfiprintf_r+0x1d6>
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	3307      	adds	r3, #7
 800597e:	f023 0307 	bic.w	r3, r3, #7
 8005982:	3308      	adds	r3, #8
 8005984:	9303      	str	r3, [sp, #12]
 8005986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005988:	443b      	add	r3, r7
 800598a:	9309      	str	r3, [sp, #36]	@ 0x24
 800598c:	e76a      	b.n	8005864 <_vfiprintf_r+0x78>
 800598e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005992:	460c      	mov	r4, r1
 8005994:	2001      	movs	r0, #1
 8005996:	e7a8      	b.n	80058ea <_vfiprintf_r+0xfe>
 8005998:	2300      	movs	r3, #0
 800599a:	3401      	adds	r4, #1
 800599c:	9305      	str	r3, [sp, #20]
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 0c0a 	mov.w	ip, #10
 80059a4:	4620      	mov	r0, r4
 80059a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059aa:	3a30      	subs	r2, #48	@ 0x30
 80059ac:	2a09      	cmp	r2, #9
 80059ae:	d903      	bls.n	80059b8 <_vfiprintf_r+0x1cc>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0c6      	beq.n	8005942 <_vfiprintf_r+0x156>
 80059b4:	9105      	str	r1, [sp, #20]
 80059b6:	e7c4      	b.n	8005942 <_vfiprintf_r+0x156>
 80059b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059bc:	4604      	mov	r4, r0
 80059be:	2301      	movs	r3, #1
 80059c0:	e7f0      	b.n	80059a4 <_vfiprintf_r+0x1b8>
 80059c2:	ab03      	add	r3, sp, #12
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	462a      	mov	r2, r5
 80059c8:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <_vfiprintf_r+0x228>)
 80059ca:	a904      	add	r1, sp, #16
 80059cc:	4630      	mov	r0, r6
 80059ce:	f3af 8000 	nop.w
 80059d2:	4607      	mov	r7, r0
 80059d4:	1c78      	adds	r0, r7, #1
 80059d6:	d1d6      	bne.n	8005986 <_vfiprintf_r+0x19a>
 80059d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	d405      	bmi.n	80059ea <_vfiprintf_r+0x1fe>
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	059a      	lsls	r2, r3, #22
 80059e2:	d402      	bmi.n	80059ea <_vfiprintf_r+0x1fe>
 80059e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059e6:	f7fe fc3d 	bl	8004264 <__retarget_lock_release_recursive>
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	065b      	lsls	r3, r3, #25
 80059ee:	f53f af1f 	bmi.w	8005830 <_vfiprintf_r+0x44>
 80059f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059f4:	e71e      	b.n	8005834 <_vfiprintf_r+0x48>
 80059f6:	ab03      	add	r3, sp, #12
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	462a      	mov	r2, r5
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <_vfiprintf_r+0x228>)
 80059fe:	a904      	add	r1, sp, #16
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f879 	bl	8005af8 <_printf_i>
 8005a06:	e7e4      	b.n	80059d2 <_vfiprintf_r+0x1e6>
 8005a08:	080063d1 	.word	0x080063d1
 8005a0c:	080063db 	.word	0x080063db
 8005a10:	00000000 	.word	0x00000000
 8005a14:	080057c7 	.word	0x080057c7
 8005a18:	080063d7 	.word	0x080063d7

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4698      	mov	r8, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	3b00      	subs	r3, #0
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c8      	blx	r9
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	6922      	ldr	r2, [r4, #16]
 8005a86:	f003 0306 	and.w	r3, r3, #6
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	bf02      	ittt	eq
 8005a8e:	68e5      	ldreq	r5, [r4, #12]
 8005a90:	6833      	ldreq	r3, [r6, #0]
 8005a92:	1aed      	subeq	r5, r5, r3
 8005a94:	68a3      	ldr	r3, [r4, #8]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c8      	blx	r9
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	@ 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4641      	mov	r1, r8
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c8      	blx	r9
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b00:	2f78      	cmp	r7, #120	@ 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	@ 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d1 	beq.w	8005cbc <_printf_i+0x1c4>
 8005b1a:	2f58      	cmp	r7, #88	@ 0x58
 8005b1c:	f000 80b8 	beq.w	8005c90 <_printf_i+0x198>
 8005b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	@ (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005ca3 	.word	0x08005ca3
 8005b68:	08005bcf 	.word	0x08005bcf
 8005b6c:	08005c5d 	.word	0x08005c5d
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005cc5 	.word	0x08005cc5
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bcf 	.word	0x08005bcf
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c65 	.word	0x08005c65
 8005b90:	6833      	ldr	r3, [r6, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6032      	str	r2, [r6, #0]
 8005b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e09c      	b.n	8005cde <_printf_i+0x1e6>
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	6031      	str	r1, [r6, #0]
 8005bac:	0606      	lsls	r6, r0, #24
 8005bae:	d501      	bpl.n	8005bb4 <_printf_i+0xbc>
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	e003      	b.n	8005bbc <_printf_i+0xc4>
 8005bb4:	0645      	lsls	r5, r0, #25
 8005bb6:	d5fb      	bpl.n	8005bb0 <_printf_i+0xb8>
 8005bb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	da03      	bge.n	8005bc8 <_printf_i+0xd0>
 8005bc0:	232d      	movs	r3, #45	@ 0x2d
 8005bc2:	426d      	negs	r5, r5
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc8:	4858      	ldr	r0, [pc, #352]	@ (8005d2c <_printf_i+0x234>)
 8005bca:	230a      	movs	r3, #10
 8005bcc:	e011      	b.n	8005bf2 <_printf_i+0xfa>
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	0608      	lsls	r0, r1, #24
 8005bd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bd8:	d402      	bmi.n	8005be0 <_printf_i+0xe8>
 8005bda:	0649      	lsls	r1, r1, #25
 8005bdc:	bf48      	it	mi
 8005bde:	b2ad      	uxthmi	r5, r5
 8005be0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005be2:	4852      	ldr	r0, [pc, #328]	@ (8005d2c <_printf_i+0x234>)
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	bf14      	ite	ne
 8005be8:	230a      	movne	r3, #10
 8005bea:	2308      	moveq	r3, #8
 8005bec:	2100      	movs	r1, #0
 8005bee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bf2:	6866      	ldr	r6, [r4, #4]
 8005bf4:	60a6      	str	r6, [r4, #8]
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	db05      	blt.n	8005c06 <_printf_i+0x10e>
 8005bfa:	6821      	ldr	r1, [r4, #0]
 8005bfc:	432e      	orrs	r6, r5
 8005bfe:	f021 0104 	bic.w	r1, r1, #4
 8005c02:	6021      	str	r1, [r4, #0]
 8005c04:	d04b      	beq.n	8005c9e <_printf_i+0x1a6>
 8005c06:	4616      	mov	r6, r2
 8005c08:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c0c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c10:	5dc7      	ldrb	r7, [r0, r7]
 8005c12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c16:	462f      	mov	r7, r5
 8005c18:	42bb      	cmp	r3, r7
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	d9f4      	bls.n	8005c08 <_printf_i+0x110>
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d10b      	bne.n	8005c3a <_printf_i+0x142>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	07df      	lsls	r7, r3, #31
 8005c26:	d508      	bpl.n	8005c3a <_printf_i+0x142>
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	6861      	ldr	r1, [r4, #4]
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	bfde      	ittt	le
 8005c30:	2330      	movle	r3, #48	@ 0x30
 8005c32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c3a:	1b92      	subs	r2, r2, r6
 8005c3c:	6122      	str	r2, [r4, #16]
 8005c3e:	f8cd a000 	str.w	sl, [sp]
 8005c42:	464b      	mov	r3, r9
 8005c44:	aa03      	add	r2, sp, #12
 8005c46:	4621      	mov	r1, r4
 8005c48:	4640      	mov	r0, r8
 8005c4a:	f7ff fee7 	bl	8005a1c <_printf_common>
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d14a      	bne.n	8005ce8 <_printf_i+0x1f0>
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	b004      	add	sp, #16
 8005c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	4832      	ldr	r0, [pc, #200]	@ (8005d30 <_printf_i+0x238>)
 8005c66:	2778      	movs	r7, #120	@ 0x78
 8005c68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	6831      	ldr	r1, [r6, #0]
 8005c70:	061f      	lsls	r7, r3, #24
 8005c72:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c76:	d402      	bmi.n	8005c7e <_printf_i+0x186>
 8005c78:	065f      	lsls	r7, r3, #25
 8005c7a:	bf48      	it	mi
 8005c7c:	b2ad      	uxthmi	r5, r5
 8005c7e:	6031      	str	r1, [r6, #0]
 8005c80:	07d9      	lsls	r1, r3, #31
 8005c82:	bf44      	itt	mi
 8005c84:	f043 0320 	orrmi.w	r3, r3, #32
 8005c88:	6023      	strmi	r3, [r4, #0]
 8005c8a:	b11d      	cbz	r5, 8005c94 <_printf_i+0x19c>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	e7ad      	b.n	8005bec <_printf_i+0xf4>
 8005c90:	4826      	ldr	r0, [pc, #152]	@ (8005d2c <_printf_i+0x234>)
 8005c92:	e7e9      	b.n	8005c68 <_printf_i+0x170>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	e7f6      	b.n	8005c8c <_printf_i+0x194>
 8005c9e:	4616      	mov	r6, r2
 8005ca0:	e7bd      	b.n	8005c1e <_printf_i+0x126>
 8005ca2:	6833      	ldr	r3, [r6, #0]
 8005ca4:	6825      	ldr	r5, [r4, #0]
 8005ca6:	6961      	ldr	r1, [r4, #20]
 8005ca8:	1d18      	adds	r0, r3, #4
 8005caa:	6030      	str	r0, [r6, #0]
 8005cac:	062e      	lsls	r6, r5, #24
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	d501      	bpl.n	8005cb6 <_printf_i+0x1be>
 8005cb2:	6019      	str	r1, [r3, #0]
 8005cb4:	e002      	b.n	8005cbc <_printf_i+0x1c4>
 8005cb6:	0668      	lsls	r0, r5, #25
 8005cb8:	d5fb      	bpl.n	8005cb2 <_printf_i+0x1ba>
 8005cba:	8019      	strh	r1, [r3, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	e7bc      	b.n	8005c3e <_printf_i+0x146>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	6032      	str	r2, [r6, #0]
 8005cca:	681e      	ldr	r6, [r3, #0]
 8005ccc:	6862      	ldr	r2, [r4, #4]
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f7fa fa9d 	bl	8000210 <memchr>
 8005cd6:	b108      	cbz	r0, 8005cdc <_printf_i+0x1e4>
 8005cd8:	1b80      	subs	r0, r0, r6
 8005cda:	6060      	str	r0, [r4, #4]
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce6:	e7aa      	b.n	8005c3e <_printf_i+0x146>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	4632      	mov	r2, r6
 8005cec:	4649      	mov	r1, r9
 8005cee:	4640      	mov	r0, r8
 8005cf0:	47d0      	blx	sl
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d0ad      	beq.n	8005c52 <_printf_i+0x15a>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	079b      	lsls	r3, r3, #30
 8005cfa:	d413      	bmi.n	8005d24 <_printf_i+0x22c>
 8005cfc:	68e0      	ldr	r0, [r4, #12]
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	4298      	cmp	r0, r3
 8005d02:	bfb8      	it	lt
 8005d04:	4618      	movlt	r0, r3
 8005d06:	e7a6      	b.n	8005c56 <_printf_i+0x15e>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4640      	mov	r0, r8
 8005d10:	47d0      	blx	sl
 8005d12:	3001      	adds	r0, #1
 8005d14:	d09d      	beq.n	8005c52 <_printf_i+0x15a>
 8005d16:	3501      	adds	r5, #1
 8005d18:	68e3      	ldr	r3, [r4, #12]
 8005d1a:	9903      	ldr	r1, [sp, #12]
 8005d1c:	1a5b      	subs	r3, r3, r1
 8005d1e:	42ab      	cmp	r3, r5
 8005d20:	dcf2      	bgt.n	8005d08 <_printf_i+0x210>
 8005d22:	e7eb      	b.n	8005cfc <_printf_i+0x204>
 8005d24:	2500      	movs	r5, #0
 8005d26:	f104 0619 	add.w	r6, r4, #25
 8005d2a:	e7f5      	b.n	8005d18 <_printf_i+0x220>
 8005d2c:	080063e2 	.word	0x080063e2
 8005d30:	080063f3 	.word	0x080063f3

08005d34 <__sflush_r>:
 8005d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	0716      	lsls	r6, r2, #28
 8005d3e:	4605      	mov	r5, r0
 8005d40:	460c      	mov	r4, r1
 8005d42:	d454      	bmi.n	8005dee <__sflush_r+0xba>
 8005d44:	684b      	ldr	r3, [r1, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	dc02      	bgt.n	8005d50 <__sflush_r+0x1c>
 8005d4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd48      	ble.n	8005de2 <__sflush_r+0xae>
 8005d50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	d045      	beq.n	8005de2 <__sflush_r+0xae>
 8005d56:	2300      	movs	r3, #0
 8005d58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d5c:	682f      	ldr	r7, [r5, #0]
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	d030      	beq.n	8005dc6 <__sflush_r+0x92>
 8005d64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	0759      	lsls	r1, r3, #29
 8005d6a:	d505      	bpl.n	8005d78 <__sflush_r+0x44>
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d72:	b10b      	cbz	r3, 8005d78 <__sflush_r+0x44>
 8005d74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d7c:	6a21      	ldr	r1, [r4, #32]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b0      	blx	r6
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	d106      	bne.n	8005d96 <__sflush_r+0x62>
 8005d88:	6829      	ldr	r1, [r5, #0]
 8005d8a:	291d      	cmp	r1, #29
 8005d8c:	d82b      	bhi.n	8005de6 <__sflush_r+0xb2>
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <__sflush_r+0x104>)
 8005d90:	40ca      	lsrs	r2, r1
 8005d92:	07d6      	lsls	r6, r2, #31
 8005d94:	d527      	bpl.n	8005de6 <__sflush_r+0xb2>
 8005d96:	2200      	movs	r2, #0
 8005d98:	6062      	str	r2, [r4, #4]
 8005d9a:	04d9      	lsls	r1, r3, #19
 8005d9c:	6922      	ldr	r2, [r4, #16]
 8005d9e:	6022      	str	r2, [r4, #0]
 8005da0:	d504      	bpl.n	8005dac <__sflush_r+0x78>
 8005da2:	1c42      	adds	r2, r0, #1
 8005da4:	d101      	bne.n	8005daa <__sflush_r+0x76>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b903      	cbnz	r3, 8005dac <__sflush_r+0x78>
 8005daa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dae:	602f      	str	r7, [r5, #0]
 8005db0:	b1b9      	cbz	r1, 8005de2 <__sflush_r+0xae>
 8005db2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <__sflush_r+0x8c>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f7fe fa92 	bl	80042e4 <_free_r>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dc4:	e00d      	b.n	8005de2 <__sflush_r+0xae>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	4602      	mov	r2, r0
 8005dce:	1c50      	adds	r0, r2, #1
 8005dd0:	d1c9      	bne.n	8005d66 <__sflush_r+0x32>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c6      	beq.n	8005d66 <__sflush_r+0x32>
 8005dd8:	2b1d      	cmp	r3, #29
 8005dda:	d001      	beq.n	8005de0 <__sflush_r+0xac>
 8005ddc:	2b16      	cmp	r3, #22
 8005dde:	d11e      	bne.n	8005e1e <__sflush_r+0xea>
 8005de0:	602f      	str	r7, [r5, #0]
 8005de2:	2000      	movs	r0, #0
 8005de4:	e022      	b.n	8005e2c <__sflush_r+0xf8>
 8005de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	e01b      	b.n	8005e26 <__sflush_r+0xf2>
 8005dee:	690f      	ldr	r7, [r1, #16]
 8005df0:	2f00      	cmp	r7, #0
 8005df2:	d0f6      	beq.n	8005de2 <__sflush_r+0xae>
 8005df4:	0793      	lsls	r3, r2, #30
 8005df6:	680e      	ldr	r6, [r1, #0]
 8005df8:	bf08      	it	eq
 8005dfa:	694b      	ldreq	r3, [r1, #20]
 8005dfc:	600f      	str	r7, [r1, #0]
 8005dfe:	bf18      	it	ne
 8005e00:	2300      	movne	r3, #0
 8005e02:	eba6 0807 	sub.w	r8, r6, r7
 8005e06:	608b      	str	r3, [r1, #8]
 8005e08:	f1b8 0f00 	cmp.w	r8, #0
 8005e0c:	dde9      	ble.n	8005de2 <__sflush_r+0xae>
 8005e0e:	6a21      	ldr	r1, [r4, #32]
 8005e10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e12:	4643      	mov	r3, r8
 8005e14:	463a      	mov	r2, r7
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b0      	blx	r6
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	dc08      	bgt.n	8005e30 <__sflush_r+0xfc>
 8005e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	4407      	add	r7, r0
 8005e32:	eba8 0800 	sub.w	r8, r8, r0
 8005e36:	e7e7      	b.n	8005e08 <__sflush_r+0xd4>
 8005e38:	20400001 	.word	0x20400001

08005e3c <_fflush_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	690b      	ldr	r3, [r1, #16]
 8005e40:	4605      	mov	r5, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	b913      	cbnz	r3, 8005e4c <_fflush_r+0x10>
 8005e46:	2500      	movs	r5, #0
 8005e48:	4628      	mov	r0, r5
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	b118      	cbz	r0, 8005e56 <_fflush_r+0x1a>
 8005e4e:	6a03      	ldr	r3, [r0, #32]
 8005e50:	b90b      	cbnz	r3, 8005e56 <_fflush_r+0x1a>
 8005e52:	f7fd ff71 	bl	8003d38 <__sinit>
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f3      	beq.n	8005e46 <_fflush_r+0xa>
 8005e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e60:	07d0      	lsls	r0, r2, #31
 8005e62:	d404      	bmi.n	8005e6e <_fflush_r+0x32>
 8005e64:	0599      	lsls	r1, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_fflush_r+0x32>
 8005e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e6a:	f7fe f9fa 	bl	8004262 <__retarget_lock_acquire_recursive>
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7ff ff5f 	bl	8005d34 <__sflush_r>
 8005e76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e78:	07da      	lsls	r2, r3, #31
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	d4e4      	bmi.n	8005e48 <_fflush_r+0xc>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	059b      	lsls	r3, r3, #22
 8005e82:	d4e1      	bmi.n	8005e48 <_fflush_r+0xc>
 8005e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e86:	f7fe f9ed 	bl	8004264 <__retarget_lock_release_recursive>
 8005e8a:	e7dd      	b.n	8005e48 <_fflush_r+0xc>

08005e8c <fiprintf>:
 8005e8c:	b40e      	push	{r1, r2, r3}
 8005e8e:	b503      	push	{r0, r1, lr}
 8005e90:	4601      	mov	r1, r0
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	4805      	ldr	r0, [pc, #20]	@ (8005eac <fiprintf+0x20>)
 8005e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f7ff fca5 	bl	80057ec <_vfiprintf_r>
 8005ea2:	b002      	add	sp, #8
 8005ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea8:	b003      	add	sp, #12
 8005eaa:	4770      	bx	lr
 8005eac:	2000017c 	.word	0x2000017c

08005eb0 <__swhatbuf_r>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	b096      	sub	sp, #88	@ 0x58
 8005ebc:	4615      	mov	r5, r2
 8005ebe:	461e      	mov	r6, r3
 8005ec0:	da0d      	bge.n	8005ede <__swhatbuf_r+0x2e>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2340      	movne	r3, #64	@ 0x40
 8005ed0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	6031      	str	r1, [r6, #0]
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	b016      	add	sp, #88	@ 0x58
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	466a      	mov	r2, sp
 8005ee0:	f000 f862 	bl	8005fa8 <_fstat_r>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	dbec      	blt.n	8005ec2 <__swhatbuf_r+0x12>
 8005ee8:	9901      	ldr	r1, [sp, #4]
 8005eea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005eee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ef2:	4259      	negs	r1, r3
 8005ef4:	4159      	adcs	r1, r3
 8005ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005efa:	e7eb      	b.n	8005ed4 <__swhatbuf_r+0x24>

08005efc <__smakebuf_r>:
 8005efc:	898b      	ldrh	r3, [r1, #12]
 8005efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f00:	079d      	lsls	r5, r3, #30
 8005f02:	4606      	mov	r6, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	d507      	bpl.n	8005f18 <__smakebuf_r+0x1c>
 8005f08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	2301      	movs	r3, #1
 8005f12:	6163      	str	r3, [r4, #20]
 8005f14:	b003      	add	sp, #12
 8005f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f18:	ab01      	add	r3, sp, #4
 8005f1a:	466a      	mov	r2, sp
 8005f1c:	f7ff ffc8 	bl	8005eb0 <__swhatbuf_r>
 8005f20:	9f00      	ldr	r7, [sp, #0]
 8005f22:	4605      	mov	r5, r0
 8005f24:	4639      	mov	r1, r7
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7fe fd8a 	bl	8004a40 <_malloc_r>
 8005f2c:	b948      	cbnz	r0, 8005f42 <__smakebuf_r+0x46>
 8005f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f32:	059a      	lsls	r2, r3, #22
 8005f34:	d4ee      	bmi.n	8005f14 <__smakebuf_r+0x18>
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	e7e2      	b.n	8005f08 <__smakebuf_r+0xc>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	6020      	str	r0, [r4, #0]
 8005f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f52:	b15b      	cbz	r3, 8005f6c <__smakebuf_r+0x70>
 8005f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f837 	bl	8005fcc <_isatty_r>
 8005f5e:	b128      	cbz	r0, 8005f6c <__smakebuf_r+0x70>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	431d      	orrs	r5, r3
 8005f70:	81a5      	strh	r5, [r4, #12]
 8005f72:	e7cf      	b.n	8005f14 <__smakebuf_r+0x18>

08005f74 <memmove>:
 8005f74:	4288      	cmp	r0, r1
 8005f76:	b510      	push	{r4, lr}
 8005f78:	eb01 0402 	add.w	r4, r1, r2
 8005f7c:	d902      	bls.n	8005f84 <memmove+0x10>
 8005f7e:	4284      	cmp	r4, r0
 8005f80:	4623      	mov	r3, r4
 8005f82:	d807      	bhi.n	8005f94 <memmove+0x20>
 8005f84:	1e43      	subs	r3, r0, #1
 8005f86:	42a1      	cmp	r1, r4
 8005f88:	d008      	beq.n	8005f9c <memmove+0x28>
 8005f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f92:	e7f8      	b.n	8005f86 <memmove+0x12>
 8005f94:	4402      	add	r2, r0
 8005f96:	4601      	mov	r1, r0
 8005f98:	428a      	cmp	r2, r1
 8005f9a:	d100      	bne.n	8005f9e <memmove+0x2a>
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa6:	e7f7      	b.n	8005f98 <memmove+0x24>

08005fa8 <_fstat_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	@ (8005fc8 <_fstat_r+0x20>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f7fb fea1 	bl	8001cfc <_fstat>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d102      	bne.n	8005fc4 <_fstat_r+0x1c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b103      	cbz	r3, 8005fc4 <_fstat_r+0x1c>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000724 	.word	0x20000724

08005fcc <_isatty_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_isatty_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fb fea0 	bl	8001d1c <_isatty>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_isatty_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_isatty_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000724 	.word	0x20000724

08005fec <_sbrk_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d06      	ldr	r5, [pc, #24]	@ (8006008 <_sbrk_r+0x1c>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fb fea8 	bl	8001d4c <_sbrk>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_sbrk_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_sbrk_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20000724 	.word	0x20000724

0800600c <abort>:
 800600c:	b508      	push	{r3, lr}
 800600e:	2006      	movs	r0, #6
 8006010:	f000 f86e 	bl	80060f0 <raise>
 8006014:	2001      	movs	r0, #1
 8006016:	f7fb fe21 	bl	8001c5c <_exit>

0800601a <_calloc_r>:
 800601a:	b570      	push	{r4, r5, r6, lr}
 800601c:	fba1 5402 	umull	r5, r4, r1, r2
 8006020:	b934      	cbnz	r4, 8006030 <_calloc_r+0x16>
 8006022:	4629      	mov	r1, r5
 8006024:	f7fe fd0c 	bl	8004a40 <_malloc_r>
 8006028:	4606      	mov	r6, r0
 800602a:	b928      	cbnz	r0, 8006038 <_calloc_r+0x1e>
 800602c:	4630      	mov	r0, r6
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	220c      	movs	r2, #12
 8006032:	6002      	str	r2, [r0, #0]
 8006034:	2600      	movs	r6, #0
 8006036:	e7f9      	b.n	800602c <_calloc_r+0x12>
 8006038:	462a      	mov	r2, r5
 800603a:	4621      	mov	r1, r4
 800603c:	f7fe f81c 	bl	8004078 <memset>
 8006040:	e7f4      	b.n	800602c <_calloc_r+0x12>

08006042 <_realloc_r>:
 8006042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006046:	4607      	mov	r7, r0
 8006048:	4614      	mov	r4, r2
 800604a:	460d      	mov	r5, r1
 800604c:	b921      	cbnz	r1, 8006058 <_realloc_r+0x16>
 800604e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	4611      	mov	r1, r2
 8006054:	f7fe bcf4 	b.w	8004a40 <_malloc_r>
 8006058:	b92a      	cbnz	r2, 8006066 <_realloc_r+0x24>
 800605a:	f7fe f943 	bl	80042e4 <_free_r>
 800605e:	4625      	mov	r5, r4
 8006060:	4628      	mov	r0, r5
 8006062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006066:	f000 f85f 	bl	8006128 <_malloc_usable_size_r>
 800606a:	4284      	cmp	r4, r0
 800606c:	4606      	mov	r6, r0
 800606e:	d802      	bhi.n	8006076 <_realloc_r+0x34>
 8006070:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006074:	d8f4      	bhi.n	8006060 <_realloc_r+0x1e>
 8006076:	4621      	mov	r1, r4
 8006078:	4638      	mov	r0, r7
 800607a:	f7fe fce1 	bl	8004a40 <_malloc_r>
 800607e:	4680      	mov	r8, r0
 8006080:	b908      	cbnz	r0, 8006086 <_realloc_r+0x44>
 8006082:	4645      	mov	r5, r8
 8006084:	e7ec      	b.n	8006060 <_realloc_r+0x1e>
 8006086:	42b4      	cmp	r4, r6
 8006088:	4622      	mov	r2, r4
 800608a:	4629      	mov	r1, r5
 800608c:	bf28      	it	cs
 800608e:	4632      	movcs	r2, r6
 8006090:	f7fe f8f1 	bl	8004276 <memcpy>
 8006094:	4629      	mov	r1, r5
 8006096:	4638      	mov	r0, r7
 8006098:	f7fe f924 	bl	80042e4 <_free_r>
 800609c:	e7f1      	b.n	8006082 <_realloc_r+0x40>

0800609e <_raise_r>:
 800609e:	291f      	cmp	r1, #31
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4605      	mov	r5, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	d904      	bls.n	80060b2 <_raise_r+0x14>
 80060a8:	2316      	movs	r3, #22
 80060aa:	6003      	str	r3, [r0, #0]
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80060b4:	b112      	cbz	r2, 80060bc <_raise_r+0x1e>
 80060b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060ba:	b94b      	cbnz	r3, 80060d0 <_raise_r+0x32>
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f831 	bl	8006124 <_getpid_r>
 80060c2:	4622      	mov	r2, r4
 80060c4:	4601      	mov	r1, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060cc:	f000 b818 	b.w	8006100 <_kill_r>
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d00a      	beq.n	80060ea <_raise_r+0x4c>
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	d103      	bne.n	80060e0 <_raise_r+0x42>
 80060d8:	2316      	movs	r3, #22
 80060da:	6003      	str	r3, [r0, #0]
 80060dc:	2001      	movs	r0, #1
 80060de:	e7e7      	b.n	80060b0 <_raise_r+0x12>
 80060e0:	2100      	movs	r1, #0
 80060e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060e6:	4620      	mov	r0, r4
 80060e8:	4798      	blx	r3
 80060ea:	2000      	movs	r0, #0
 80060ec:	e7e0      	b.n	80060b0 <_raise_r+0x12>
	...

080060f0 <raise>:
 80060f0:	4b02      	ldr	r3, [pc, #8]	@ (80060fc <raise+0xc>)
 80060f2:	4601      	mov	r1, r0
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f7ff bfd2 	b.w	800609e <_raise_r>
 80060fa:	bf00      	nop
 80060fc:	2000017c 	.word	0x2000017c

08006100 <_kill_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	@ (8006120 <_kill_r+0x20>)
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	4611      	mov	r1, r2
 800610c:	602b      	str	r3, [r5, #0]
 800610e:	f7fb fd95 	bl	8001c3c <_kill>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d102      	bne.n	800611c <_kill_r+0x1c>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	b103      	cbz	r3, 800611c <_kill_r+0x1c>
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	bd38      	pop	{r3, r4, r5, pc}
 800611e:	bf00      	nop
 8006120:	20000724 	.word	0x20000724

08006124 <_getpid_r>:
 8006124:	f7fb bd82 	b.w	8001c2c <_getpid>

08006128 <_malloc_usable_size_r>:
 8006128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612c:	1f18      	subs	r0, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfbc      	itt	lt
 8006132:	580b      	ldrlt	r3, [r1, r0]
 8006134:	18c0      	addlt	r0, r0, r3
 8006136:	4770      	bx	lr

08006138 <_init>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr

08006144 <_fini>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr
