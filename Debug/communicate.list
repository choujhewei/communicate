
communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003328  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080034f8  080034f8  000044f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003590  08003590  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003598  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000980  20000060  080035f8  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  080035f8  000059e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058f2  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001549  00000000  00000000  0000a982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055b  00000000  00000000  0000c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002030c  00000000  00000000  0000cb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a08  00000000  00000000  0002ce97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a50d5  00000000  00000000  0003389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000d89b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000db030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034e0 	.word	0x080034e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080034e0 	.word	0x080034e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e8:	4907      	ldr	r1, [pc, #28]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ffe3 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000616:	2004      	movs	r0, #4
 8000618:	f7ff ffe0 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800061c:	2002      	movs	r0, #2
 800061e:	f7ff ffdd 	bl	80005dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000622:	2008      	movs	r0, #8
 8000624:	f7ff ffda 	bl	80005dc <LL_AHB1_GRP1_EnableClock>

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	@ (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	@ (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	@ 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LL_RCC_HSI_Enable+0x1c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <LL_RCC_HSI_Enable+0x1c>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <LL_RCC_HSI_IsReady+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40023800 	.word	0x40023800

080007cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4904      	ldr	r1, [pc, #16]	@ (80007f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007e2:	4313      	orrs	r3, r2
 80007e4:	600b      	str	r3, [r1, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <LL_RCC_SetSysClkSource+0x24>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f023 0203 	bic.w	r2, r3, #3
 8000808:	4904      	ldr	r1, [pc, #16]	@ (800081c <LL_RCC_SetSysClkSource+0x24>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	608b      	str	r3, [r1, #8]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023800 	.word	0x40023800

08000820 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <LL_RCC_GetSysClkSource+0x18>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f003 030c 	and.w	r3, r3, #12
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <LL_RCC_SetAHBPrescaler+0x24>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800084c:	4904      	ldr	r1, [pc, #16]	@ (8000860 <LL_RCC_SetAHBPrescaler+0x24>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40023800 	.word	0x40023800

08000864 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <LL_RCC_SetAPB1Prescaler+0x24>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000874:	4904      	ldr	r1, [pc, #16]	@ (8000888 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4313      	orrs	r3, r2
 800087a:	608b      	str	r3, [r1, #8]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800089c:	4904      	ldr	r1, [pc, #16]	@ (80008b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	608b      	str	r3, [r1, #8]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_RCC_SetTIMPrescaler+0x28>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80008c6:	4905      	ldr	r1, [pc, #20]	@ (80008dc <LL_RCC_SetTIMPrescaler+0x28>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800

080008e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ec:	4907      	ldr	r1, [pc, #28]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4013      	ands	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40023800 	.word	0x40023800

08000910 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 800091a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800091c:	4907      	ldr	r1, [pc, #28]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	40023800 	.word	0x40023800

08000940 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <LL_FLASH_SetLatency+0x24>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 020f 	bic.w	r2, r3, #15
 8000950:	4904      	ldr	r1, [pc, #16]	@ (8000964 <LL_FLASH_SetLatency+0x24>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40023c00 	.word	0x40023c00

08000968 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <LL_FLASH_GetLatency+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 030f 	and.w	r3, r3, #15
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023c00 	.word	0x40023c00

08000984 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <LL_PWR_DisableOverDriveMode+0x1c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <LL_PWR_DisableOverDriveMode+0x1c>)
 800098e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40007000 	.word	0x40007000

080009a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80009b4:	4904      	ldr	r1, [pc, #16]	@ (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40007000 	.word	0x40007000

080009cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b089      	sub	sp, #36	@ 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	330c      	adds	r3, #12
 80009f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	e853 3f00 	ldrex	r3, [r3]
 8000a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	330c      	adds	r3, #12
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	61ba      	str	r2, [r7, #24]
 8000a12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a14:	6979      	ldr	r1, [r7, #20]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	e841 2300 	strex	r3, r2, [r1]
 8000a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1e7      	bne.n	80009f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000a38:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000a3c:	f7ff ff50 	bl	80008e0 <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a44:	f7ff ff64 	bl	8000910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a48:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a4c:	f7ff ff48 	bl	80008e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a54:	f7ff ff5c 	bl	8000910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a58:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a5c:	f7ff ff40 	bl	80008e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fde3 	bl	800062c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000a66:	f7ff fe05 	bl	8000674 <__NVIC_GetPriorityGrouping>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	210f      	movs	r1, #15
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe55 	bl	8000720 <NVIC_EncodePriority>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f7ff fe25 	bl	80006cc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f847 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f7ff fdc1 	bl	800060c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a8a:	f000 fca7 	bl	80013dc <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000a8e:	f000 fbdd 	bl	800124c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000a92:	f000 fc53 	bl	800133c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART3);
 8000a96:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <main+0xc0>)
 8000a98:	f7ff ffa8 	bl	80009ec <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART3);
 8000a9c:	4815      	ldr	r0, [pc, #84]	@ (8000af4 <main+0xc0>)
 8000a9e:	f7ff ff95 	bl	80009cc <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(UART5);
 8000aa2:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <main+0xc4>)
 8000aa4:	f7ff ffa2 	bl	80009ec <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(UART5);
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <main+0xc4>)
 8000aaa:	f7ff ff8f 	bl	80009cc <LL_USART_Enable>
  NVIC_SetPriority(USART3_IRQn, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2027      	movs	r0, #39	@ 0x27
 8000ab2:	f7ff fe0b 	bl	80006cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000ab6:	2027      	movs	r0, #39	@ 0x27
 8000ab8:	f7ff fdea 	bl	8000690 <__NVIC_EnableIRQ>
  NVIC_SetPriority(UART5_IRQn, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2035      	movs	r0, #53	@ 0x35
 8000ac0:	f7ff fe04 	bl	80006cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8000ac4:	2035      	movs	r0, #53	@ 0x35
 8000ac6:	f7ff fde3 	bl	8000690 <__NVIC_EnableIRQ>
  printf ("start\r\n");
 8000aca:	480c      	ldr	r0, [pc, #48]	@ (8000afc <main+0xc8>)
 8000acc:	f001 fcce 	bl	800246c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8000ad0:	490b      	ldr	r1, [pc, #44]	@ (8000b00 <main+0xcc>)
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <main+0xd0>)
 8000ad4:	f000 f908 	bl	8000ce8 <loop_check_uart5>
	 if (data_ready)
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <main+0xd4>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f6      	beq.n	8000ad0 <main+0x9c>
	  {
	    data_ready = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <main+0xd4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	    printf("Received JSON: %s\n", rx_buffer);
 8000ae8:	4908      	ldr	r1, [pc, #32]	@ (8000b0c <main+0xd8>)
 8000aea:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <main+0xdc>)
 8000aec:	f001 fc56 	bl	800239c <iprintf>
	loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8000af0:	e7ee      	b.n	8000ad0 <main+0x9c>
 8000af2:	bf00      	nop
 8000af4:	40004800 	.word	0x40004800
 8000af8:	40005000 	.word	0x40005000
 8000afc:	080034f8 	.word	0x080034f8
 8000b00:	2000088e 	.word	0x2000088e
 8000b04:	20000884 	.word	0x20000884
 8000b08:	20000880 	.word	0x20000880
 8000b0c:	20000080 	.word	0x20000080
 8000b10:	08003500 	.word	0x08003500

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ff11 	bl	8000940 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000b1e:	bf00      	nop
 8000b20:	f7ff ff22 	bl	8000968 <LL_FLASH_GetLatency>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1fa      	bne.n	8000b20 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000b2a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b2e:	f7ff ff39 	bl	80009a4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000b32:	f7ff ff27 	bl	8000984 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b36:	2010      	movs	r0, #16
 8000b38:	f7ff fe48 	bl	80007cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000b3c:	f7ff fe24 	bl	8000788 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b40:	bf00      	nop
 8000b42:	f7ff fe31 	bl	80007a8 <LL_RCC_HSI_IsReady>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d1fa      	bne.n	8000b42 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fe75 	bl	800083c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fe86 	bl	8000864 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fe97 	bl	800088c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fe4a 	bl	80007f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000b64:	bf00      	nop
 8000b66:	f7ff fe5b 	bl	8000820 <LL_RCC_GetSysClkSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1fa      	bne.n	8000b66 <SystemClock_Config+0x52>
  {

  }
  LL_Init1msTick(16000000);
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <SystemClock_Config+0x74>)
 8000b72:	f001 fb33 	bl	80021dc <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <SystemClock_Config+0x74>)
 8000b78:	f001 fb3e 	bl	80021f8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fe99 	bl	80008b4 <LL_RCC_SetTIMPrescaler>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	00f42400 	.word	0x00f42400

08000b8c <LL_USART_IsActiveFlag_TXE>:
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9c:	2b80      	cmp	r3, #128	@ 0x80
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000bbe:	78fa      	ldrb	r2, [r7, #3]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	605a      	str	r2, [r3, #4]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <process_ps4_packet>:

#include "main.h"
#include "ps4_parser.h"
#include <stdio.h>

void process_ps4_packet(uint8_t *packet) {
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b09a      	sub	sp, #104	@ 0x68
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	6078      	str	r0, [r7, #4]
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2baa      	cmp	r3, #170	@ 0xaa
 8000bde:	d178      	bne.n	8000cd2 <process_ps4_packet+0x102>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3308      	adds	r3, #8
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b55      	cmp	r3, #85	@ 0x55
 8000be8:	d173      	bne.n	8000cd2 <process_ps4_packet+0x102>

    int8_t lx = (int8_t)packet[1];
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3301      	adds	r3, #1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    int8_t ly = (int8_t)packet[2];
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    int8_t rx = (int8_t)packet[3];
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3303      	adds	r3, #3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    int8_t ry = (int8_t)packet[4];
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint16_t buttons = packet[5] | (packet[6] << 8);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3305      	adds	r3, #5
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t checksum = (lx + ly + rx + ry + packet[5] + packet[6]) & 0xFF;
 8000c2e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000c32:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000c36:	4413      	add	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000c46:	4413      	add	r3, r2
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3305      	adds	r3, #5
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3306      	adds	r3, #6
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (checksum != packet[7]) return;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3307      	adds	r3, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d133      	bne.n	8000cd6 <process_ps4_packet+0x106>
    char debug_msg[64];
    sprintf(debug_msg, "LX=%d LY=%d RX=%d RY=%d BTN=0x%04X\r\n", lx, ly, rx, ry, buttons);
 8000c6e:	f997 4053 	ldrsb.w	r4, [r7, #83]	@ 0x53
 8000c72:	f997 5052 	ldrsb.w	r5, [r7, #82]	@ 0x52
 8000c76:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8000c7a:	f997 2050 	ldrsb.w	r2, [r7, #80]	@ 0x50
 8000c7e:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8000c82:	f107 000c 	add.w	r0, r7, #12
 8000c86:	9102      	str	r1, [sp, #8]
 8000c88:	9201      	str	r2, [sp, #4]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462b      	mov	r3, r5
 8000c8e:	4622      	mov	r2, r4
 8000c90:	4913      	ldr	r1, [pc, #76]	@ (8000ce0 <process_ps4_packet+0x110>)
 8000c92:	f001 fbf3 	bl	800247c <siprintf>
    for (char *p = debug_msg; *p; p++) {
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000c9c:	e014      	b.n	8000cc8 <process_ps4_packet+0xf8>
        while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000c9e:	bf00      	nop
 8000ca0:	4810      	ldr	r0, [pc, #64]	@ (8000ce4 <process_ps4_packet+0x114>)
 8000ca2:	f7ff ff73 	bl	8000b8c <LL_USART_IsActiveFlag_TXE>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf0c      	ite	eq
 8000cac:	2301      	moveq	r3, #1
 8000cae:	2300      	movne	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f4      	bne.n	8000ca0 <process_ps4_packet+0xd0>
        LL_USART_TransmitData8(USART2, *p);
 8000cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <process_ps4_packet+0x114>)
 8000cbe:	f7ff ff78 	bl	8000bb2 <LL_USART_TransmitData8>
    for (char *p = debug_msg; *p; p++) {
 8000cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1e6      	bne.n	8000c9e <process_ps4_packet+0xce>
 8000cd0:	e002      	b.n	8000cd8 <process_ps4_packet+0x108>
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <process_ps4_packet+0x108>
    if (checksum != packet[7]) return;
 8000cd6:	bf00      	nop
    }
}
 8000cd8:	3758      	adds	r7, #88	@ 0x58
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08003514 	.word	0x08003514
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <loop_check_uart5>:

void loop_check_uart5(uint8_t *rx_buffer, volatile uint8_t *packet_ready) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
    if (*packet_ready) {
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf14      	ite	ne
 8000cfc:	2301      	movne	r3, #1
 8000cfe:	2300      	moveq	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <loop_check_uart5+0x2a>
        *packet_ready = 0;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
        process_ps4_packet(rx_buffer);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff5f 	bl	8000bd0 <process_ps4_packet>
    }
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <LL_USART_IsActiveFlag_RXNE>:
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	2b20      	cmp	r3, #32
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_USART_IsEnabledIT_RXNE>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	2b20      	cmp	r3, #32
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <LL_USART_ReceiveData8>:
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	b2db      	uxtb	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8000de4:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <USART3_IRQHandler+0x7c>)
 8000de6:	f7ff ff98 	bl	8000d1a <LL_USART_IsActiveFlag_RXNE>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d033      	beq.n	8000e58 <USART3_IRQHandler+0x78>
 8000df0:	481a      	ldr	r0, [pc, #104]	@ (8000e5c <USART3_IRQHandler+0x7c>)
 8000df2:	f7ff ffa5 	bl	8000d40 <LL_USART_IsEnabledIT_RXNE>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d02d      	beq.n	8000e58 <USART3_IRQHandler+0x78>
	  {
	    rx_data = LL_USART_ReceiveData8(USART3);
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <USART3_IRQHandler+0x7c>)
 8000dfe:	f7ff ffb2 	bl	8000d66 <LL_USART_ReceiveData8>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <USART3_IRQHandler+0x80>)
 8000e08:	701a      	strb	r2, [r3, #0]

	    // 檢查是否資料結束（這裡用 \n 當作結尾）
	    if (rx_data == '\n' || rx_index >= RX_BUFFER_SIZE - 1)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <USART3_IRQHandler+0x80>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b0a      	cmp	r3, #10
 8000e12:	d006      	beq.n	8000e22 <USART3_IRQHandler+0x42>
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <USART3_IRQHandler+0x84>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d90d      	bls.n	8000e3e <USART3_IRQHandler+0x5e>
	    {
	      rx_buffer[rx_index] = '\0';  // 加上結尾字元
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <USART3_IRQHandler+0x84>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <USART3_IRQHandler+0x88>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
	      rx_index = 0;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <USART3_IRQHandler+0x84>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]
	      data_ready = 1;  // 設定資料完成旗標
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <USART3_IRQHandler+0x8c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
	    {
	      rx_buffer[rx_index++] = rx_data;
	    }
	  }
  /* USER CODE END USART3_IRQn 1 */
}
 8000e3c:	e00c      	b.n	8000e58 <USART3_IRQHandler+0x78>
	      rx_buffer[rx_index++] = rx_data;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <USART3_IRQHandler+0x84>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	b291      	uxth	r1, r2
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <USART3_IRQHandler+0x84>)
 8000e4a:	8011      	strh	r1, [r2, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <USART3_IRQHandler+0x80>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2d9      	uxtb	r1, r3
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <USART3_IRQHandler+0x88>)
 8000e56:	5499      	strb	r1, [r3, r2]
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004800 	.word	0x40004800
 8000e60:	2000007c 	.word	0x2000007c
 8000e64:	2000007e 	.word	0x2000007e
 8000e68:	20000080 	.word	0x20000080
 8000e6c:	20000880 	.word	0x20000880

08000e70 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 8000e76:	4815      	ldr	r0, [pc, #84]	@ (8000ecc <UART5_IRQHandler+0x5c>)
 8000e78:	f7ff ff4f 	bl	8000d1a <LL_USART_IsActiveFlag_RXNE>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d015      	beq.n	8000eae <UART5_IRQHandler+0x3e>
 8000e82:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <UART5_IRQHandler+0x5c>)
 8000e84:	f7ff ff5c 	bl	8000d40 <LL_USART_IsEnabledIT_RXNE>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00f      	beq.n	8000eae <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 8000e8e:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <UART5_IRQHandler+0x5c>)
 8000e90:	f7ff ff69 	bl	8000d66 <LL_USART_ReceiveData8>
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <UART5_IRQHandler+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	b2d1      	uxtb	r1, r2
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <UART5_IRQHandler+0x60>)
 8000ea4:	7011      	strb	r1, [r2, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <UART5_IRQHandler+0x64>)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <UART5_IRQHandler+0x60>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d905      	bls.n	8000ec4 <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <UART5_IRQHandler+0x60>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <UART5_IRQHandler+0x68>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005000 	.word	0x40005000
 8000ed0:	2000088d 	.word	0x2000088d
 8000ed4:	20000884 	.word	0x20000884
 8000ed8:	2000088e 	.word	0x2000088e

08000edc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
  }

  return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 facb 	bl	80014cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
  }
  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f001 fb90 	bl	800270c <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	20000890 	.word	0x20000890
 8001020:	200009e0 	.word	0x200009e0

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <LL_AHB1_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4013      	ands	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40023800 	.word	0x40023800

0800118c <LL_APB1_GRP1_EnableClock>:
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001198:	4907      	ldr	r1, [pc, #28]	@ (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40023800 	.word	0x40023800

080011bc <LL_USART_Enable>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_USART_ConfigAsyncMode>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_USART_IsActiveFlag_TC>:
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001218:	2b40      	cmp	r3, #64	@ 0x40
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_USART_TransmitData8>:
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	605a      	str	r2, [r3, #4]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001276:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800127a:	f7ff ff87 	bl	800118c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800127e:	2004      	movs	r0, #4
 8001280:	f7ff ff6c 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001284:	2008      	movs	r0, #8
 8001286:	f7ff ff69 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4821      	ldr	r0, [pc, #132]	@ (8001330 <MX_UART5_Init+0xe4>)
 80012aa:	f000 fa9b 	bl	80017e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80012c2:	2308      	movs	r3, #8
 80012c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	481a      	ldr	r0, [pc, #104]	@ (8001334 <MX_UART5_Init+0xe8>)
 80012cc:	f000 fa8a 	bl	80017e4 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012d0:	f7ff feba 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff0a 	bl	80010f4 <NVIC_EncodePriority>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	2035      	movs	r0, #53	@ 0x35
 80012e6:	f7ff fedb 	bl	80010a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80012ea:	2035      	movs	r0, #53	@ 0x35
 80012ec:	f7ff feba 	bl	8001064 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012f4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001302:	230c      	movs	r3, #12
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <MX_UART5_Init+0xec>)
 8001316:	f000 fec7 	bl	80020a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_UART5_Init+0xec>)
 800131c:	f7ff ff5e 	bl	80011dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_UART5_Init+0xec>)
 8001322:	f7ff ff4b 	bl	80011bc <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3738      	adds	r7, #56	@ 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40005000 	.word	0x40005000

0800133c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	@ 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001366:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800136a:	f7ff ff0f 	bl	800118c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff fef4 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001374:	230c      	movs	r3, #12
 8001376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001378:	2302      	movs	r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001388:	2307      	movs	r3, #7
 800138a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	@ (80013d4 <MX_USART2_UART_Init+0x98>)
 8001392:	f000 fa27 	bl	80017e4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001396:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800139a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013a8:	230c      	movs	r3, #12
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_USART2_UART_Init+0x9c>)
 80013bc:	f000 fe74 	bl	80020a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_USART2_UART_Init+0x9c>)
 80013c2:	f7ff ff0b 	bl	80011dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_USART2_UART_Init+0x9c>)
 80013c8:	f7ff fef8 	bl	80011bc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	@ 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001406:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800140a:	f7ff febf 	bl	800118c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800140e:	2004      	movs	r0, #4
 8001410:	f7ff fea4 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff fea1 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800141a:	2320      	movs	r3, #32
 800141c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800141e:	2302      	movs	r3, #2
 8001420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800142e:	2307      	movs	r3, #7
 8001430:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4822      	ldr	r0, [pc, #136]	@ (80014c0 <MX_USART3_UART_Init+0xe4>)
 8001438:	f000 f9d4 	bl	80017e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800143c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001442:	2302      	movs	r3, #2
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001452:	2307      	movs	r3, #7
 8001454:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	481a      	ldr	r0, [pc, #104]	@ (80014c4 <MX_USART3_UART_Init+0xe8>)
 800145c:	f000 f9c2 	bl	80017e4 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001460:	f7ff fdf2 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001464:	4603      	mov	r3, r0
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe42 	bl	80010f4 <NVIC_EncodePriority>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	2027      	movs	r0, #39	@ 0x27
 8001476:	f7ff fe13 	bl	80010a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800147a:	2027      	movs	r0, #39	@ 0x27
 800147c:	f7ff fdf2 	bl	8001064 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001480:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001484:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001492:	230c      	movs	r3, #12
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4808      	ldr	r0, [pc, #32]	@ (80014c8 <MX_USART3_UART_Init+0xec>)
 80014a6:	f000 fdff 	bl	80020a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80014aa:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_USART3_UART_Init+0xec>)
 80014ac:	f7ff fe96 	bl	80011dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80014b0:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_USART3_UART_Init+0xec>)
 80014b2:	f7ff fe83 	bl	80011bc <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3738      	adds	r7, #56	@ 0x38
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40004800 	.word	0x40004800

080014cc <__io_putchar>:

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    LL_USART_TransmitData8(USART2, ch);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <__io_putchar+0x2c>)
 80014dc:	f7ff fea7 	bl	800122e <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(USART2));
 80014e0:	bf00      	nop
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <__io_putchar+0x2c>)
 80014e4:	f7ff fe90 	bl	8001208 <LL_USART_IsActiveFlag_TC>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f9      	beq.n	80014e2 <__io_putchar+0x16>
    return ch;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004400 	.word	0x40004400

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001500:	f7ff fd90 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	@ (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	@ (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152a:	f001 f8f5 	bl	8002718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fa81 	bl	8000a34 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001540:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8001544:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001548:	200009e0 	.word	0x200009e0

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>

0800154e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800154e:	b480      	push	{r7}
 8001550:	b08b      	sub	sp, #44	@ 0x2c
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	613b      	str	r3, [r7, #16]
  return result;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001574:	2320      	movs	r3, #32
 8001576:	e003      	b.n	8001580 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2103      	movs	r1, #3
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	61fb      	str	r3, [r7, #28]
  return result;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80015a2:	2320      	movs	r3, #32
 80015a4:	e003      	b.n	80015ae <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	372c      	adds	r7, #44	@ 0x2c
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	43db      	mvns	r3, r3
 80015dc:	401a      	ands	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	431a      	orrs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	613b      	str	r3, [r7, #16]
  return result;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800161e:	2320      	movs	r3, #32
 8001620:	e003      	b.n	800162a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2103      	movs	r1, #3
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	401a      	ands	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	61fb      	str	r3, [r7, #28]
  return result;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e003      	b.n	8001658 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	@ 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001672:	b480      	push	{r7}
 8001674:	b08b      	sub	sp, #44	@ 0x2c
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	613b      	str	r3, [r7, #16]
  return result;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e003      	b.n	80016a4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2103      	movs	r1, #3
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	61fb      	str	r3, [r7, #28]
  return result;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016c6:	2320      	movs	r3, #32
 80016c8:	e003      	b.n	80016d2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	431a      	orrs	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	60da      	str	r2, [r3, #12]
}
 80016e0:	bf00      	nop
 80016e2:	372c      	adds	r7, #44	@ 0x2c
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	@ 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	613b      	str	r3, [r7, #16]
  return result;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e003      	b.n	800171e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	210f      	movs	r1, #15
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	61fb      	str	r3, [r7, #28]
  return result;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800175a:	bf00      	nop
 800175c:	372c      	adds	r7, #44	@ 0x2c
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001766:	b480      	push	{r7}
 8001768:	b08b      	sub	sp, #44	@ 0x2c
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	613b      	str	r3, [r7, #16]
  return result;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800178e:	2320      	movs	r3, #32
 8001790:	e003      	b.n	800179a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	210f      	movs	r1, #15
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	401a      	ands	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	61fb      	str	r3, [r7, #28]
  return result;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80017be:	2320      	movs	r3, #32
 80017c0:	e003      	b.n	80017ca <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	@ 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	617b      	str	r3, [r7, #20]
  return result;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <LL_GPIO_Init+0x2e>
    return 32U;
 800180e:	2320      	movs	r3, #32
 8001810:	e003      	b.n	800181a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800181c:	e057      	b.n	80018ce <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2101      	movs	r1, #1
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	4013      	ands	r3, r2
 800182c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d049      	beq.n	80018c8 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d003      	beq.n	8001844 <LL_GPIO_Init+0x60>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d10d      	bne.n	8001860 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	461a      	mov	r2, r3
 800184a:	6a39      	ldr	r1, [r7, #32]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fed3 	bl	80015f8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	461a      	mov	r2, r3
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff feb4 	bl	80015c8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	461a      	mov	r2, r3
 8001866:	6a39      	ldr	r1, [r7, #32]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff02 	bl	8001672 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d121      	bne.n	80018ba <LL_GPIO_Init+0xd6>
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	60bb      	str	r3, [r7, #8]
  return result;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LL_GPIO_Init+0xac>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e003      	b.n	8001898 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001898:	2b07      	cmp	r3, #7
 800189a:	d807      	bhi.n	80018ac <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	461a      	mov	r2, r3
 80018a2:	6a39      	ldr	r1, [r7, #32]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff21 	bl	80016ec <LL_GPIO_SetAFPin_0_7>
 80018aa:	e006      	b.n	80018ba <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	461a      	mov	r2, r3
 80018b2:	6a39      	ldr	r1, [r7, #32]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff56 	bl	8001766 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe43 	bl	800154e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	3301      	adds	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1a0      	bne.n	800181e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <LL_RCC_GetSysClkSource>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <LL_RCC_GetSysClkSource+0x18>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <LL_RCC_GetAHBPrescaler>:
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <LL_RCC_GetAHBPrescaler+0x18>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <LL_RCC_GetAPB1Prescaler>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <LL_RCC_GetAPB2Prescaler>:
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <LL_RCC_PLL_GetMainSource+0x18>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <LL_RCC_PLL_GetN+0x18>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40023800 	.word	0x40023800

08001990 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <LL_RCC_PLL_GetP+0x18>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <LL_RCC_PLL_GetR+0x18>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <LL_RCC_PLL_GetDivider+0x18>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019ec:	f000 f820 	bl	8001a30 <RCC_GetSystemClockFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f85c 	bl	8001ab8 <RCC_GetHCLKClockFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f86a 	bl	8001ae4 <RCC_GetPCLK1ClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f876 	bl	8001b0c <RCC_GetPCLK2ClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60da      	str	r2, [r3, #12]
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001a3a:	f7ff ff55 	bl	80018e8 <LL_RCC_GetSysClkSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d82d      	bhi.n	8001aa0 <RCC_GetSystemClockFreq+0x70>
 8001a44:	a201      	add	r2, pc, #4	@ (adr r2, 8001a4c <RCC_GetSystemClockFreq+0x1c>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001aa1 	.word	0x08001aa1
 8001a58:	08001aa1 	.word	0x08001aa1
 8001a5c:	08001a87 	.word	0x08001a87
 8001a60:	08001aa1 	.word	0x08001aa1
 8001a64:	08001aa1 	.word	0x08001aa1
 8001a68:	08001aa1 	.word	0x08001aa1
 8001a6c:	08001a8d 	.word	0x08001a8d
 8001a70:	08001aa1 	.word	0x08001aa1
 8001a74:	08001aa1 	.word	0x08001aa1
 8001a78:	08001aa1 	.word	0x08001aa1
 8001a7c:	08001a97 	.word	0x08001a97
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <RCC_GetSystemClockFreq+0x80>)
 8001a82:	607b      	str	r3, [r7, #4]
      break;
 8001a84:	e00f      	b.n	8001aa6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <RCC_GetSystemClockFreq+0x84>)
 8001a88:	607b      	str	r3, [r7, #4]
      break;
 8001a8a:	e00c      	b.n	8001aa6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001a8c:	2008      	movs	r0, #8
 8001a8e:	f000 f851 	bl	8001b34 <RCC_PLL_GetFreqDomain_SYS>
 8001a92:	6078      	str	r0, [r7, #4]
      break;
 8001a94:	e007      	b.n	8001aa6 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8001a96:	200c      	movs	r0, #12
 8001a98:	f000 f84c 	bl	8001b34 <RCC_PLL_GetFreqDomain_SYS>
 8001a9c:	6078      	str	r0, [r7, #4]
      break;
 8001a9e:	e002      	b.n	8001aa6 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <RCC_GetSystemClockFreq+0x80>)
 8001aa2:	607b      	str	r3, [r7, #4]
      break;
 8001aa4:	bf00      	nop
  }

  return frequency;
 8001aa6:	687b      	ldr	r3, [r7, #4]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	017d7840 	.word	0x017d7840

08001ab8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001ac0:	f7ff ff20 	bl	8001904 <LL_RCC_GetAHBPrescaler>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <RCC_GetHCLKClockFreq+0x28>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	40d3      	lsrs	r3, r2
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800353c 	.word	0x0800353c

08001ae4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001aec:	f7ff ff18 	bl	8001920 <LL_RCC_GetAPB1Prescaler>
 8001af0:	4603      	mov	r3, r0
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <RCC_GetPCLK1ClockFreq+0x24>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	40d3      	lsrs	r3, r2
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800354c 	.word	0x0800354c

08001b0c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001b14:	f7ff ff12 	bl	800193c <LL_RCC_GetAPB2Prescaler>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	0b5b      	lsrs	r3, r3, #13
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <RCC_GetPCLK2ClockFreq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	40d3      	lsrs	r3, r2
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	0800354c 	.word	0x0800354c

08001b34 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b48:	f7ff ff06 	bl	8001958 <LL_RCC_PLL_GetMainSource>
 8001b4c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b5a:	d003      	beq.n	8001b64 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001b5c:	e005      	b.n	8001b6a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8001b60:	617b      	str	r3, [r7, #20]
      break;
 8001b62:	e005      	b.n	8001b70 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8001b66:	617b      	str	r3, [r7, #20]
      break;
 8001b68:	e002      	b.n	8001b70 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8001b6c:	617b      	str	r3, [r7, #20]
      break;
 8001b6e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d114      	bne.n	8001ba0 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001b76:	f7ff ff27 	bl	80019c8 <LL_RCC_PLL_GetDivider>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fbb3 f4f2 	udiv	r4, r3, r2
 8001b82:	f7ff fef7 	bl	8001974 <LL_RCC_PLL_GetN>
 8001b86:	4603      	mov	r3, r0
 8001b88:	fb03 f404 	mul.w	r4, r3, r4
 8001b8c:	f7ff ff00 	bl	8001990 <LL_RCC_PLL_GetP>
 8001b90:	4603      	mov	r3, r0
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	3301      	adds	r3, #1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e011      	b.n	8001bc4 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001ba0:	f7ff ff12 	bl	80019c8 <LL_RCC_PLL_GetDivider>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fbb3 f4f2 	udiv	r4, r3, r2
 8001bac:	f7ff fee2 	bl	8001974 <LL_RCC_PLL_GetN>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	fb03 f404 	mul.w	r4, r3, r4
 8001bb6:	f7ff fef9 	bl	80019ac <LL_RCC_PLL_GetR>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	0f1b      	lsrs	r3, r3, #28
 8001bbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8001bc2:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001bc4:	693b      	ldr	r3, [r7, #16]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	017d7840 	.word	0x017d7840

08001bd8 <LL_USART_IsEnabled>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_USART_SetStopBitsLength>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_USART_SetHWFlowCtrl>:
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	615a      	str	r2, [r3, #20]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_USART_SetBaudRate>:
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b0c0      	sub	sp, #256	@ 0x100
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c58:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001c5c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c6c:	f040 810c 	bne.w	8001e88 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001c70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	1891      	adds	r1, r2, r2
 8001c88:	6639      	str	r1, [r7, #96]	@ 0x60
 8001c8a:	415b      	adcs	r3, r3
 8001c8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c8e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c92:	4621      	mov	r1, r4
 8001c94:	eb12 0801 	adds.w	r8, r2, r1
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb43 0901 	adc.w	r9, r3, r1
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	eb18 0303 	adds.w	r3, r8, r3
 8001cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	eb49 0303 	adc.w	r3, r9, r3
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4693      	mov	fp, r2
 8001cd4:	eb1a 030a 	adds.w	r3, sl, sl
 8001cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cda:	eb4b 030b 	adc.w	r3, fp, fp
 8001cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ce8:	f7fe fae2 	bl	80002b0 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4b64      	ldr	r3, [pc, #400]	@ (8001e84 <LL_USART_SetBaudRate+0x238>)
 8001cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	b29c      	uxth	r4, r3
 8001cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d08:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d0c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001d10:	4642      	mov	r2, r8
 8001d12:	464b      	mov	r3, r9
 8001d14:	1891      	adds	r1, r2, r2
 8001d16:	6539      	str	r1, [r7, #80]	@ 0x50
 8001d18:	415b      	adcs	r3, r3
 8001d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d20:	4641      	mov	r1, r8
 8001d22:	1851      	adds	r1, r2, r1
 8001d24:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d26:	4649      	mov	r1, r9
 8001d28:	414b      	adcs	r3, r1
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001d38:	4659      	mov	r1, fp
 8001d3a:	00cb      	lsls	r3, r1, #3
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d42:	4651      	mov	r1, sl
 8001d44:	00ca      	lsls	r2, r1, #3
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d54:	464b      	mov	r3, r9
 8001d56:	460a      	mov	r2, r1
 8001d58:	eb42 0303 	adc.w	r3, r2, r3
 8001d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001d64:	2200      	movs	r2, #0
 8001d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d6a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001d6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001d72:	460b      	mov	r3, r1
 8001d74:	18db      	adds	r3, r3, r3
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d78:	4613      	mov	r3, r2
 8001d7a:	eb42 0303 	adc.w	r3, r2, r3
 8001d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d84:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001d88:	f7fe fa92 	bl	80002b0 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4611      	mov	r1, r2
 8001d92:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <LL_USART_SetBaudRate+0x238>)
 8001d94:	fba3 2301 	umull	r2, r3, r3, r1
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	2264      	movs	r2, #100	@ 0x64
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	1acb      	subs	r3, r1, r3
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001da8:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <LL_USART_SetBaudRate+0x238>)
 8001daa:	fba3 2302 	umull	r2, r3, r3, r2
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4423      	add	r3, r4
 8001dbe:	b29c      	uxth	r4, r3
 8001dc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001dca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001dce:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001dd2:	4642      	mov	r2, r8
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	1891      	adds	r1, r2, r2
 8001dd8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dde:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001de2:	4641      	mov	r1, r8
 8001de4:	1851      	adds	r1, r2, r1
 8001de6:	6339      	str	r1, [r7, #48]	@ 0x30
 8001de8:	4649      	mov	r1, r9
 8001dea:	414b      	adcs	r3, r1
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001dfa:	4659      	mov	r1, fp
 8001dfc:	00cb      	lsls	r3, r1, #3
 8001dfe:	4651      	mov	r1, sl
 8001e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e04:	4651      	mov	r1, sl
 8001e06:	00ca      	lsls	r2, r1, #3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4642      	mov	r2, r8
 8001e10:	189b      	adds	r3, r3, r2
 8001e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e16:	464b      	mov	r3, r9
 8001e18:	460a      	mov	r2, r1
 8001e1a:	eb42 0303 	adc.w	r3, r2, r3
 8001e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001e22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e2c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001e30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001e34:	460b      	mov	r3, r1
 8001e36:	18db      	adds	r3, r3, r3
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	eb42 0303 	adc.w	r3, r2, r3
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e46:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001e4a:	f7fe fa31 	bl	80002b0 <__aeabi_uldivmod>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <LL_USART_SetBaudRate+0x238>)
 8001e54:	fba3 1302 	umull	r1, r3, r3, r2
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	2164      	movs	r1, #100	@ 0x64
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	3332      	adds	r3, #50	@ 0x32
 8001e66:	4a07      	ldr	r2, [pc, #28]	@ (8001e84 <LL_USART_SetBaudRate+0x238>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4423      	add	r3, r4
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e80:	609a      	str	r2, [r3, #8]
}
 8001e82:	e108      	b.n	8002096 <LL_USART_SetBaudRate+0x44a>
 8001e84:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001e88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e92:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e96:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	1891      	adds	r1, r2, r2
 8001ea0:	6239      	str	r1, [r7, #32]
 8001ea2:	415b      	adcs	r3, r3
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eaa:	4641      	mov	r1, r8
 8001eac:	1854      	adds	r4, r2, r1
 8001eae:	4649      	mov	r1, r9
 8001eb0:	eb43 0501 	adc.w	r5, r3, r1
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	00eb      	lsls	r3, r5, #3
 8001ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec2:	00e2      	lsls	r2, r4, #3
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	eb45 0303 	adc.w	r3, r5, r3
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ee4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	008b      	lsls	r3, r1, #2
 8001ef8:	4621      	mov	r1, r4
 8001efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001efe:	4621      	mov	r1, r4
 8001f00:	008a      	lsls	r2, r1, #2
 8001f02:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001f06:	f7fe f9d3 	bl	80002b0 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <LL_USART_SetBaudRate+0x458>)
 8001f10:	fba3 2302 	umull	r2, r3, r3, r2
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	b29c      	uxth	r4, r3
 8001f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f20:	2200      	movs	r2, #0
 8001f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f2a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001f2e:	4642      	mov	r2, r8
 8001f30:	464b      	mov	r3, r9
 8001f32:	1891      	adds	r1, r2, r2
 8001f34:	61b9      	str	r1, [r7, #24]
 8001f36:	415b      	adcs	r3, r3
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	4641      	mov	r1, r8
 8001f40:	1851      	adds	r1, r2, r1
 8001f42:	6139      	str	r1, [r7, #16]
 8001f44:	4649      	mov	r1, r9
 8001f46:	414b      	adcs	r3, r1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f56:	4659      	mov	r1, fp
 8001f58:	00cb      	lsls	r3, r1, #3
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f60:	4651      	mov	r1, sl
 8001f62:	00ca      	lsls	r2, r1, #3
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4642      	mov	r2, r8
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f72:	464b      	mov	r3, r9
 8001f74:	460a      	mov	r2, r1
 8001f76:	eb42 0303 	adc.w	r3, r2, r3
 8001f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001f98:	4649      	mov	r1, r9
 8001f9a:	008b      	lsls	r3, r1, #2
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	008a      	lsls	r2, r1, #2
 8001fa6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001faa:	f7fe f981 	bl	80002b0 <__aeabi_uldivmod>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <LL_USART_SetBaudRate+0x458>)
 8001fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2264      	movs	r2, #100	@ 0x64
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	1acb      	subs	r3, r1, r3
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	3332      	adds	r3, #50	@ 0x32
 8001fc8:	4a36      	ldr	r2, [pc, #216]	@ (80020a4 <LL_USART_SetBaudRate+0x458>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4423      	add	r3, r4
 8001fda:	b29c      	uxth	r4, r3
 8001fdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fe4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fe6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001fea:	4642      	mov	r2, r8
 8001fec:	464b      	mov	r3, r9
 8001fee:	1891      	adds	r1, r2, r2
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	415b      	adcs	r3, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	1851      	adds	r1, r2, r1
 8001ffe:	6039      	str	r1, [r7, #0]
 8002000:	4649      	mov	r1, r9
 8002002:	414b      	adcs	r3, r1
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002012:	4659      	mov	r1, fp
 8002014:	00cb      	lsls	r3, r1, #3
 8002016:	4651      	mov	r1, sl
 8002018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800201c:	4651      	mov	r1, sl
 800201e:	00ca      	lsls	r2, r1, #3
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	4603      	mov	r3, r0
 8002026:	4642      	mov	r2, r8
 8002028:	189b      	adds	r3, r3, r2
 800202a:	673b      	str	r3, [r7, #112]	@ 0x70
 800202c:	464b      	mov	r3, r9
 800202e:	460a      	mov	r2, r1
 8002030:	eb42 0303 	adc.w	r3, r2, r3
 8002034:	677b      	str	r3, [r7, #116]	@ 0x74
 8002036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800203a:	2200      	movs	r2, #0
 800203c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800203e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800204c:	4649      	mov	r1, r9
 800204e:	008b      	lsls	r3, r1, #2
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002056:	4641      	mov	r1, r8
 8002058:	008a      	lsls	r2, r1, #2
 800205a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800205e:	f7fe f927 	bl	80002b0 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <LL_USART_SetBaudRate+0x458>)
 8002068:	fba3 1302 	umull	r1, r3, r3, r2
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	2164      	movs	r1, #100	@ 0x64
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	3332      	adds	r3, #50	@ 0x32
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <LL_USART_SetBaudRate+0x458>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b29b      	uxth	r3, r3
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	b29b      	uxth	r3, r3
 800208a:	4423      	add	r3, r4
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002094:	609a      	str	r2, [r3, #8]
}
 8002096:	bf00      	nop
 8002098:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800209c:	46bd      	mov	sp, r7
 800209e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a2:	bf00      	nop
 80020a4:	51eb851f 	.word	0x51eb851f

080020a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fd8c 	bl	8001bd8 <LL_USART_IsEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15e      	bne.n	8002184 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80020ce:	f023 030c 	bic.w	r3, r3, #12
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6851      	ldr	r1, [r2, #4]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	4311      	orrs	r1, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	6912      	ldr	r2, [r2, #16]
 80020e0:	4311      	orrs	r1, r2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6992      	ldr	r2, [r2, #24]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fd83 	bl	8001c00 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fd90 	bl	8001c26 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc6a 	bl	80019e4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <LL_USART_Init+0xe8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d102      	bne.n	800211e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e021      	b.n	8002162 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <LL_USART_Init+0xec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d102      	bne.n	800212c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e01a      	b.n	8002162 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <LL_USART_Init+0xf0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e013      	b.n	8002162 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <LL_USART_Init+0xf4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d102      	bne.n	8002148 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e00c      	b.n	8002162 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <LL_USART_Init+0xf8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d102      	bne.n	8002156 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e005      	b.n	8002162 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <LL_USART_Init+0xfc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fd64 	bl	8001c4c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002184:	7ffb      	ldrb	r3, [r7, #31]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40011000 	.word	0x40011000
 8002194:	40004400 	.word	0x40004400
 8002198:	40004800 	.word	0x40004800
 800219c:	40011400 	.word	0x40011400
 80021a0:	40004c00 	.word	0x40004c00
 80021a4:	40005000 	.word	0x40005000

080021a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <LL_InitTick+0x30>)
 80021bc:	3b01      	subs	r3, #1
 80021be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <LL_InitTick+0x30>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <LL_InitTick+0x30>)
 80021c8:	2205      	movs	r2, #5
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e010 	.word	0xe000e010

080021dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffdd 	bl	80021a8 <LL_InitTick>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <LL_SetSystemCoreClock+0x1c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000

08002218 <std>:
 8002218:	2300      	movs	r3, #0
 800221a:	b510      	push	{r4, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	e9c0 3300 	strd	r3, r3, [r0]
 8002222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002226:	6083      	str	r3, [r0, #8]
 8002228:	8181      	strh	r1, [r0, #12]
 800222a:	6643      	str	r3, [r0, #100]	@ 0x64
 800222c:	81c2      	strh	r2, [r0, #14]
 800222e:	6183      	str	r3, [r0, #24]
 8002230:	4619      	mov	r1, r3
 8002232:	2208      	movs	r2, #8
 8002234:	305c      	adds	r0, #92	@ 0x5c
 8002236:	f000 fa1b 	bl	8002670 <memset>
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <std+0x58>)
 800223c:	6263      	str	r3, [r4, #36]	@ 0x24
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <std+0x5c>)
 8002240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <std+0x60>)
 8002244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <std+0x64>)
 8002248:	6323      	str	r3, [r4, #48]	@ 0x30
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <std+0x68>)
 800224c:	6224      	str	r4, [r4, #32]
 800224e:	429c      	cmp	r4, r3
 8002250:	d006      	beq.n	8002260 <std+0x48>
 8002252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002256:	4294      	cmp	r4, r2
 8002258:	d002      	beq.n	8002260 <std+0x48>
 800225a:	33d0      	adds	r3, #208	@ 0xd0
 800225c:	429c      	cmp	r4, r3
 800225e:	d105      	bne.n	800226c <std+0x54>
 8002260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002268:	f000 ba7a 	b.w	8002760 <__retarget_lock_init_recursive>
 800226c:	bd10      	pop	{r4, pc}
 800226e:	bf00      	nop
 8002270:	080024c1 	.word	0x080024c1
 8002274:	080024e3 	.word	0x080024e3
 8002278:	0800251b 	.word	0x0800251b
 800227c:	0800253f 	.word	0x0800253f
 8002280:	20000894 	.word	0x20000894

08002284 <stdio_exit_handler>:
 8002284:	4a02      	ldr	r2, [pc, #8]	@ (8002290 <stdio_exit_handler+0xc>)
 8002286:	4903      	ldr	r1, [pc, #12]	@ (8002294 <stdio_exit_handler+0x10>)
 8002288:	4803      	ldr	r0, [pc, #12]	@ (8002298 <stdio_exit_handler+0x14>)
 800228a:	f000 b869 	b.w	8002360 <_fwalk_sglue>
 800228e:	bf00      	nop
 8002290:	20000004 	.word	0x20000004
 8002294:	080032ad 	.word	0x080032ad
 8002298:	20000014 	.word	0x20000014

0800229c <cleanup_stdio>:
 800229c:	6841      	ldr	r1, [r0, #4]
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <cleanup_stdio+0x34>)
 80022a0:	4299      	cmp	r1, r3
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4604      	mov	r4, r0
 80022a6:	d001      	beq.n	80022ac <cleanup_stdio+0x10>
 80022a8:	f001 f800 	bl	80032ac <_fflush_r>
 80022ac:	68a1      	ldr	r1, [r4, #8]
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <cleanup_stdio+0x38>)
 80022b0:	4299      	cmp	r1, r3
 80022b2:	d002      	beq.n	80022ba <cleanup_stdio+0x1e>
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 fff9 	bl	80032ac <_fflush_r>
 80022ba:	68e1      	ldr	r1, [r4, #12]
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <cleanup_stdio+0x3c>)
 80022be:	4299      	cmp	r1, r3
 80022c0:	d004      	beq.n	80022cc <cleanup_stdio+0x30>
 80022c2:	4620      	mov	r0, r4
 80022c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c8:	f000 bff0 	b.w	80032ac <_fflush_r>
 80022cc:	bd10      	pop	{r4, pc}
 80022ce:	bf00      	nop
 80022d0:	20000894 	.word	0x20000894
 80022d4:	200008fc 	.word	0x200008fc
 80022d8:	20000964 	.word	0x20000964

080022dc <global_stdio_init.part.0>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <global_stdio_init.part.0+0x30>)
 80022e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002310 <global_stdio_init.part.0+0x34>)
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <global_stdio_init.part.0+0x38>)
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4620      	mov	r0, r4
 80022e8:	2200      	movs	r2, #0
 80022ea:	2104      	movs	r1, #4
 80022ec:	f7ff ff94 	bl	8002218 <std>
 80022f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022f4:	2201      	movs	r2, #1
 80022f6:	2109      	movs	r1, #9
 80022f8:	f7ff ff8e 	bl	8002218 <std>
 80022fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002300:	2202      	movs	r2, #2
 8002302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002306:	2112      	movs	r1, #18
 8002308:	f7ff bf86 	b.w	8002218 <std>
 800230c:	200009cc 	.word	0x200009cc
 8002310:	20000894 	.word	0x20000894
 8002314:	08002285 	.word	0x08002285

08002318 <__sfp_lock_acquire>:
 8002318:	4801      	ldr	r0, [pc, #4]	@ (8002320 <__sfp_lock_acquire+0x8>)
 800231a:	f000 ba22 	b.w	8002762 <__retarget_lock_acquire_recursive>
 800231e:	bf00      	nop
 8002320:	200009d5 	.word	0x200009d5

08002324 <__sfp_lock_release>:
 8002324:	4801      	ldr	r0, [pc, #4]	@ (800232c <__sfp_lock_release+0x8>)
 8002326:	f000 ba1d 	b.w	8002764 <__retarget_lock_release_recursive>
 800232a:	bf00      	nop
 800232c:	200009d5 	.word	0x200009d5

08002330 <__sinit>:
 8002330:	b510      	push	{r4, lr}
 8002332:	4604      	mov	r4, r0
 8002334:	f7ff fff0 	bl	8002318 <__sfp_lock_acquire>
 8002338:	6a23      	ldr	r3, [r4, #32]
 800233a:	b11b      	cbz	r3, 8002344 <__sinit+0x14>
 800233c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002340:	f7ff bff0 	b.w	8002324 <__sfp_lock_release>
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__sinit+0x28>)
 8002346:	6223      	str	r3, [r4, #32]
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__sinit+0x2c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f5      	bne.n	800233c <__sinit+0xc>
 8002350:	f7ff ffc4 	bl	80022dc <global_stdio_init.part.0>
 8002354:	e7f2      	b.n	800233c <__sinit+0xc>
 8002356:	bf00      	nop
 8002358:	0800229d 	.word	0x0800229d
 800235c:	200009cc 	.word	0x200009cc

08002360 <_fwalk_sglue>:
 8002360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002364:	4607      	mov	r7, r0
 8002366:	4688      	mov	r8, r1
 8002368:	4614      	mov	r4, r2
 800236a:	2600      	movs	r6, #0
 800236c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002370:	f1b9 0901 	subs.w	r9, r9, #1
 8002374:	d505      	bpl.n	8002382 <_fwalk_sglue+0x22>
 8002376:	6824      	ldr	r4, [r4, #0]
 8002378:	2c00      	cmp	r4, #0
 800237a:	d1f7      	bne.n	800236c <_fwalk_sglue+0xc>
 800237c:	4630      	mov	r0, r6
 800237e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002382:	89ab      	ldrh	r3, [r5, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d907      	bls.n	8002398 <_fwalk_sglue+0x38>
 8002388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800238c:	3301      	adds	r3, #1
 800238e:	d003      	beq.n	8002398 <_fwalk_sglue+0x38>
 8002390:	4629      	mov	r1, r5
 8002392:	4638      	mov	r0, r7
 8002394:	47c0      	blx	r8
 8002396:	4306      	orrs	r6, r0
 8002398:	3568      	adds	r5, #104	@ 0x68
 800239a:	e7e9      	b.n	8002370 <_fwalk_sglue+0x10>

0800239c <iprintf>:
 800239c:	b40f      	push	{r0, r1, r2, r3}
 800239e:	b507      	push	{r0, r1, r2, lr}
 80023a0:	4906      	ldr	r1, [pc, #24]	@ (80023bc <iprintf+0x20>)
 80023a2:	ab04      	add	r3, sp, #16
 80023a4:	6808      	ldr	r0, [r1, #0]
 80023a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80023aa:	6881      	ldr	r1, [r0, #8]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	f000 fc55 	bl	8002c5c <_vfiprintf_r>
 80023b2:	b003      	add	sp, #12
 80023b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80023b8:	b004      	add	sp, #16
 80023ba:	4770      	bx	lr
 80023bc:	20000010 	.word	0x20000010

080023c0 <_puts_r>:
 80023c0:	6a03      	ldr	r3, [r0, #32]
 80023c2:	b570      	push	{r4, r5, r6, lr}
 80023c4:	6884      	ldr	r4, [r0, #8]
 80023c6:	4605      	mov	r5, r0
 80023c8:	460e      	mov	r6, r1
 80023ca:	b90b      	cbnz	r3, 80023d0 <_puts_r+0x10>
 80023cc:	f7ff ffb0 	bl	8002330 <__sinit>
 80023d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023d2:	07db      	lsls	r3, r3, #31
 80023d4:	d405      	bmi.n	80023e2 <_puts_r+0x22>
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	0598      	lsls	r0, r3, #22
 80023da:	d402      	bmi.n	80023e2 <_puts_r+0x22>
 80023dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023de:	f000 f9c0 	bl	8002762 <__retarget_lock_acquire_recursive>
 80023e2:	89a3      	ldrh	r3, [r4, #12]
 80023e4:	0719      	lsls	r1, r3, #28
 80023e6:	d502      	bpl.n	80023ee <_puts_r+0x2e>
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d135      	bne.n	800245a <_puts_r+0x9a>
 80023ee:	4621      	mov	r1, r4
 80023f0:	4628      	mov	r0, r5
 80023f2:	f000 f8e7 	bl	80025c4 <__swsetup_r>
 80023f6:	b380      	cbz	r0, 800245a <_puts_r+0x9a>
 80023f8:	f04f 35ff 	mov.w	r5, #4294967295
 80023fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023fe:	07da      	lsls	r2, r3, #31
 8002400:	d405      	bmi.n	800240e <_puts_r+0x4e>
 8002402:	89a3      	ldrh	r3, [r4, #12]
 8002404:	059b      	lsls	r3, r3, #22
 8002406:	d402      	bmi.n	800240e <_puts_r+0x4e>
 8002408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800240a:	f000 f9ab 	bl	8002764 <__retarget_lock_release_recursive>
 800240e:	4628      	mov	r0, r5
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	2b00      	cmp	r3, #0
 8002414:	da04      	bge.n	8002420 <_puts_r+0x60>
 8002416:	69a2      	ldr	r2, [r4, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	dc17      	bgt.n	800244c <_puts_r+0x8c>
 800241c:	290a      	cmp	r1, #10
 800241e:	d015      	beq.n	800244c <_puts_r+0x8c>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	7019      	strb	r1, [r3, #0]
 8002428:	68a3      	ldr	r3, [r4, #8]
 800242a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800242e:	3b01      	subs	r3, #1
 8002430:	60a3      	str	r3, [r4, #8]
 8002432:	2900      	cmp	r1, #0
 8002434:	d1ed      	bne.n	8002412 <_puts_r+0x52>
 8002436:	2b00      	cmp	r3, #0
 8002438:	da11      	bge.n	800245e <_puts_r+0x9e>
 800243a:	4622      	mov	r2, r4
 800243c:	210a      	movs	r1, #10
 800243e:	4628      	mov	r0, r5
 8002440:	f000 f881 	bl	8002546 <__swbuf_r>
 8002444:	3001      	adds	r0, #1
 8002446:	d0d7      	beq.n	80023f8 <_puts_r+0x38>
 8002448:	250a      	movs	r5, #10
 800244a:	e7d7      	b.n	80023fc <_puts_r+0x3c>
 800244c:	4622      	mov	r2, r4
 800244e:	4628      	mov	r0, r5
 8002450:	f000 f879 	bl	8002546 <__swbuf_r>
 8002454:	3001      	adds	r0, #1
 8002456:	d1e7      	bne.n	8002428 <_puts_r+0x68>
 8002458:	e7ce      	b.n	80023f8 <_puts_r+0x38>
 800245a:	3e01      	subs	r6, #1
 800245c:	e7e4      	b.n	8002428 <_puts_r+0x68>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6022      	str	r2, [r4, #0]
 8002464:	220a      	movs	r2, #10
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e7ee      	b.n	8002448 <_puts_r+0x88>
	...

0800246c <puts>:
 800246c:	4b02      	ldr	r3, [pc, #8]	@ (8002478 <puts+0xc>)
 800246e:	4601      	mov	r1, r0
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f7ff bfa5 	b.w	80023c0 <_puts_r>
 8002476:	bf00      	nop
 8002478:	20000010 	.word	0x20000010

0800247c <siprintf>:
 800247c:	b40e      	push	{r1, r2, r3}
 800247e:	b510      	push	{r4, lr}
 8002480:	b09d      	sub	sp, #116	@ 0x74
 8002482:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002484:	9002      	str	r0, [sp, #8]
 8002486:	9006      	str	r0, [sp, #24]
 8002488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800248c:	480a      	ldr	r0, [pc, #40]	@ (80024b8 <siprintf+0x3c>)
 800248e:	9107      	str	r1, [sp, #28]
 8002490:	9104      	str	r1, [sp, #16]
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <siprintf+0x40>)
 8002494:	f853 2b04 	ldr.w	r2, [r3], #4
 8002498:	9105      	str	r1, [sp, #20]
 800249a:	2400      	movs	r4, #0
 800249c:	a902      	add	r1, sp, #8
 800249e:	6800      	ldr	r0, [r0, #0]
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80024a4:	f000 fab4 	bl	8002a10 <_svfiprintf_r>
 80024a8:	9b02      	ldr	r3, [sp, #8]
 80024aa:	701c      	strb	r4, [r3, #0]
 80024ac:	b01d      	add	sp, #116	@ 0x74
 80024ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b2:	b003      	add	sp, #12
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000010 	.word	0x20000010
 80024bc:	ffff0208 	.word	0xffff0208

080024c0 <__sread>:
 80024c0:	b510      	push	{r4, lr}
 80024c2:	460c      	mov	r4, r1
 80024c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c8:	f000 f8fc 	bl	80026c4 <_read_r>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	bfab      	itete	ge
 80024d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80024d2:	89a3      	ldrhlt	r3, [r4, #12]
 80024d4:	181b      	addge	r3, r3, r0
 80024d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80024da:	bfac      	ite	ge
 80024dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80024de:	81a3      	strhlt	r3, [r4, #12]
 80024e0:	bd10      	pop	{r4, pc}

080024e2 <__swrite>:
 80024e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e6:	461f      	mov	r7, r3
 80024e8:	898b      	ldrh	r3, [r1, #12]
 80024ea:	05db      	lsls	r3, r3, #23
 80024ec:	4605      	mov	r5, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	4616      	mov	r6, r2
 80024f2:	d505      	bpl.n	8002500 <__swrite+0x1e>
 80024f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f8:	2302      	movs	r3, #2
 80024fa:	2200      	movs	r2, #0
 80024fc:	f000 f8d0 	bl	80026a0 <_lseek_r>
 8002500:	89a3      	ldrh	r3, [r4, #12]
 8002502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	4632      	mov	r2, r6
 800250e:	463b      	mov	r3, r7
 8002510:	4628      	mov	r0, r5
 8002512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002516:	f000 b8e7 	b.w	80026e8 <_write_r>

0800251a <__sseek>:
 800251a:	b510      	push	{r4, lr}
 800251c:	460c      	mov	r4, r1
 800251e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002522:	f000 f8bd 	bl	80026a0 <_lseek_r>
 8002526:	1c43      	adds	r3, r0, #1
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	bf15      	itete	ne
 800252c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800252e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002536:	81a3      	strheq	r3, [r4, #12]
 8002538:	bf18      	it	ne
 800253a:	81a3      	strhne	r3, [r4, #12]
 800253c:	bd10      	pop	{r4, pc}

0800253e <__sclose>:
 800253e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002542:	f000 b89d 	b.w	8002680 <_close_r>

08002546 <__swbuf_r>:
 8002546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002548:	460e      	mov	r6, r1
 800254a:	4614      	mov	r4, r2
 800254c:	4605      	mov	r5, r0
 800254e:	b118      	cbz	r0, 8002558 <__swbuf_r+0x12>
 8002550:	6a03      	ldr	r3, [r0, #32]
 8002552:	b90b      	cbnz	r3, 8002558 <__swbuf_r+0x12>
 8002554:	f7ff feec 	bl	8002330 <__sinit>
 8002558:	69a3      	ldr	r3, [r4, #24]
 800255a:	60a3      	str	r3, [r4, #8]
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	071a      	lsls	r2, r3, #28
 8002560:	d501      	bpl.n	8002566 <__swbuf_r+0x20>
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	b943      	cbnz	r3, 8002578 <__swbuf_r+0x32>
 8002566:	4621      	mov	r1, r4
 8002568:	4628      	mov	r0, r5
 800256a:	f000 f82b 	bl	80025c4 <__swsetup_r>
 800256e:	b118      	cbz	r0, 8002578 <__swbuf_r+0x32>
 8002570:	f04f 37ff 	mov.w	r7, #4294967295
 8002574:	4638      	mov	r0, r7
 8002576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	6922      	ldr	r2, [r4, #16]
 800257c:	1a98      	subs	r0, r3, r2
 800257e:	6963      	ldr	r3, [r4, #20]
 8002580:	b2f6      	uxtb	r6, r6
 8002582:	4283      	cmp	r3, r0
 8002584:	4637      	mov	r7, r6
 8002586:	dc05      	bgt.n	8002594 <__swbuf_r+0x4e>
 8002588:	4621      	mov	r1, r4
 800258a:	4628      	mov	r0, r5
 800258c:	f000 fe8e 	bl	80032ac <_fflush_r>
 8002590:	2800      	cmp	r0, #0
 8002592:	d1ed      	bne.n	8002570 <__swbuf_r+0x2a>
 8002594:	68a3      	ldr	r3, [r4, #8]
 8002596:	3b01      	subs	r3, #1
 8002598:	60a3      	str	r3, [r4, #8]
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	6022      	str	r2, [r4, #0]
 80025a0:	701e      	strb	r6, [r3, #0]
 80025a2:	6962      	ldr	r2, [r4, #20]
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d004      	beq.n	80025b4 <__swbuf_r+0x6e>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	07db      	lsls	r3, r3, #31
 80025ae:	d5e1      	bpl.n	8002574 <__swbuf_r+0x2e>
 80025b0:	2e0a      	cmp	r6, #10
 80025b2:	d1df      	bne.n	8002574 <__swbuf_r+0x2e>
 80025b4:	4621      	mov	r1, r4
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 fe78 	bl	80032ac <_fflush_r>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d0d9      	beq.n	8002574 <__swbuf_r+0x2e>
 80025c0:	e7d6      	b.n	8002570 <__swbuf_r+0x2a>
	...

080025c4 <__swsetup_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <__swsetup_r+0xa8>)
 80025c8:	4605      	mov	r5, r0
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	460c      	mov	r4, r1
 80025ce:	b118      	cbz	r0, 80025d8 <__swsetup_r+0x14>
 80025d0:	6a03      	ldr	r3, [r0, #32]
 80025d2:	b90b      	cbnz	r3, 80025d8 <__swsetup_r+0x14>
 80025d4:	f7ff feac 	bl	8002330 <__sinit>
 80025d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025dc:	0719      	lsls	r1, r3, #28
 80025de:	d422      	bmi.n	8002626 <__swsetup_r+0x62>
 80025e0:	06da      	lsls	r2, r3, #27
 80025e2:	d407      	bmi.n	80025f4 <__swsetup_r+0x30>
 80025e4:	2209      	movs	r2, #9
 80025e6:	602a      	str	r2, [r5, #0]
 80025e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ec:	81a3      	strh	r3, [r4, #12]
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	e033      	b.n	800265c <__swsetup_r+0x98>
 80025f4:	0758      	lsls	r0, r3, #29
 80025f6:	d512      	bpl.n	800261e <__swsetup_r+0x5a>
 80025f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025fa:	b141      	cbz	r1, 800260e <__swsetup_r+0x4a>
 80025fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002600:	4299      	cmp	r1, r3
 8002602:	d002      	beq.n	800260a <__swsetup_r+0x46>
 8002604:	4628      	mov	r0, r5
 8002606:	f000 f8af 	bl	8002768 <_free_r>
 800260a:	2300      	movs	r3, #0
 800260c:	6363      	str	r3, [r4, #52]	@ 0x34
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002614:	81a3      	strh	r3, [r4, #12]
 8002616:	2300      	movs	r3, #0
 8002618:	6063      	str	r3, [r4, #4]
 800261a:	6923      	ldr	r3, [r4, #16]
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	81a3      	strh	r3, [r4, #12]
 8002626:	6923      	ldr	r3, [r4, #16]
 8002628:	b94b      	cbnz	r3, 800263e <__swsetup_r+0x7a>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002634:	d003      	beq.n	800263e <__swsetup_r+0x7a>
 8002636:	4621      	mov	r1, r4
 8002638:	4628      	mov	r0, r5
 800263a:	f000 fe85 	bl	8003348 <__smakebuf_r>
 800263e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002642:	f013 0201 	ands.w	r2, r3, #1
 8002646:	d00a      	beq.n	800265e <__swsetup_r+0x9a>
 8002648:	2200      	movs	r2, #0
 800264a:	60a2      	str	r2, [r4, #8]
 800264c:	6962      	ldr	r2, [r4, #20]
 800264e:	4252      	negs	r2, r2
 8002650:	61a2      	str	r2, [r4, #24]
 8002652:	6922      	ldr	r2, [r4, #16]
 8002654:	b942      	cbnz	r2, 8002668 <__swsetup_r+0xa4>
 8002656:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800265a:	d1c5      	bne.n	80025e8 <__swsetup_r+0x24>
 800265c:	bd38      	pop	{r3, r4, r5, pc}
 800265e:	0799      	lsls	r1, r3, #30
 8002660:	bf58      	it	pl
 8002662:	6962      	ldrpl	r2, [r4, #20]
 8002664:	60a2      	str	r2, [r4, #8]
 8002666:	e7f4      	b.n	8002652 <__swsetup_r+0x8e>
 8002668:	2000      	movs	r0, #0
 800266a:	e7f7      	b.n	800265c <__swsetup_r+0x98>
 800266c:	20000010 	.word	0x20000010

08002670 <memset>:
 8002670:	4402      	add	r2, r0
 8002672:	4603      	mov	r3, r0
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	f803 1b01 	strb.w	r1, [r3], #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <_close_r>:
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	4d06      	ldr	r5, [pc, #24]	@ (800269c <_close_r+0x1c>)
 8002684:	2300      	movs	r3, #0
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	f7fe fc5f 	bl	8000f4e <_close>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_close_r+0x1a>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_close_r+0x1a>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	200009d0 	.word	0x200009d0

080026a0 <_lseek_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4d07      	ldr	r5, [pc, #28]	@ (80026c0 <_lseek_r+0x20>)
 80026a4:	4604      	mov	r4, r0
 80026a6:	4608      	mov	r0, r1
 80026a8:	4611      	mov	r1, r2
 80026aa:	2200      	movs	r2, #0
 80026ac:	602a      	str	r2, [r5, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7fe fc74 	bl	8000f9c <_lseek>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	d102      	bne.n	80026be <_lseek_r+0x1e>
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	b103      	cbz	r3, 80026be <_lseek_r+0x1e>
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	200009d0 	.word	0x200009d0

080026c4 <_read_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4d07      	ldr	r5, [pc, #28]	@ (80026e4 <_read_r+0x20>)
 80026c8:	4604      	mov	r4, r0
 80026ca:	4608      	mov	r0, r1
 80026cc:	4611      	mov	r1, r2
 80026ce:	2200      	movs	r2, #0
 80026d0:	602a      	str	r2, [r5, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f7fe fc02 	bl	8000edc <_read>
 80026d8:	1c43      	adds	r3, r0, #1
 80026da:	d102      	bne.n	80026e2 <_read_r+0x1e>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	b103      	cbz	r3, 80026e2 <_read_r+0x1e>
 80026e0:	6023      	str	r3, [r4, #0]
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
 80026e4:	200009d0 	.word	0x200009d0

080026e8 <_write_r>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4d07      	ldr	r5, [pc, #28]	@ (8002708 <_write_r+0x20>)
 80026ec:	4604      	mov	r4, r0
 80026ee:	4608      	mov	r0, r1
 80026f0:	4611      	mov	r1, r2
 80026f2:	2200      	movs	r2, #0
 80026f4:	602a      	str	r2, [r5, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7fe fc0d 	bl	8000f16 <_write>
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	d102      	bne.n	8002706 <_write_r+0x1e>
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	b103      	cbz	r3, 8002706 <_write_r+0x1e>
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	bd38      	pop	{r3, r4, r5, pc}
 8002708:	200009d0 	.word	0x200009d0

0800270c <__errno>:
 800270c:	4b01      	ldr	r3, [pc, #4]	@ (8002714 <__errno+0x8>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000010 	.word	0x20000010

08002718 <__libc_init_array>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4d0d      	ldr	r5, [pc, #52]	@ (8002750 <__libc_init_array+0x38>)
 800271c:	4c0d      	ldr	r4, [pc, #52]	@ (8002754 <__libc_init_array+0x3c>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	2600      	movs	r6, #0
 8002724:	42a6      	cmp	r6, r4
 8002726:	d109      	bne.n	800273c <__libc_init_array+0x24>
 8002728:	4d0b      	ldr	r5, [pc, #44]	@ (8002758 <__libc_init_array+0x40>)
 800272a:	4c0c      	ldr	r4, [pc, #48]	@ (800275c <__libc_init_array+0x44>)
 800272c:	f000 fed8 	bl	80034e0 <_init>
 8002730:	1b64      	subs	r4, r4, r5
 8002732:	10a4      	asrs	r4, r4, #2
 8002734:	2600      	movs	r6, #0
 8002736:	42a6      	cmp	r6, r4
 8002738:	d105      	bne.n	8002746 <__libc_init_array+0x2e>
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002740:	4798      	blx	r3
 8002742:	3601      	adds	r6, #1
 8002744:	e7ee      	b.n	8002724 <__libc_init_array+0xc>
 8002746:	f855 3b04 	ldr.w	r3, [r5], #4
 800274a:	4798      	blx	r3
 800274c:	3601      	adds	r6, #1
 800274e:	e7f2      	b.n	8002736 <__libc_init_array+0x1e>
 8002750:	08003590 	.word	0x08003590
 8002754:	08003590 	.word	0x08003590
 8002758:	08003590 	.word	0x08003590
 800275c:	08003594 	.word	0x08003594

08002760 <__retarget_lock_init_recursive>:
 8002760:	4770      	bx	lr

08002762 <__retarget_lock_acquire_recursive>:
 8002762:	4770      	bx	lr

08002764 <__retarget_lock_release_recursive>:
 8002764:	4770      	bx	lr
	...

08002768 <_free_r>:
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	4605      	mov	r5, r0
 800276c:	2900      	cmp	r1, #0
 800276e:	d041      	beq.n	80027f4 <_free_r+0x8c>
 8002770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002774:	1f0c      	subs	r4, r1, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	bfb8      	it	lt
 800277a:	18e4      	addlt	r4, r4, r3
 800277c:	f000 f8e0 	bl	8002940 <__malloc_lock>
 8002780:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <_free_r+0x90>)
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	b933      	cbnz	r3, 8002794 <_free_r+0x2c>
 8002786:	6063      	str	r3, [r4, #4]
 8002788:	6014      	str	r4, [r2, #0]
 800278a:	4628      	mov	r0, r5
 800278c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002790:	f000 b8dc 	b.w	800294c <__malloc_unlock>
 8002794:	42a3      	cmp	r3, r4
 8002796:	d908      	bls.n	80027aa <_free_r+0x42>
 8002798:	6820      	ldr	r0, [r4, #0]
 800279a:	1821      	adds	r1, r4, r0
 800279c:	428b      	cmp	r3, r1
 800279e:	bf01      	itttt	eq
 80027a0:	6819      	ldreq	r1, [r3, #0]
 80027a2:	685b      	ldreq	r3, [r3, #4]
 80027a4:	1809      	addeq	r1, r1, r0
 80027a6:	6021      	streq	r1, [r4, #0]
 80027a8:	e7ed      	b.n	8002786 <_free_r+0x1e>
 80027aa:	461a      	mov	r2, r3
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b10b      	cbz	r3, 80027b4 <_free_r+0x4c>
 80027b0:	42a3      	cmp	r3, r4
 80027b2:	d9fa      	bls.n	80027aa <_free_r+0x42>
 80027b4:	6811      	ldr	r1, [r2, #0]
 80027b6:	1850      	adds	r0, r2, r1
 80027b8:	42a0      	cmp	r0, r4
 80027ba:	d10b      	bne.n	80027d4 <_free_r+0x6c>
 80027bc:	6820      	ldr	r0, [r4, #0]
 80027be:	4401      	add	r1, r0
 80027c0:	1850      	adds	r0, r2, r1
 80027c2:	4283      	cmp	r3, r0
 80027c4:	6011      	str	r1, [r2, #0]
 80027c6:	d1e0      	bne.n	800278a <_free_r+0x22>
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	6053      	str	r3, [r2, #4]
 80027ce:	4408      	add	r0, r1
 80027d0:	6010      	str	r0, [r2, #0]
 80027d2:	e7da      	b.n	800278a <_free_r+0x22>
 80027d4:	d902      	bls.n	80027dc <_free_r+0x74>
 80027d6:	230c      	movs	r3, #12
 80027d8:	602b      	str	r3, [r5, #0]
 80027da:	e7d6      	b.n	800278a <_free_r+0x22>
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	1821      	adds	r1, r4, r0
 80027e0:	428b      	cmp	r3, r1
 80027e2:	bf04      	itt	eq
 80027e4:	6819      	ldreq	r1, [r3, #0]
 80027e6:	685b      	ldreq	r3, [r3, #4]
 80027e8:	6063      	str	r3, [r4, #4]
 80027ea:	bf04      	itt	eq
 80027ec:	1809      	addeq	r1, r1, r0
 80027ee:	6021      	streq	r1, [r4, #0]
 80027f0:	6054      	str	r4, [r2, #4]
 80027f2:	e7ca      	b.n	800278a <_free_r+0x22>
 80027f4:	bd38      	pop	{r3, r4, r5, pc}
 80027f6:	bf00      	nop
 80027f8:	200009dc 	.word	0x200009dc

080027fc <sbrk_aligned>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4e0f      	ldr	r6, [pc, #60]	@ (800283c <sbrk_aligned+0x40>)
 8002800:	460c      	mov	r4, r1
 8002802:	6831      	ldr	r1, [r6, #0]
 8002804:	4605      	mov	r5, r0
 8002806:	b911      	cbnz	r1, 800280e <sbrk_aligned+0x12>
 8002808:	f000 fe16 	bl	8003438 <_sbrk_r>
 800280c:	6030      	str	r0, [r6, #0]
 800280e:	4621      	mov	r1, r4
 8002810:	4628      	mov	r0, r5
 8002812:	f000 fe11 	bl	8003438 <_sbrk_r>
 8002816:	1c43      	adds	r3, r0, #1
 8002818:	d103      	bne.n	8002822 <sbrk_aligned+0x26>
 800281a:	f04f 34ff 	mov.w	r4, #4294967295
 800281e:	4620      	mov	r0, r4
 8002820:	bd70      	pop	{r4, r5, r6, pc}
 8002822:	1cc4      	adds	r4, r0, #3
 8002824:	f024 0403 	bic.w	r4, r4, #3
 8002828:	42a0      	cmp	r0, r4
 800282a:	d0f8      	beq.n	800281e <sbrk_aligned+0x22>
 800282c:	1a21      	subs	r1, r4, r0
 800282e:	4628      	mov	r0, r5
 8002830:	f000 fe02 	bl	8003438 <_sbrk_r>
 8002834:	3001      	adds	r0, #1
 8002836:	d1f2      	bne.n	800281e <sbrk_aligned+0x22>
 8002838:	e7ef      	b.n	800281a <sbrk_aligned+0x1e>
 800283a:	bf00      	nop
 800283c:	200009d8 	.word	0x200009d8

08002840 <_malloc_r>:
 8002840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002844:	1ccd      	adds	r5, r1, #3
 8002846:	f025 0503 	bic.w	r5, r5, #3
 800284a:	3508      	adds	r5, #8
 800284c:	2d0c      	cmp	r5, #12
 800284e:	bf38      	it	cc
 8002850:	250c      	movcc	r5, #12
 8002852:	2d00      	cmp	r5, #0
 8002854:	4606      	mov	r6, r0
 8002856:	db01      	blt.n	800285c <_malloc_r+0x1c>
 8002858:	42a9      	cmp	r1, r5
 800285a:	d904      	bls.n	8002866 <_malloc_r+0x26>
 800285c:	230c      	movs	r3, #12
 800285e:	6033      	str	r3, [r6, #0]
 8002860:	2000      	movs	r0, #0
 8002862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800293c <_malloc_r+0xfc>
 800286a:	f000 f869 	bl	8002940 <__malloc_lock>
 800286e:	f8d8 3000 	ldr.w	r3, [r8]
 8002872:	461c      	mov	r4, r3
 8002874:	bb44      	cbnz	r4, 80028c8 <_malloc_r+0x88>
 8002876:	4629      	mov	r1, r5
 8002878:	4630      	mov	r0, r6
 800287a:	f7ff ffbf 	bl	80027fc <sbrk_aligned>
 800287e:	1c43      	adds	r3, r0, #1
 8002880:	4604      	mov	r4, r0
 8002882:	d158      	bne.n	8002936 <_malloc_r+0xf6>
 8002884:	f8d8 4000 	ldr.w	r4, [r8]
 8002888:	4627      	mov	r7, r4
 800288a:	2f00      	cmp	r7, #0
 800288c:	d143      	bne.n	8002916 <_malloc_r+0xd6>
 800288e:	2c00      	cmp	r4, #0
 8002890:	d04b      	beq.n	800292a <_malloc_r+0xea>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	4639      	mov	r1, r7
 8002896:	4630      	mov	r0, r6
 8002898:	eb04 0903 	add.w	r9, r4, r3
 800289c:	f000 fdcc 	bl	8003438 <_sbrk_r>
 80028a0:	4581      	cmp	r9, r0
 80028a2:	d142      	bne.n	800292a <_malloc_r+0xea>
 80028a4:	6821      	ldr	r1, [r4, #0]
 80028a6:	1a6d      	subs	r5, r5, r1
 80028a8:	4629      	mov	r1, r5
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7ff ffa6 	bl	80027fc <sbrk_aligned>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d03a      	beq.n	800292a <_malloc_r+0xea>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	442b      	add	r3, r5
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	f8d8 3000 	ldr.w	r3, [r8]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	bb62      	cbnz	r2, 800291c <_malloc_r+0xdc>
 80028c2:	f8c8 7000 	str.w	r7, [r8]
 80028c6:	e00f      	b.n	80028e8 <_malloc_r+0xa8>
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	1b52      	subs	r2, r2, r5
 80028cc:	d420      	bmi.n	8002910 <_malloc_r+0xd0>
 80028ce:	2a0b      	cmp	r2, #11
 80028d0:	d917      	bls.n	8002902 <_malloc_r+0xc2>
 80028d2:	1961      	adds	r1, r4, r5
 80028d4:	42a3      	cmp	r3, r4
 80028d6:	6025      	str	r5, [r4, #0]
 80028d8:	bf18      	it	ne
 80028da:	6059      	strne	r1, [r3, #4]
 80028dc:	6863      	ldr	r3, [r4, #4]
 80028de:	bf08      	it	eq
 80028e0:	f8c8 1000 	streq.w	r1, [r8]
 80028e4:	5162      	str	r2, [r4, r5]
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	4630      	mov	r0, r6
 80028ea:	f000 f82f 	bl	800294c <__malloc_unlock>
 80028ee:	f104 000b 	add.w	r0, r4, #11
 80028f2:	1d23      	adds	r3, r4, #4
 80028f4:	f020 0007 	bic.w	r0, r0, #7
 80028f8:	1ac2      	subs	r2, r0, r3
 80028fa:	bf1c      	itt	ne
 80028fc:	1a1b      	subne	r3, r3, r0
 80028fe:	50a3      	strne	r3, [r4, r2]
 8002900:	e7af      	b.n	8002862 <_malloc_r+0x22>
 8002902:	6862      	ldr	r2, [r4, #4]
 8002904:	42a3      	cmp	r3, r4
 8002906:	bf0c      	ite	eq
 8002908:	f8c8 2000 	streq.w	r2, [r8]
 800290c:	605a      	strne	r2, [r3, #4]
 800290e:	e7eb      	b.n	80028e8 <_malloc_r+0xa8>
 8002910:	4623      	mov	r3, r4
 8002912:	6864      	ldr	r4, [r4, #4]
 8002914:	e7ae      	b.n	8002874 <_malloc_r+0x34>
 8002916:	463c      	mov	r4, r7
 8002918:	687f      	ldr	r7, [r7, #4]
 800291a:	e7b6      	b.n	800288a <_malloc_r+0x4a>
 800291c:	461a      	mov	r2, r3
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	42a3      	cmp	r3, r4
 8002922:	d1fb      	bne.n	800291c <_malloc_r+0xdc>
 8002924:	2300      	movs	r3, #0
 8002926:	6053      	str	r3, [r2, #4]
 8002928:	e7de      	b.n	80028e8 <_malloc_r+0xa8>
 800292a:	230c      	movs	r3, #12
 800292c:	6033      	str	r3, [r6, #0]
 800292e:	4630      	mov	r0, r6
 8002930:	f000 f80c 	bl	800294c <__malloc_unlock>
 8002934:	e794      	b.n	8002860 <_malloc_r+0x20>
 8002936:	6005      	str	r5, [r0, #0]
 8002938:	e7d6      	b.n	80028e8 <_malloc_r+0xa8>
 800293a:	bf00      	nop
 800293c:	200009dc 	.word	0x200009dc

08002940 <__malloc_lock>:
 8002940:	4801      	ldr	r0, [pc, #4]	@ (8002948 <__malloc_lock+0x8>)
 8002942:	f7ff bf0e 	b.w	8002762 <__retarget_lock_acquire_recursive>
 8002946:	bf00      	nop
 8002948:	200009d4 	.word	0x200009d4

0800294c <__malloc_unlock>:
 800294c:	4801      	ldr	r0, [pc, #4]	@ (8002954 <__malloc_unlock+0x8>)
 800294e:	f7ff bf09 	b.w	8002764 <__retarget_lock_release_recursive>
 8002952:	bf00      	nop
 8002954:	200009d4 	.word	0x200009d4

08002958 <__ssputs_r>:
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	688e      	ldr	r6, [r1, #8]
 800295e:	461f      	mov	r7, r3
 8002960:	42be      	cmp	r6, r7
 8002962:	680b      	ldr	r3, [r1, #0]
 8002964:	4682      	mov	sl, r0
 8002966:	460c      	mov	r4, r1
 8002968:	4690      	mov	r8, r2
 800296a:	d82d      	bhi.n	80029c8 <__ssputs_r+0x70>
 800296c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002970:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002974:	d026      	beq.n	80029c4 <__ssputs_r+0x6c>
 8002976:	6965      	ldr	r5, [r4, #20]
 8002978:	6909      	ldr	r1, [r1, #16]
 800297a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800297e:	eba3 0901 	sub.w	r9, r3, r1
 8002982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002986:	1c7b      	adds	r3, r7, #1
 8002988:	444b      	add	r3, r9
 800298a:	106d      	asrs	r5, r5, #1
 800298c:	429d      	cmp	r5, r3
 800298e:	bf38      	it	cc
 8002990:	461d      	movcc	r5, r3
 8002992:	0553      	lsls	r3, r2, #21
 8002994:	d527      	bpl.n	80029e6 <__ssputs_r+0x8e>
 8002996:	4629      	mov	r1, r5
 8002998:	f7ff ff52 	bl	8002840 <_malloc_r>
 800299c:	4606      	mov	r6, r0
 800299e:	b360      	cbz	r0, 80029fa <__ssputs_r+0xa2>
 80029a0:	6921      	ldr	r1, [r4, #16]
 80029a2:	464a      	mov	r2, r9
 80029a4:	f000 fd58 	bl	8003458 <memcpy>
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b2:	81a3      	strh	r3, [r4, #12]
 80029b4:	6126      	str	r6, [r4, #16]
 80029b6:	6165      	str	r5, [r4, #20]
 80029b8:	444e      	add	r6, r9
 80029ba:	eba5 0509 	sub.w	r5, r5, r9
 80029be:	6026      	str	r6, [r4, #0]
 80029c0:	60a5      	str	r5, [r4, #8]
 80029c2:	463e      	mov	r6, r7
 80029c4:	42be      	cmp	r6, r7
 80029c6:	d900      	bls.n	80029ca <__ssputs_r+0x72>
 80029c8:	463e      	mov	r6, r7
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	4632      	mov	r2, r6
 80029ce:	4641      	mov	r1, r8
 80029d0:	f000 fcf6 	bl	80033c0 <memmove>
 80029d4:	68a3      	ldr	r3, [r4, #8]
 80029d6:	1b9b      	subs	r3, r3, r6
 80029d8:	60a3      	str	r3, [r4, #8]
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	4433      	add	r3, r6
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	2000      	movs	r0, #0
 80029e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e6:	462a      	mov	r2, r5
 80029e8:	f000 fd44 	bl	8003474 <_realloc_r>
 80029ec:	4606      	mov	r6, r0
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d1e0      	bne.n	80029b4 <__ssputs_r+0x5c>
 80029f2:	6921      	ldr	r1, [r4, #16]
 80029f4:	4650      	mov	r0, sl
 80029f6:	f7ff feb7 	bl	8002768 <_free_r>
 80029fa:	230c      	movs	r3, #12
 80029fc:	f8ca 3000 	str.w	r3, [sl]
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a06:	81a3      	strh	r3, [r4, #12]
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	e7e9      	b.n	80029e2 <__ssputs_r+0x8a>
	...

08002a10 <_svfiprintf_r>:
 8002a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	4698      	mov	r8, r3
 8002a16:	898b      	ldrh	r3, [r1, #12]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	b09d      	sub	sp, #116	@ 0x74
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	d510      	bpl.n	8002a46 <_svfiprintf_r+0x36>
 8002a24:	690b      	ldr	r3, [r1, #16]
 8002a26:	b973      	cbnz	r3, 8002a46 <_svfiprintf_r+0x36>
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	f7ff ff09 	bl	8002840 <_malloc_r>
 8002a2e:	6028      	str	r0, [r5, #0]
 8002a30:	6128      	str	r0, [r5, #16]
 8002a32:	b930      	cbnz	r0, 8002a42 <_svfiprintf_r+0x32>
 8002a34:	230c      	movs	r3, #12
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	b01d      	add	sp, #116	@ 0x74
 8002a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a42:	2340      	movs	r3, #64	@ 0x40
 8002a44:	616b      	str	r3, [r5, #20]
 8002a46:	2300      	movs	r3, #0
 8002a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a54:	2330      	movs	r3, #48	@ 0x30
 8002a56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002bf4 <_svfiprintf_r+0x1e4>
 8002a5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a5e:	f04f 0901 	mov.w	r9, #1
 8002a62:	4623      	mov	r3, r4
 8002a64:	469a      	mov	sl, r3
 8002a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a6a:	b10a      	cbz	r2, 8002a70 <_svfiprintf_r+0x60>
 8002a6c:	2a25      	cmp	r2, #37	@ 0x25
 8002a6e:	d1f9      	bne.n	8002a64 <_svfiprintf_r+0x54>
 8002a70:	ebba 0b04 	subs.w	fp, sl, r4
 8002a74:	d00b      	beq.n	8002a8e <_svfiprintf_r+0x7e>
 8002a76:	465b      	mov	r3, fp
 8002a78:	4622      	mov	r2, r4
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4638      	mov	r0, r7
 8002a7e:	f7ff ff6b 	bl	8002958 <__ssputs_r>
 8002a82:	3001      	adds	r0, #1
 8002a84:	f000 80a7 	beq.w	8002bd6 <_svfiprintf_r+0x1c6>
 8002a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a8a:	445a      	add	r2, fp
 8002a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 809f 	beq.w	8002bd6 <_svfiprintf_r+0x1c6>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa2:	f10a 0a01 	add.w	sl, sl, #1
 8002aa6:	9304      	str	r3, [sp, #16]
 8002aa8:	9307      	str	r3, [sp, #28]
 8002aaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ab0:	4654      	mov	r4, sl
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab8:	484e      	ldr	r0, [pc, #312]	@ (8002bf4 <_svfiprintf_r+0x1e4>)
 8002aba:	f7fd fba9 	bl	8000210 <memchr>
 8002abe:	9a04      	ldr	r2, [sp, #16]
 8002ac0:	b9d8      	cbnz	r0, 8002afa <_svfiprintf_r+0xea>
 8002ac2:	06d0      	lsls	r0, r2, #27
 8002ac4:	bf44      	itt	mi
 8002ac6:	2320      	movmi	r3, #32
 8002ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002acc:	0711      	lsls	r1, r2, #28
 8002ace:	bf44      	itt	mi
 8002ad0:	232b      	movmi	r3, #43	@ 0x2b
 8002ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8002ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8002adc:	d015      	beq.n	8002b0a <_svfiprintf_r+0xfa>
 8002ade:	9a07      	ldr	r2, [sp, #28]
 8002ae0:	4654      	mov	r4, sl
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f04f 0c0a 	mov.w	ip, #10
 8002ae8:	4621      	mov	r1, r4
 8002aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aee:	3b30      	subs	r3, #48	@ 0x30
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d94b      	bls.n	8002b8c <_svfiprintf_r+0x17c>
 8002af4:	b1b0      	cbz	r0, 8002b24 <_svfiprintf_r+0x114>
 8002af6:	9207      	str	r2, [sp, #28]
 8002af8:	e014      	b.n	8002b24 <_svfiprintf_r+0x114>
 8002afa:	eba0 0308 	sub.w	r3, r0, r8
 8002afe:	fa09 f303 	lsl.w	r3, r9, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	9304      	str	r3, [sp, #16]
 8002b06:	46a2      	mov	sl, r4
 8002b08:	e7d2      	b.n	8002ab0 <_svfiprintf_r+0xa0>
 8002b0a:	9b03      	ldr	r3, [sp, #12]
 8002b0c:	1d19      	adds	r1, r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	9103      	str	r1, [sp, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bfbb      	ittet	lt
 8002b16:	425b      	neglt	r3, r3
 8002b18:	f042 0202 	orrlt.w	r2, r2, #2
 8002b1c:	9307      	strge	r3, [sp, #28]
 8002b1e:	9307      	strlt	r3, [sp, #28]
 8002b20:	bfb8      	it	lt
 8002b22:	9204      	strlt	r2, [sp, #16]
 8002b24:	7823      	ldrb	r3, [r4, #0]
 8002b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b28:	d10a      	bne.n	8002b40 <_svfiprintf_r+0x130>
 8002b2a:	7863      	ldrb	r3, [r4, #1]
 8002b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b2e:	d132      	bne.n	8002b96 <_svfiprintf_r+0x186>
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	1d1a      	adds	r2, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	9203      	str	r2, [sp, #12]
 8002b38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b3c:	3402      	adds	r4, #2
 8002b3e:	9305      	str	r3, [sp, #20]
 8002b40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002c04 <_svfiprintf_r+0x1f4>
 8002b44:	7821      	ldrb	r1, [r4, #0]
 8002b46:	2203      	movs	r2, #3
 8002b48:	4650      	mov	r0, sl
 8002b4a:	f7fd fb61 	bl	8000210 <memchr>
 8002b4e:	b138      	cbz	r0, 8002b60 <_svfiprintf_r+0x150>
 8002b50:	9b04      	ldr	r3, [sp, #16]
 8002b52:	eba0 000a 	sub.w	r0, r0, sl
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	4082      	lsls	r2, r0
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	3401      	adds	r4, #1
 8002b5e:	9304      	str	r3, [sp, #16]
 8002b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b64:	4824      	ldr	r0, [pc, #144]	@ (8002bf8 <_svfiprintf_r+0x1e8>)
 8002b66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b6a:	2206      	movs	r2, #6
 8002b6c:	f7fd fb50 	bl	8000210 <memchr>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d036      	beq.n	8002be2 <_svfiprintf_r+0x1d2>
 8002b74:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <_svfiprintf_r+0x1ec>)
 8002b76:	bb1b      	cbnz	r3, 8002bc0 <_svfiprintf_r+0x1b0>
 8002b78:	9b03      	ldr	r3, [sp, #12]
 8002b7a:	3307      	adds	r3, #7
 8002b7c:	f023 0307 	bic.w	r3, r3, #7
 8002b80:	3308      	adds	r3, #8
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b86:	4433      	add	r3, r6
 8002b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b8a:	e76a      	b.n	8002a62 <_svfiprintf_r+0x52>
 8002b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b90:	460c      	mov	r4, r1
 8002b92:	2001      	movs	r0, #1
 8002b94:	e7a8      	b.n	8002ae8 <_svfiprintf_r+0xd8>
 8002b96:	2300      	movs	r3, #0
 8002b98:	3401      	adds	r4, #1
 8002b9a:	9305      	str	r3, [sp, #20]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 0c0a 	mov.w	ip, #10
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ba8:	3a30      	subs	r2, #48	@ 0x30
 8002baa:	2a09      	cmp	r2, #9
 8002bac:	d903      	bls.n	8002bb6 <_svfiprintf_r+0x1a6>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0c6      	beq.n	8002b40 <_svfiprintf_r+0x130>
 8002bb2:	9105      	str	r1, [sp, #20]
 8002bb4:	e7c4      	b.n	8002b40 <_svfiprintf_r+0x130>
 8002bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bba:	4604      	mov	r4, r0
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e7f0      	b.n	8002ba2 <_svfiprintf_r+0x192>
 8002bc0:	ab03      	add	r3, sp, #12
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <_svfiprintf_r+0x1f0>)
 8002bc8:	a904      	add	r1, sp, #16
 8002bca:	4638      	mov	r0, r7
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	1c42      	adds	r2, r0, #1
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	d1d6      	bne.n	8002b84 <_svfiprintf_r+0x174>
 8002bd6:	89ab      	ldrh	r3, [r5, #12]
 8002bd8:	065b      	lsls	r3, r3, #25
 8002bda:	f53f af2d 	bmi.w	8002a38 <_svfiprintf_r+0x28>
 8002bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002be0:	e72c      	b.n	8002a3c <_svfiprintf_r+0x2c>
 8002be2:	ab03      	add	r3, sp, #12
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	462a      	mov	r2, r5
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <_svfiprintf_r+0x1f0>)
 8002bea:	a904      	add	r1, sp, #16
 8002bec:	4638      	mov	r0, r7
 8002bee:	f000 f9bb 	bl	8002f68 <_printf_i>
 8002bf2:	e7ed      	b.n	8002bd0 <_svfiprintf_r+0x1c0>
 8002bf4:	08003554 	.word	0x08003554
 8002bf8:	0800355e 	.word	0x0800355e
 8002bfc:	00000000 	.word	0x00000000
 8002c00:	08002959 	.word	0x08002959
 8002c04:	0800355a 	.word	0x0800355a

08002c08 <__sfputc_r>:
 8002c08:	6893      	ldr	r3, [r2, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	b410      	push	{r4}
 8002c10:	6093      	str	r3, [r2, #8]
 8002c12:	da08      	bge.n	8002c26 <__sfputc_r+0x1e>
 8002c14:	6994      	ldr	r4, [r2, #24]
 8002c16:	42a3      	cmp	r3, r4
 8002c18:	db01      	blt.n	8002c1e <__sfputc_r+0x16>
 8002c1a:	290a      	cmp	r1, #10
 8002c1c:	d103      	bne.n	8002c26 <__sfputc_r+0x1e>
 8002c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c22:	f7ff bc90 	b.w	8002546 <__swbuf_r>
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	1c58      	adds	r0, r3, #1
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	7019      	strb	r1, [r3, #0]
 8002c2e:	4608      	mov	r0, r1
 8002c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <__sfputs_r>:
 8002c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c38:	4606      	mov	r6, r0
 8002c3a:	460f      	mov	r7, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	18d5      	adds	r5, r2, r3
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	d101      	bne.n	8002c48 <__sfputs_r+0x12>
 8002c44:	2000      	movs	r0, #0
 8002c46:	e007      	b.n	8002c58 <__sfputs_r+0x22>
 8002c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c4c:	463a      	mov	r2, r7
 8002c4e:	4630      	mov	r0, r6
 8002c50:	f7ff ffda 	bl	8002c08 <__sfputc_r>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	d1f3      	bne.n	8002c40 <__sfputs_r+0xa>
 8002c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c5c <_vfiprintf_r>:
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	460d      	mov	r5, r1
 8002c62:	b09d      	sub	sp, #116	@ 0x74
 8002c64:	4614      	mov	r4, r2
 8002c66:	4698      	mov	r8, r3
 8002c68:	4606      	mov	r6, r0
 8002c6a:	b118      	cbz	r0, 8002c74 <_vfiprintf_r+0x18>
 8002c6c:	6a03      	ldr	r3, [r0, #32]
 8002c6e:	b90b      	cbnz	r3, 8002c74 <_vfiprintf_r+0x18>
 8002c70:	f7ff fb5e 	bl	8002330 <__sinit>
 8002c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c76:	07d9      	lsls	r1, r3, #31
 8002c78:	d405      	bmi.n	8002c86 <_vfiprintf_r+0x2a>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	059a      	lsls	r2, r3, #22
 8002c7e:	d402      	bmi.n	8002c86 <_vfiprintf_r+0x2a>
 8002c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c82:	f7ff fd6e 	bl	8002762 <__retarget_lock_acquire_recursive>
 8002c86:	89ab      	ldrh	r3, [r5, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	d501      	bpl.n	8002c90 <_vfiprintf_r+0x34>
 8002c8c:	692b      	ldr	r3, [r5, #16]
 8002c8e:	b99b      	cbnz	r3, 8002cb8 <_vfiprintf_r+0x5c>
 8002c90:	4629      	mov	r1, r5
 8002c92:	4630      	mov	r0, r6
 8002c94:	f7ff fc96 	bl	80025c4 <__swsetup_r>
 8002c98:	b170      	cbz	r0, 8002cb8 <_vfiprintf_r+0x5c>
 8002c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c9c:	07dc      	lsls	r4, r3, #31
 8002c9e:	d504      	bpl.n	8002caa <_vfiprintf_r+0x4e>
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	b01d      	add	sp, #116	@ 0x74
 8002ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002caa:	89ab      	ldrh	r3, [r5, #12]
 8002cac:	0598      	lsls	r0, r3, #22
 8002cae:	d4f7      	bmi.n	8002ca0 <_vfiprintf_r+0x44>
 8002cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cb2:	f7ff fd57 	bl	8002764 <__retarget_lock_release_recursive>
 8002cb6:	e7f3      	b.n	8002ca0 <_vfiprintf_r+0x44>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cc6:	2330      	movs	r3, #48	@ 0x30
 8002cc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e78 <_vfiprintf_r+0x21c>
 8002ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cd0:	f04f 0901 	mov.w	r9, #1
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cdc:	b10a      	cbz	r2, 8002ce2 <_vfiprintf_r+0x86>
 8002cde:	2a25      	cmp	r2, #37	@ 0x25
 8002ce0:	d1f9      	bne.n	8002cd6 <_vfiprintf_r+0x7a>
 8002ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ce6:	d00b      	beq.n	8002d00 <_vfiprintf_r+0xa4>
 8002ce8:	465b      	mov	r3, fp
 8002cea:	4622      	mov	r2, r4
 8002cec:	4629      	mov	r1, r5
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f7ff ffa1 	bl	8002c36 <__sfputs_r>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	f000 80a7 	beq.w	8002e48 <_vfiprintf_r+0x1ec>
 8002cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cfc:	445a      	add	r2, fp
 8002cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d00:	f89a 3000 	ldrb.w	r3, [sl]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 809f 	beq.w	8002e48 <_vfiprintf_r+0x1ec>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d14:	f10a 0a01 	add.w	sl, sl, #1
 8002d18:	9304      	str	r3, [sp, #16]
 8002d1a:	9307      	str	r3, [sp, #28]
 8002d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d22:	4654      	mov	r4, sl
 8002d24:	2205      	movs	r2, #5
 8002d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2a:	4853      	ldr	r0, [pc, #332]	@ (8002e78 <_vfiprintf_r+0x21c>)
 8002d2c:	f7fd fa70 	bl	8000210 <memchr>
 8002d30:	9a04      	ldr	r2, [sp, #16]
 8002d32:	b9d8      	cbnz	r0, 8002d6c <_vfiprintf_r+0x110>
 8002d34:	06d1      	lsls	r1, r2, #27
 8002d36:	bf44      	itt	mi
 8002d38:	2320      	movmi	r3, #32
 8002d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d3e:	0713      	lsls	r3, r2, #28
 8002d40:	bf44      	itt	mi
 8002d42:	232b      	movmi	r3, #43	@ 0x2b
 8002d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d48:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d4e:	d015      	beq.n	8002d7c <_vfiprintf_r+0x120>
 8002d50:	9a07      	ldr	r2, [sp, #28]
 8002d52:	4654      	mov	r4, sl
 8002d54:	2000      	movs	r0, #0
 8002d56:	f04f 0c0a 	mov.w	ip, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d60:	3b30      	subs	r3, #48	@ 0x30
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	d94b      	bls.n	8002dfe <_vfiprintf_r+0x1a2>
 8002d66:	b1b0      	cbz	r0, 8002d96 <_vfiprintf_r+0x13a>
 8002d68:	9207      	str	r2, [sp, #28]
 8002d6a:	e014      	b.n	8002d96 <_vfiprintf_r+0x13a>
 8002d6c:	eba0 0308 	sub.w	r3, r0, r8
 8002d70:	fa09 f303 	lsl.w	r3, r9, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	9304      	str	r3, [sp, #16]
 8002d78:	46a2      	mov	sl, r4
 8002d7a:	e7d2      	b.n	8002d22 <_vfiprintf_r+0xc6>
 8002d7c:	9b03      	ldr	r3, [sp, #12]
 8002d7e:	1d19      	adds	r1, r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	9103      	str	r1, [sp, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfbb      	ittet	lt
 8002d88:	425b      	neglt	r3, r3
 8002d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d8e:	9307      	strge	r3, [sp, #28]
 8002d90:	9307      	strlt	r3, [sp, #28]
 8002d92:	bfb8      	it	lt
 8002d94:	9204      	strlt	r2, [sp, #16]
 8002d96:	7823      	ldrb	r3, [r4, #0]
 8002d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d9a:	d10a      	bne.n	8002db2 <_vfiprintf_r+0x156>
 8002d9c:	7863      	ldrb	r3, [r4, #1]
 8002d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002da0:	d132      	bne.n	8002e08 <_vfiprintf_r+0x1ac>
 8002da2:	9b03      	ldr	r3, [sp, #12]
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	9203      	str	r2, [sp, #12]
 8002daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dae:	3402      	adds	r4, #2
 8002db0:	9305      	str	r3, [sp, #20]
 8002db2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e88 <_vfiprintf_r+0x22c>
 8002db6:	7821      	ldrb	r1, [r4, #0]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4650      	mov	r0, sl
 8002dbc:	f7fd fa28 	bl	8000210 <memchr>
 8002dc0:	b138      	cbz	r0, 8002dd2 <_vfiprintf_r+0x176>
 8002dc2:	9b04      	ldr	r3, [sp, #16]
 8002dc4:	eba0 000a 	sub.w	r0, r0, sl
 8002dc8:	2240      	movs	r2, #64	@ 0x40
 8002dca:	4082      	lsls	r2, r0
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	3401      	adds	r4, #1
 8002dd0:	9304      	str	r3, [sp, #16]
 8002dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd6:	4829      	ldr	r0, [pc, #164]	@ (8002e7c <_vfiprintf_r+0x220>)
 8002dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ddc:	2206      	movs	r2, #6
 8002dde:	f7fd fa17 	bl	8000210 <memchr>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d03f      	beq.n	8002e66 <_vfiprintf_r+0x20a>
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <_vfiprintf_r+0x224>)
 8002de8:	bb1b      	cbnz	r3, 8002e32 <_vfiprintf_r+0x1d6>
 8002dea:	9b03      	ldr	r3, [sp, #12]
 8002dec:	3307      	adds	r3, #7
 8002dee:	f023 0307 	bic.w	r3, r3, #7
 8002df2:	3308      	adds	r3, #8
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002df8:	443b      	add	r3, r7
 8002dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dfc:	e76a      	b.n	8002cd4 <_vfiprintf_r+0x78>
 8002dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e02:	460c      	mov	r4, r1
 8002e04:	2001      	movs	r0, #1
 8002e06:	e7a8      	b.n	8002d5a <_vfiprintf_r+0xfe>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	3401      	adds	r4, #1
 8002e0c:	9305      	str	r3, [sp, #20]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0c0a 	mov.w	ip, #10
 8002e14:	4620      	mov	r0, r4
 8002e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e1a:	3a30      	subs	r2, #48	@ 0x30
 8002e1c:	2a09      	cmp	r2, #9
 8002e1e:	d903      	bls.n	8002e28 <_vfiprintf_r+0x1cc>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0c6      	beq.n	8002db2 <_vfiprintf_r+0x156>
 8002e24:	9105      	str	r1, [sp, #20]
 8002e26:	e7c4      	b.n	8002db2 <_vfiprintf_r+0x156>
 8002e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e7f0      	b.n	8002e14 <_vfiprintf_r+0x1b8>
 8002e32:	ab03      	add	r3, sp, #12
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	462a      	mov	r2, r5
 8002e38:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <_vfiprintf_r+0x228>)
 8002e3a:	a904      	add	r1, sp, #16
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f3af 8000 	nop.w
 8002e42:	4607      	mov	r7, r0
 8002e44:	1c78      	adds	r0, r7, #1
 8002e46:	d1d6      	bne.n	8002df6 <_vfiprintf_r+0x19a>
 8002e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e4a:	07d9      	lsls	r1, r3, #31
 8002e4c:	d405      	bmi.n	8002e5a <_vfiprintf_r+0x1fe>
 8002e4e:	89ab      	ldrh	r3, [r5, #12]
 8002e50:	059a      	lsls	r2, r3, #22
 8002e52:	d402      	bmi.n	8002e5a <_vfiprintf_r+0x1fe>
 8002e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e56:	f7ff fc85 	bl	8002764 <__retarget_lock_release_recursive>
 8002e5a:	89ab      	ldrh	r3, [r5, #12]
 8002e5c:	065b      	lsls	r3, r3, #25
 8002e5e:	f53f af1f 	bmi.w	8002ca0 <_vfiprintf_r+0x44>
 8002e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e64:	e71e      	b.n	8002ca4 <_vfiprintf_r+0x48>
 8002e66:	ab03      	add	r3, sp, #12
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	462a      	mov	r2, r5
 8002e6c:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <_vfiprintf_r+0x228>)
 8002e6e:	a904      	add	r1, sp, #16
 8002e70:	4630      	mov	r0, r6
 8002e72:	f000 f879 	bl	8002f68 <_printf_i>
 8002e76:	e7e4      	b.n	8002e42 <_vfiprintf_r+0x1e6>
 8002e78:	08003554 	.word	0x08003554
 8002e7c:	0800355e 	.word	0x0800355e
 8002e80:	00000000 	.word	0x00000000
 8002e84:	08002c37 	.word	0x08002c37
 8002e88:	0800355a 	.word	0x0800355a

08002e8c <_printf_common>:
 8002e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e90:	4616      	mov	r6, r2
 8002e92:	4698      	mov	r8, r3
 8002e94:	688a      	ldr	r2, [r1, #8]
 8002e96:	690b      	ldr	r3, [r1, #16]
 8002e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bfb8      	it	lt
 8002ea0:	4613      	movlt	r3, r2
 8002ea2:	6033      	str	r3, [r6, #0]
 8002ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	b10a      	cbz	r2, 8002eb2 <_printf_common+0x26>
 8002eae:	3301      	adds	r3, #1
 8002eb0:	6033      	str	r3, [r6, #0]
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	0699      	lsls	r1, r3, #26
 8002eb6:	bf42      	ittt	mi
 8002eb8:	6833      	ldrmi	r3, [r6, #0]
 8002eba:	3302      	addmi	r3, #2
 8002ebc:	6033      	strmi	r3, [r6, #0]
 8002ebe:	6825      	ldr	r5, [r4, #0]
 8002ec0:	f015 0506 	ands.w	r5, r5, #6
 8002ec4:	d106      	bne.n	8002ed4 <_printf_common+0x48>
 8002ec6:	f104 0a19 	add.w	sl, r4, #25
 8002eca:	68e3      	ldr	r3, [r4, #12]
 8002ecc:	6832      	ldr	r2, [r6, #0]
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	42ab      	cmp	r3, r5
 8002ed2:	dc26      	bgt.n	8002f22 <_printf_common+0x96>
 8002ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	3b00      	subs	r3, #0
 8002edc:	bf18      	it	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	0692      	lsls	r2, r2, #26
 8002ee2:	d42b      	bmi.n	8002f3c <_printf_common+0xb0>
 8002ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ee8:	4641      	mov	r1, r8
 8002eea:	4638      	mov	r0, r7
 8002eec:	47c8      	blx	r9
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d01e      	beq.n	8002f30 <_printf_common+0xa4>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	6922      	ldr	r2, [r4, #16]
 8002ef6:	f003 0306 	and.w	r3, r3, #6
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf02      	ittt	eq
 8002efe:	68e5      	ldreq	r5, [r4, #12]
 8002f00:	6833      	ldreq	r3, [r6, #0]
 8002f02:	1aed      	subeq	r5, r5, r3
 8002f04:	68a3      	ldr	r3, [r4, #8]
 8002f06:	bf0c      	ite	eq
 8002f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f0c:	2500      	movne	r5, #0
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	bfc4      	itt	gt
 8002f12:	1a9b      	subgt	r3, r3, r2
 8002f14:	18ed      	addgt	r5, r5, r3
 8002f16:	2600      	movs	r6, #0
 8002f18:	341a      	adds	r4, #26
 8002f1a:	42b5      	cmp	r5, r6
 8002f1c:	d11a      	bne.n	8002f54 <_printf_common+0xc8>
 8002f1e:	2000      	movs	r0, #0
 8002f20:	e008      	b.n	8002f34 <_printf_common+0xa8>
 8002f22:	2301      	movs	r3, #1
 8002f24:	4652      	mov	r2, sl
 8002f26:	4641      	mov	r1, r8
 8002f28:	4638      	mov	r0, r7
 8002f2a:	47c8      	blx	r9
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d103      	bne.n	8002f38 <_printf_common+0xac>
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f38:	3501      	adds	r5, #1
 8002f3a:	e7c6      	b.n	8002eca <_printf_common+0x3e>
 8002f3c:	18e1      	adds	r1, r4, r3
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	2030      	movs	r0, #48	@ 0x30
 8002f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f46:	4422      	add	r2, r4
 8002f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f50:	3302      	adds	r3, #2
 8002f52:	e7c7      	b.n	8002ee4 <_printf_common+0x58>
 8002f54:	2301      	movs	r3, #1
 8002f56:	4622      	mov	r2, r4
 8002f58:	4641      	mov	r1, r8
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	47c8      	blx	r9
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d0e6      	beq.n	8002f30 <_printf_common+0xa4>
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7d9      	b.n	8002f1a <_printf_common+0x8e>
	...

08002f68 <_printf_i>:
 8002f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	7e0f      	ldrb	r7, [r1, #24]
 8002f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f70:	2f78      	cmp	r7, #120	@ 0x78
 8002f72:	4691      	mov	r9, r2
 8002f74:	4680      	mov	r8, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	469a      	mov	sl, r3
 8002f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f7e:	d807      	bhi.n	8002f90 <_printf_i+0x28>
 8002f80:	2f62      	cmp	r7, #98	@ 0x62
 8002f82:	d80a      	bhi.n	8002f9a <_printf_i+0x32>
 8002f84:	2f00      	cmp	r7, #0
 8002f86:	f000 80d1 	beq.w	800312c <_printf_i+0x1c4>
 8002f8a:	2f58      	cmp	r7, #88	@ 0x58
 8002f8c:	f000 80b8 	beq.w	8003100 <_printf_i+0x198>
 8002f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f98:	e03a      	b.n	8003010 <_printf_i+0xa8>
 8002f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f9e:	2b15      	cmp	r3, #21
 8002fa0:	d8f6      	bhi.n	8002f90 <_printf_i+0x28>
 8002fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8002fa8 <_printf_i+0x40>)
 8002fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fa8:	08003001 	.word	0x08003001
 8002fac:	08003015 	.word	0x08003015
 8002fb0:	08002f91 	.word	0x08002f91
 8002fb4:	08002f91 	.word	0x08002f91
 8002fb8:	08002f91 	.word	0x08002f91
 8002fbc:	08002f91 	.word	0x08002f91
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08002f91 	.word	0x08002f91
 8002fc8:	08002f91 	.word	0x08002f91
 8002fcc:	08002f91 	.word	0x08002f91
 8002fd0:	08002f91 	.word	0x08002f91
 8002fd4:	08003113 	.word	0x08003113
 8002fd8:	0800303f 	.word	0x0800303f
 8002fdc:	080030cd 	.word	0x080030cd
 8002fe0:	08002f91 	.word	0x08002f91
 8002fe4:	08002f91 	.word	0x08002f91
 8002fe8:	08003135 	.word	0x08003135
 8002fec:	08002f91 	.word	0x08002f91
 8002ff0:	0800303f 	.word	0x0800303f
 8002ff4:	08002f91 	.word	0x08002f91
 8002ff8:	08002f91 	.word	0x08002f91
 8002ffc:	080030d5 	.word	0x080030d5
 8003000:	6833      	ldr	r3, [r6, #0]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6032      	str	r2, [r6, #0]
 8003008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800300c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003010:	2301      	movs	r3, #1
 8003012:	e09c      	b.n	800314e <_printf_i+0x1e6>
 8003014:	6833      	ldr	r3, [r6, #0]
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	1d19      	adds	r1, r3, #4
 800301a:	6031      	str	r1, [r6, #0]
 800301c:	0606      	lsls	r6, r0, #24
 800301e:	d501      	bpl.n	8003024 <_printf_i+0xbc>
 8003020:	681d      	ldr	r5, [r3, #0]
 8003022:	e003      	b.n	800302c <_printf_i+0xc4>
 8003024:	0645      	lsls	r5, r0, #25
 8003026:	d5fb      	bpl.n	8003020 <_printf_i+0xb8>
 8003028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800302c:	2d00      	cmp	r5, #0
 800302e:	da03      	bge.n	8003038 <_printf_i+0xd0>
 8003030:	232d      	movs	r3, #45	@ 0x2d
 8003032:	426d      	negs	r5, r5
 8003034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003038:	4858      	ldr	r0, [pc, #352]	@ (800319c <_printf_i+0x234>)
 800303a:	230a      	movs	r3, #10
 800303c:	e011      	b.n	8003062 <_printf_i+0xfa>
 800303e:	6821      	ldr	r1, [r4, #0]
 8003040:	6833      	ldr	r3, [r6, #0]
 8003042:	0608      	lsls	r0, r1, #24
 8003044:	f853 5b04 	ldr.w	r5, [r3], #4
 8003048:	d402      	bmi.n	8003050 <_printf_i+0xe8>
 800304a:	0649      	lsls	r1, r1, #25
 800304c:	bf48      	it	mi
 800304e:	b2ad      	uxthmi	r5, r5
 8003050:	2f6f      	cmp	r7, #111	@ 0x6f
 8003052:	4852      	ldr	r0, [pc, #328]	@ (800319c <_printf_i+0x234>)
 8003054:	6033      	str	r3, [r6, #0]
 8003056:	bf14      	ite	ne
 8003058:	230a      	movne	r3, #10
 800305a:	2308      	moveq	r3, #8
 800305c:	2100      	movs	r1, #0
 800305e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003062:	6866      	ldr	r6, [r4, #4]
 8003064:	60a6      	str	r6, [r4, #8]
 8003066:	2e00      	cmp	r6, #0
 8003068:	db05      	blt.n	8003076 <_printf_i+0x10e>
 800306a:	6821      	ldr	r1, [r4, #0]
 800306c:	432e      	orrs	r6, r5
 800306e:	f021 0104 	bic.w	r1, r1, #4
 8003072:	6021      	str	r1, [r4, #0]
 8003074:	d04b      	beq.n	800310e <_printf_i+0x1a6>
 8003076:	4616      	mov	r6, r2
 8003078:	fbb5 f1f3 	udiv	r1, r5, r3
 800307c:	fb03 5711 	mls	r7, r3, r1, r5
 8003080:	5dc7      	ldrb	r7, [r0, r7]
 8003082:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003086:	462f      	mov	r7, r5
 8003088:	42bb      	cmp	r3, r7
 800308a:	460d      	mov	r5, r1
 800308c:	d9f4      	bls.n	8003078 <_printf_i+0x110>
 800308e:	2b08      	cmp	r3, #8
 8003090:	d10b      	bne.n	80030aa <_printf_i+0x142>
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	07df      	lsls	r7, r3, #31
 8003096:	d508      	bpl.n	80030aa <_printf_i+0x142>
 8003098:	6923      	ldr	r3, [r4, #16]
 800309a:	6861      	ldr	r1, [r4, #4]
 800309c:	4299      	cmp	r1, r3
 800309e:	bfde      	ittt	le
 80030a0:	2330      	movle	r3, #48	@ 0x30
 80030a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030aa:	1b92      	subs	r2, r2, r6
 80030ac:	6122      	str	r2, [r4, #16]
 80030ae:	f8cd a000 	str.w	sl, [sp]
 80030b2:	464b      	mov	r3, r9
 80030b4:	aa03      	add	r2, sp, #12
 80030b6:	4621      	mov	r1, r4
 80030b8:	4640      	mov	r0, r8
 80030ba:	f7ff fee7 	bl	8002e8c <_printf_common>
 80030be:	3001      	adds	r0, #1
 80030c0:	d14a      	bne.n	8003158 <_printf_i+0x1f0>
 80030c2:	f04f 30ff 	mov.w	r0, #4294967295
 80030c6:	b004      	add	sp, #16
 80030c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	4832      	ldr	r0, [pc, #200]	@ (80031a0 <_printf_i+0x238>)
 80030d6:	2778      	movs	r7, #120	@ 0x78
 80030d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	6831      	ldr	r1, [r6, #0]
 80030e0:	061f      	lsls	r7, r3, #24
 80030e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80030e6:	d402      	bmi.n	80030ee <_printf_i+0x186>
 80030e8:	065f      	lsls	r7, r3, #25
 80030ea:	bf48      	it	mi
 80030ec:	b2ad      	uxthmi	r5, r5
 80030ee:	6031      	str	r1, [r6, #0]
 80030f0:	07d9      	lsls	r1, r3, #31
 80030f2:	bf44      	itt	mi
 80030f4:	f043 0320 	orrmi.w	r3, r3, #32
 80030f8:	6023      	strmi	r3, [r4, #0]
 80030fa:	b11d      	cbz	r5, 8003104 <_printf_i+0x19c>
 80030fc:	2310      	movs	r3, #16
 80030fe:	e7ad      	b.n	800305c <_printf_i+0xf4>
 8003100:	4826      	ldr	r0, [pc, #152]	@ (800319c <_printf_i+0x234>)
 8003102:	e7e9      	b.n	80030d8 <_printf_i+0x170>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f023 0320 	bic.w	r3, r3, #32
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	e7f6      	b.n	80030fc <_printf_i+0x194>
 800310e:	4616      	mov	r6, r2
 8003110:	e7bd      	b.n	800308e <_printf_i+0x126>
 8003112:	6833      	ldr	r3, [r6, #0]
 8003114:	6825      	ldr	r5, [r4, #0]
 8003116:	6961      	ldr	r1, [r4, #20]
 8003118:	1d18      	adds	r0, r3, #4
 800311a:	6030      	str	r0, [r6, #0]
 800311c:	062e      	lsls	r6, r5, #24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	d501      	bpl.n	8003126 <_printf_i+0x1be>
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	e002      	b.n	800312c <_printf_i+0x1c4>
 8003126:	0668      	lsls	r0, r5, #25
 8003128:	d5fb      	bpl.n	8003122 <_printf_i+0x1ba>
 800312a:	8019      	strh	r1, [r3, #0]
 800312c:	2300      	movs	r3, #0
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	4616      	mov	r6, r2
 8003132:	e7bc      	b.n	80030ae <_printf_i+0x146>
 8003134:	6833      	ldr	r3, [r6, #0]
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	6032      	str	r2, [r6, #0]
 800313a:	681e      	ldr	r6, [r3, #0]
 800313c:	6862      	ldr	r2, [r4, #4]
 800313e:	2100      	movs	r1, #0
 8003140:	4630      	mov	r0, r6
 8003142:	f7fd f865 	bl	8000210 <memchr>
 8003146:	b108      	cbz	r0, 800314c <_printf_i+0x1e4>
 8003148:	1b80      	subs	r0, r0, r6
 800314a:	6060      	str	r0, [r4, #4]
 800314c:	6863      	ldr	r3, [r4, #4]
 800314e:	6123      	str	r3, [r4, #16]
 8003150:	2300      	movs	r3, #0
 8003152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003156:	e7aa      	b.n	80030ae <_printf_i+0x146>
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	4632      	mov	r2, r6
 800315c:	4649      	mov	r1, r9
 800315e:	4640      	mov	r0, r8
 8003160:	47d0      	blx	sl
 8003162:	3001      	adds	r0, #1
 8003164:	d0ad      	beq.n	80030c2 <_printf_i+0x15a>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	079b      	lsls	r3, r3, #30
 800316a:	d413      	bmi.n	8003194 <_printf_i+0x22c>
 800316c:	68e0      	ldr	r0, [r4, #12]
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	4298      	cmp	r0, r3
 8003172:	bfb8      	it	lt
 8003174:	4618      	movlt	r0, r3
 8003176:	e7a6      	b.n	80030c6 <_printf_i+0x15e>
 8003178:	2301      	movs	r3, #1
 800317a:	4632      	mov	r2, r6
 800317c:	4649      	mov	r1, r9
 800317e:	4640      	mov	r0, r8
 8003180:	47d0      	blx	sl
 8003182:	3001      	adds	r0, #1
 8003184:	d09d      	beq.n	80030c2 <_printf_i+0x15a>
 8003186:	3501      	adds	r5, #1
 8003188:	68e3      	ldr	r3, [r4, #12]
 800318a:	9903      	ldr	r1, [sp, #12]
 800318c:	1a5b      	subs	r3, r3, r1
 800318e:	42ab      	cmp	r3, r5
 8003190:	dcf2      	bgt.n	8003178 <_printf_i+0x210>
 8003192:	e7eb      	b.n	800316c <_printf_i+0x204>
 8003194:	2500      	movs	r5, #0
 8003196:	f104 0619 	add.w	r6, r4, #25
 800319a:	e7f5      	b.n	8003188 <_printf_i+0x220>
 800319c:	08003565 	.word	0x08003565
 80031a0:	08003576 	.word	0x08003576

080031a4 <__sflush_r>:
 80031a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ac:	0716      	lsls	r6, r2, #28
 80031ae:	4605      	mov	r5, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	d454      	bmi.n	800325e <__sflush_r+0xba>
 80031b4:	684b      	ldr	r3, [r1, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	dc02      	bgt.n	80031c0 <__sflush_r+0x1c>
 80031ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	dd48      	ble.n	8003252 <__sflush_r+0xae>
 80031c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	d045      	beq.n	8003252 <__sflush_r+0xae>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031cc:	682f      	ldr	r7, [r5, #0]
 80031ce:	6a21      	ldr	r1, [r4, #32]
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	d030      	beq.n	8003236 <__sflush_r+0x92>
 80031d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	0759      	lsls	r1, r3, #29
 80031da:	d505      	bpl.n	80031e8 <__sflush_r+0x44>
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031e2:	b10b      	cbz	r3, 80031e8 <__sflush_r+0x44>
 80031e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031ec:	6a21      	ldr	r1, [r4, #32]
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b0      	blx	r6
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	d106      	bne.n	8003206 <__sflush_r+0x62>
 80031f8:	6829      	ldr	r1, [r5, #0]
 80031fa:	291d      	cmp	r1, #29
 80031fc:	d82b      	bhi.n	8003256 <__sflush_r+0xb2>
 80031fe:	4a2a      	ldr	r2, [pc, #168]	@ (80032a8 <__sflush_r+0x104>)
 8003200:	40ca      	lsrs	r2, r1
 8003202:	07d6      	lsls	r6, r2, #31
 8003204:	d527      	bpl.n	8003256 <__sflush_r+0xb2>
 8003206:	2200      	movs	r2, #0
 8003208:	6062      	str	r2, [r4, #4]
 800320a:	04d9      	lsls	r1, r3, #19
 800320c:	6922      	ldr	r2, [r4, #16]
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	d504      	bpl.n	800321c <__sflush_r+0x78>
 8003212:	1c42      	adds	r2, r0, #1
 8003214:	d101      	bne.n	800321a <__sflush_r+0x76>
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	b903      	cbnz	r3, 800321c <__sflush_r+0x78>
 800321a:	6560      	str	r0, [r4, #84]	@ 0x54
 800321c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800321e:	602f      	str	r7, [r5, #0]
 8003220:	b1b9      	cbz	r1, 8003252 <__sflush_r+0xae>
 8003222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003226:	4299      	cmp	r1, r3
 8003228:	d002      	beq.n	8003230 <__sflush_r+0x8c>
 800322a:	4628      	mov	r0, r5
 800322c:	f7ff fa9c 	bl	8002768 <_free_r>
 8003230:	2300      	movs	r3, #0
 8003232:	6363      	str	r3, [r4, #52]	@ 0x34
 8003234:	e00d      	b.n	8003252 <__sflush_r+0xae>
 8003236:	2301      	movs	r3, #1
 8003238:	4628      	mov	r0, r5
 800323a:	47b0      	blx	r6
 800323c:	4602      	mov	r2, r0
 800323e:	1c50      	adds	r0, r2, #1
 8003240:	d1c9      	bne.n	80031d6 <__sflush_r+0x32>
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0c6      	beq.n	80031d6 <__sflush_r+0x32>
 8003248:	2b1d      	cmp	r3, #29
 800324a:	d001      	beq.n	8003250 <__sflush_r+0xac>
 800324c:	2b16      	cmp	r3, #22
 800324e:	d11e      	bne.n	800328e <__sflush_r+0xea>
 8003250:	602f      	str	r7, [r5, #0]
 8003252:	2000      	movs	r0, #0
 8003254:	e022      	b.n	800329c <__sflush_r+0xf8>
 8003256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325a:	b21b      	sxth	r3, r3
 800325c:	e01b      	b.n	8003296 <__sflush_r+0xf2>
 800325e:	690f      	ldr	r7, [r1, #16]
 8003260:	2f00      	cmp	r7, #0
 8003262:	d0f6      	beq.n	8003252 <__sflush_r+0xae>
 8003264:	0793      	lsls	r3, r2, #30
 8003266:	680e      	ldr	r6, [r1, #0]
 8003268:	bf08      	it	eq
 800326a:	694b      	ldreq	r3, [r1, #20]
 800326c:	600f      	str	r7, [r1, #0]
 800326e:	bf18      	it	ne
 8003270:	2300      	movne	r3, #0
 8003272:	eba6 0807 	sub.w	r8, r6, r7
 8003276:	608b      	str	r3, [r1, #8]
 8003278:	f1b8 0f00 	cmp.w	r8, #0
 800327c:	dde9      	ble.n	8003252 <__sflush_r+0xae>
 800327e:	6a21      	ldr	r1, [r4, #32]
 8003280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003282:	4643      	mov	r3, r8
 8003284:	463a      	mov	r2, r7
 8003286:	4628      	mov	r0, r5
 8003288:	47b0      	blx	r6
 800328a:	2800      	cmp	r0, #0
 800328c:	dc08      	bgt.n	80032a0 <__sflush_r+0xfc>
 800328e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003296:	81a3      	strh	r3, [r4, #12]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	4407      	add	r7, r0
 80032a2:	eba8 0800 	sub.w	r8, r8, r0
 80032a6:	e7e7      	b.n	8003278 <__sflush_r+0xd4>
 80032a8:	20400001 	.word	0x20400001

080032ac <_fflush_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	4605      	mov	r5, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b913      	cbnz	r3, 80032bc <_fflush_r+0x10>
 80032b6:	2500      	movs	r5, #0
 80032b8:	4628      	mov	r0, r5
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	b118      	cbz	r0, 80032c6 <_fflush_r+0x1a>
 80032be:	6a03      	ldr	r3, [r0, #32]
 80032c0:	b90b      	cbnz	r3, 80032c6 <_fflush_r+0x1a>
 80032c2:	f7ff f835 	bl	8002330 <__sinit>
 80032c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f3      	beq.n	80032b6 <_fflush_r+0xa>
 80032ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032d0:	07d0      	lsls	r0, r2, #31
 80032d2:	d404      	bmi.n	80032de <_fflush_r+0x32>
 80032d4:	0599      	lsls	r1, r3, #22
 80032d6:	d402      	bmi.n	80032de <_fflush_r+0x32>
 80032d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032da:	f7ff fa42 	bl	8002762 <__retarget_lock_acquire_recursive>
 80032de:	4628      	mov	r0, r5
 80032e0:	4621      	mov	r1, r4
 80032e2:	f7ff ff5f 	bl	80031a4 <__sflush_r>
 80032e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032e8:	07da      	lsls	r2, r3, #31
 80032ea:	4605      	mov	r5, r0
 80032ec:	d4e4      	bmi.n	80032b8 <_fflush_r+0xc>
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	059b      	lsls	r3, r3, #22
 80032f2:	d4e1      	bmi.n	80032b8 <_fflush_r+0xc>
 80032f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032f6:	f7ff fa35 	bl	8002764 <__retarget_lock_release_recursive>
 80032fa:	e7dd      	b.n	80032b8 <_fflush_r+0xc>

080032fc <__swhatbuf_r>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	460c      	mov	r4, r1
 8003300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003304:	2900      	cmp	r1, #0
 8003306:	b096      	sub	sp, #88	@ 0x58
 8003308:	4615      	mov	r5, r2
 800330a:	461e      	mov	r6, r3
 800330c:	da0d      	bge.n	800332a <__swhatbuf_r+0x2e>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	bf14      	ite	ne
 800331a:	2340      	movne	r3, #64	@ 0x40
 800331c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003320:	2000      	movs	r0, #0
 8003322:	6031      	str	r1, [r6, #0]
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	b016      	add	sp, #88	@ 0x58
 8003328:	bd70      	pop	{r4, r5, r6, pc}
 800332a:	466a      	mov	r2, sp
 800332c:	f000 f862 	bl	80033f4 <_fstat_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	dbec      	blt.n	800330e <__swhatbuf_r+0x12>
 8003334:	9901      	ldr	r1, [sp, #4]
 8003336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800333a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800333e:	4259      	negs	r1, r3
 8003340:	4159      	adcs	r1, r3
 8003342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003346:	e7eb      	b.n	8003320 <__swhatbuf_r+0x24>

08003348 <__smakebuf_r>:
 8003348:	898b      	ldrh	r3, [r1, #12]
 800334a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800334c:	079d      	lsls	r5, r3, #30
 800334e:	4606      	mov	r6, r0
 8003350:	460c      	mov	r4, r1
 8003352:	d507      	bpl.n	8003364 <__smakebuf_r+0x1c>
 8003354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	2301      	movs	r3, #1
 800335e:	6163      	str	r3, [r4, #20]
 8003360:	b003      	add	sp, #12
 8003362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003364:	ab01      	add	r3, sp, #4
 8003366:	466a      	mov	r2, sp
 8003368:	f7ff ffc8 	bl	80032fc <__swhatbuf_r>
 800336c:	9f00      	ldr	r7, [sp, #0]
 800336e:	4605      	mov	r5, r0
 8003370:	4639      	mov	r1, r7
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff fa64 	bl	8002840 <_malloc_r>
 8003378:	b948      	cbnz	r0, 800338e <__smakebuf_r+0x46>
 800337a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337e:	059a      	lsls	r2, r3, #22
 8003380:	d4ee      	bmi.n	8003360 <__smakebuf_r+0x18>
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	e7e2      	b.n	8003354 <__smakebuf_r+0xc>
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	6020      	str	r0, [r4, #0]
 8003392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003396:	81a3      	strh	r3, [r4, #12]
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800339e:	b15b      	cbz	r3, 80033b8 <__smakebuf_r+0x70>
 80033a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033a4:	4630      	mov	r0, r6
 80033a6:	f000 f837 	bl	8003418 <_isatty_r>
 80033aa:	b128      	cbz	r0, 80033b8 <__smakebuf_r+0x70>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	431d      	orrs	r5, r3
 80033bc:	81a5      	strh	r5, [r4, #12]
 80033be:	e7cf      	b.n	8003360 <__smakebuf_r+0x18>

080033c0 <memmove>:
 80033c0:	4288      	cmp	r0, r1
 80033c2:	b510      	push	{r4, lr}
 80033c4:	eb01 0402 	add.w	r4, r1, r2
 80033c8:	d902      	bls.n	80033d0 <memmove+0x10>
 80033ca:	4284      	cmp	r4, r0
 80033cc:	4623      	mov	r3, r4
 80033ce:	d807      	bhi.n	80033e0 <memmove+0x20>
 80033d0:	1e43      	subs	r3, r0, #1
 80033d2:	42a1      	cmp	r1, r4
 80033d4:	d008      	beq.n	80033e8 <memmove+0x28>
 80033d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033de:	e7f8      	b.n	80033d2 <memmove+0x12>
 80033e0:	4402      	add	r2, r0
 80033e2:	4601      	mov	r1, r0
 80033e4:	428a      	cmp	r2, r1
 80033e6:	d100      	bne.n	80033ea <memmove+0x2a>
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033f2:	e7f7      	b.n	80033e4 <memmove+0x24>

080033f4 <_fstat_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4d07      	ldr	r5, [pc, #28]	@ (8003414 <_fstat_r+0x20>)
 80033f8:	2300      	movs	r3, #0
 80033fa:	4604      	mov	r4, r0
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	f7fd fdb0 	bl	8000f66 <_fstat>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d102      	bne.n	8003410 <_fstat_r+0x1c>
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	b103      	cbz	r3, 8003410 <_fstat_r+0x1c>
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	bd38      	pop	{r3, r4, r5, pc}
 8003412:	bf00      	nop
 8003414:	200009d0 	.word	0x200009d0

08003418 <_isatty_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d06      	ldr	r5, [pc, #24]	@ (8003434 <_isatty_r+0x1c>)
 800341c:	2300      	movs	r3, #0
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fd fdaf 	bl	8000f86 <_isatty>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_isatty_r+0x1a>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_isatty_r+0x1a>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	200009d0 	.word	0x200009d0

08003438 <_sbrk_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	4d06      	ldr	r5, [pc, #24]	@ (8003454 <_sbrk_r+0x1c>)
 800343c:	2300      	movs	r3, #0
 800343e:	4604      	mov	r4, r0
 8003440:	4608      	mov	r0, r1
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	f7fd fdb8 	bl	8000fb8 <_sbrk>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_sbrk_r+0x1a>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_sbrk_r+0x1a>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	200009d0 	.word	0x200009d0

08003458 <memcpy>:
 8003458:	440a      	add	r2, r1
 800345a:	4291      	cmp	r1, r2
 800345c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003460:	d100      	bne.n	8003464 <memcpy+0xc>
 8003462:	4770      	bx	lr
 8003464:	b510      	push	{r4, lr}
 8003466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800346a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346e:	4291      	cmp	r1, r2
 8003470:	d1f9      	bne.n	8003466 <memcpy+0xe>
 8003472:	bd10      	pop	{r4, pc}

08003474 <_realloc_r>:
 8003474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003478:	4607      	mov	r7, r0
 800347a:	4614      	mov	r4, r2
 800347c:	460d      	mov	r5, r1
 800347e:	b921      	cbnz	r1, 800348a <_realloc_r+0x16>
 8003480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003484:	4611      	mov	r1, r2
 8003486:	f7ff b9db 	b.w	8002840 <_malloc_r>
 800348a:	b92a      	cbnz	r2, 8003498 <_realloc_r+0x24>
 800348c:	f7ff f96c 	bl	8002768 <_free_r>
 8003490:	4625      	mov	r5, r4
 8003492:	4628      	mov	r0, r5
 8003494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003498:	f000 f81a 	bl	80034d0 <_malloc_usable_size_r>
 800349c:	4284      	cmp	r4, r0
 800349e:	4606      	mov	r6, r0
 80034a0:	d802      	bhi.n	80034a8 <_realloc_r+0x34>
 80034a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034a6:	d8f4      	bhi.n	8003492 <_realloc_r+0x1e>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4638      	mov	r0, r7
 80034ac:	f7ff f9c8 	bl	8002840 <_malloc_r>
 80034b0:	4680      	mov	r8, r0
 80034b2:	b908      	cbnz	r0, 80034b8 <_realloc_r+0x44>
 80034b4:	4645      	mov	r5, r8
 80034b6:	e7ec      	b.n	8003492 <_realloc_r+0x1e>
 80034b8:	42b4      	cmp	r4, r6
 80034ba:	4622      	mov	r2, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	bf28      	it	cs
 80034c0:	4632      	movcs	r2, r6
 80034c2:	f7ff ffc9 	bl	8003458 <memcpy>
 80034c6:	4629      	mov	r1, r5
 80034c8:	4638      	mov	r0, r7
 80034ca:	f7ff f94d 	bl	8002768 <_free_r>
 80034ce:	e7f1      	b.n	80034b4 <_realloc_r+0x40>

080034d0 <_malloc_usable_size_r>:
 80034d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d4:	1f18      	subs	r0, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfbc      	itt	lt
 80034da:	580b      	ldrlt	r3, [r1, r0]
 80034dc:	18c0      	addlt	r0, r0, r3
 80034de:	4770      	bx	lr

080034e0 <_init>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr

080034ec <_fini>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr
